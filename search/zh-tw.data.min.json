[{"id":0,"href":"/zh-tw/Contributing/Codebase-Overview/","title":"🔱 代碼庫概述","parent":"貢獻","content":"Eask 由兩個組件組成：命令行工具（Eask CLI）和 Elisp 腳本。\nCLI 用於查找相應的 lisp 文件並將其提供給 Emacs 可執行文件。 它會解析所有選項並在 lisp 腳本端將 它們轉換為 Emacs 可理解的選項。 它是用純 JavaScript 編寫的，主文件位於 src/util.js 中。\nElisp 腳本用於實際執行通過 CLI 的每個命令。 所有命令都拆分到它的文件中，並組織在 lisp 文件夾中。 它是用純 Emacs Lisp 編寫的，主要文件位於 lisp/_prepare.el 中。\n   🖥️ CLI 和 Yargs 📜 Elisp 腳本 📂 項目結構  ♻️ Eask 文件中的執行順序        🖥️ CLI 和 Yargs     yargs 命令文件是用 JavaScript 編寫的，位於 cmds 文件夾下。 下面的每個文件都將按照約定命名為 [command_name].js。 此文件應定義基本的命令行解析規則並正確準備數據以提供給 Emacs session。\n讓我們看一下文件 cmds/core/archives.js ：\nexports.command = [\u0026#39;archives\u0026#39;, \u0026#39;sources\u0026#39;]; // 來源的別名 exports.desc = \u0026#39;List out all package archives\u0026#39;; exports.handler = async (argv) =\u0026gt; { await UTIL.e_call(argv, \u0026#39;core/archives\u0026#39;); }; 這是一個標準的 yargs 命令文件，裡麵包含了我們所有的信息需要將它傳遞給 Emacs session。\n exports.command 是參數模式，但它也接受別名（數組） exports.desc 是命令說明 exports.handler 是處理命令執行的異步函數 UTIL 是指向 src/util.js 模塊的全局變量。 'core/archives' 是 lisp 文件夾下的 elisp 文件（沒有 .el 擴展名）。  eask 是一個包含我們所有全局選項的 JavaScript 文件。\nyargs .usage(\u0026#39;Usage: eask \u0026lt;command\u0026gt; [options..]\u0026#39;) .help( \u0026#39;help\u0026#39;, \u0026#39;Show usage instructions.\u0026#39; ) .options({ \u0026#39;global\u0026#39;: { description: `change default workspace to ~/.eask/`, alias: \u0026#39;g\u0026#39;, type: \u0026#39;boolean\u0026#39;, }, }) ... 對於 local 選項，請使用 exports.builder 並在其下指定命令文件。\n看 yargs/docs/advanced.md, 官方文檔以獲取更多信息並獲得更好的解釋會有所幫助！\n📜 Elisp 腳本     Elisp 腳本位於 lisp 文件夾下，將等待 CLI 調用。 所有 Elisp 腳本都是用 Emacs Lisp 編寫的， 並且應該具有以下類似的結構：\n(let ((dir (file-name-directory (nth 1 (member \u0026#34;-scriptload\u0026#34; command-line-args))))) (load (expand-file-name \u0026#34;_prepare.el\u0026#34; (locate-dominating-file dir \u0026#34;_prepare.el\u0026#34;)) nil t)) (eask-start (message \u0026#34;PWD is %s\u0026#34; default-directory)) 請參閱 開發 API 部分了解更多信息！\n📂 項目結構     您需要研究三個地方：\n eask 項目根目錄下的文件 cmds 包含所有可用命令的文件夾 lisp 包含所有 elisp 代碼的文件夾  eask 是節點入口，主要的 yargs 定義！ cmds 和 lisp 文件夾是一一對應的命令文件。\n♻️ Eask 文件中的執行順序     Eask 是這樣執行的：\n Eask environment 構建沙箱並讀取 Eask 文件信息 Emacs configuration 僅在啟用 -g 選項時執行 before hooks hook 在命令任務之前運行嗎 command execution 是主要的命令任務 after hooks 命令任務後是否運行 hook  ","description":"Eask 由兩個組件組成：命令行工具（Eask CLI）和 Elisp 腳本。\nCLI 用於查找相應的 lisp 文件並將其提供給 Emacs 可執行文件。 它會解析所有選項並在 lisp 腳本端將 它們轉換為 Emacs 可理解的選項。 它是用純 JavaScript 編寫的，主文件位於 src/util.js 中。\nElisp 腳本用於實際執行通過 CLI 的每個命令。 所有命令都拆分到它的文件中，並組織在 lisp 文件夾中。 它是用純 Emacs Lisp 編寫的，主要文件位於 lisp/_prepare.el 中。\n   🖥️ CLI 和 Yargs 📜 Elisp 腳本 📂 項目結構  ♻️ Eask 文件中的執行順序        🖥️ CLI 和 Yargs     yargs 命令文件是用 JavaScript 編寫的，位於 cmds 文件夾下。 下面的每個文件都將按照約定命名為 [command_name]."},{"id":1,"href":"/zh-tw/Contributing/Developing-Eask/","title":"🔨 開發 Eask","parent":"貢獻","content":"     🚩 必備條件 📝 建構 📈 測試        🚩 必備條件     要更改 Eask，您應該：\n Node.js 開發環境。 npm 包管理器。 yargs 用於 CLI 解析器。 Emacs, 26.1 以上！  📝 建構     要構建開發環境，您必須使用安裝 Eask 源代碼 。 確保你已經設置了環境 PATH 變量，這樣你就可以調用來自終端的eask。\n完成安裝後，嘗試：\n$ eask locate 它應該打印出您工作的 Eask 工作區的位置。 您應該能夠識別 Eask 工作區，即使您安裝 了多個 Eask 版本！\n📈 測試     Eask 不提供本地測試，我們所有的測試都是使用 GitHub 完成的動作。 請 fork 我們的存儲庫 並將您的更改推送到您的 fork。 GitHub 行動應該為你拿起測試！\n確保您的存儲庫（分叉）中啟用了 GitHub Actions。 必須 設置 -\u0026gt; 操作 -\u0026gt; 常規 -\u0026gt; 操作權限； 確保您已經檢查了正確的選項。\n","description":"🚩 必備條件 📝 建構 📈 測試        🚩 必備條件     要更改 Eask，您應該：\n Node.js 開發環境。 npm 包管理器。 yargs 用於 CLI 解析器。 Emacs, 26.1 以上！  📝 建構     要構建開發環境，您必須使用安裝 Eask 源代碼 。 確保你已經設置了環境 PATH 變量，這樣你就可以調用來自終端的eask。\n完成安裝後，嘗試：\n$ eask locate 它應該打印出您工作的 Eask 工作區的位置。 您應該能夠識別 Eask 工作區，即使您安裝 了多個 Eask 版本！\n📈 測試     Eask 不提供本地測試，我們所有的測試都是使用 GitHub 完成的動作。 請 fork 我們的存儲庫 並將您的更改推送到您的 fork。 GitHub 行動應該為你拿起測試！"},{"id":2,"href":"/zh-tw/Contributing/Documentation/","title":"✒️ 文檔","parent":"貢獻","content":"     🚩 必備條件 📐 設置        Eask 包含全面的用戶指南。 請嘗試相應地擴展它您實施新功能。\n該文檔使用 Hugo 和 GitHub Pages 以 Markdown 編寫。 前者是靜態站點生成器，後者是靜態網頁託管服務來自 GitHub。\n 💡 您可以在 docs/content/ 文件夾下找到我們所有的文檔。  🚩 必備條件     要更改文檔，您應該：\n hugo 可執行； 靜態站點生成器。  📐 設置     要在本地設置網站，您需要先安裝主題：\n# 克隆代碼庫和子模塊一起... git clone https://github.com/emacs-eask/cli --recurse-submodules # 導航到 `docs/theme/geekdoc` 文件夾 cd ./docs/theme/geekdoc/ # 構建主題 npm install \u0026amp;\u0026amp; npm run build 然後運行 hugo 命令：\n# 導航回 `docs` 文件夾 cd ./docs/ # 在本地運行 hugo 服務器 hugo server 就是這樣！ 現在您可以在瀏覽器裡面打開 localhost:1313。 🎉\n 💡 如果你考慮寫草稿，你可以指定 -D 選項。  ","description":"🚩 必備條件 📐 設置        Eask 包含全面的用戶指南。 請嘗試相應地擴展它您實施新功能。\n該文檔使用 Hugo 和 GitHub Pages 以 Markdown 編寫。 前者是靜態站點生成器，後者是靜態網頁託管服務來自 GitHub。\n 💡 您可以在 docs/content/ 文件夾下找到我們所有的文檔。  🚩 必備條件     要更改文檔，您應該：\n hugo 可執行； 靜態站點生成器。  📐 設置     要在本地設置網站，您需要先安裝主題：\n# 克隆代碼庫和子模塊一起... git clone https://github.com/emacs-eask/cli --recurse-submodules # 導航到 `docs/theme/geekdoc` 文件夾 cd ./docs/theme/geekdoc/ # 構建主題 npm install \u0026amp;\u0026amp; npm run build 然後運行 hugo 命令："},{"id":3,"href":"/zh-tw/Contributing/PR/","title":"📭 提交 PR","parent":"貢獻","content":"如果所有測試都通過，Eask 可以在更新後正常運行文檔（如果有），請向我們發送 pull request 隨著你的改變。 🎊\n🧪 測試說明     這已移至存儲庫 README.md 文件。\n請訪問 https://github.com/emacs-eask/cli#-testing。\n","description":"如果所有測試都通過，Eask 可以在更新後正常運行文檔（如果有），請向我們發送 pull request 隨著你的改變。 🎊\n🧪 測試說明     這已移至存儲庫 README.md 文件。\n請訪問 https://github.com/emacs-eask/cli#-testing。"},{"id":4,"href":"/zh-tw/Examples/Emacs-Configuration/","title":"⚙️ Emacs 配置","parent":"範例","content":"Eask 是魔法文件，eask 會將其讀取為 Emacs 中的初始化文件。語法類似於 Cask 文件，但有所不同。\n(package \u0026#34;Emacs configuration\u0026#39;s name\u0026#34; \u0026#34;0.1.0\u0026#34; \u0026#34;Your Emacs configuration\u0026#39;s description\u0026#34;) ; optional (website-url \u0026#34;https://github.com/owner/repo\u0026#34;) (keywords \u0026#34;config\u0026#34;) (package-file \u0026#34;init.el\u0026#34;) ; optional (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (files \u0026#34;early-init.el\u0026#34; \u0026#34;init.el\u0026#34; \u0026#34;lisp/*.el\u0026#34; \u0026#34;site-lisp/*.el\u0026#34;) (source \u0026#34;gnu\u0026#34;) (source \u0026#34;melpa\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) (depends-on \u0026#34;auto-complete\u0026#34;) (depends-on \u0026#34;dash\u0026#34;) (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;flycheck\u0026#34;) (depends-on \u0026#34;helm\u0026#34;) (depends-on \u0026#34;magit\u0026#34;) (depends-on \u0026#34;popup\u0026#34;) (depends-on \u0026#34;projectile\u0026#34;) (depends-on \u0026#34;s\u0026#34;) (depends-on \u0026#34;smartparens\u0026#34;) (depends-on \u0026#34;yasnippet\u0026#34;)   💡 您需要使用 -c 或 \u0026ndash;config 選項來管理您的配置包！  ","description":"Eask 是魔法文件，eask 會將其讀取為 Emacs 中的初始化文件。語法類似於 Cask 文件，但有所不同。\n(package \u0026#34;Emacs configuration\u0026#39;s name\u0026#34; \u0026#34;0.1.0\u0026#34; \u0026#34;Your Emacs configuration\u0026#39;s description\u0026#34;) ; optional (website-url \u0026#34;https://github.com/owner/repo\u0026#34;) (keywords \u0026#34;config\u0026#34;) (package-file \u0026#34;init.el\u0026#34;) ; optional (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (files \u0026#34;early-init.el\u0026#34; \u0026#34;init.el\u0026#34; \u0026#34;lisp/*.el\u0026#34; \u0026#34;site-lisp/*.el\u0026#34;) (source \u0026#34;gnu\u0026#34;) (source \u0026#34;melpa\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) (depends-on \u0026#34;auto-complete\u0026#34;) (depends-on \u0026#34;dash\u0026#34;) (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;flycheck\u0026#34;) (depends-on \u0026#34;helm\u0026#34;) (depends-on \u0026#34;magit\u0026#34;) (depends-on \u0026#34;popup\u0026#34;) (depends-on \u0026#34;projectile\u0026#34;) (depends-on \u0026#34;s\u0026#34;) (depends-on \u0026#34;smartparens\u0026#34;) (depends-on \u0026#34;yasnippet\u0026#34;)   💡 您需要使用 -c 或 \u0026ndash;config 選項來管理您的配置包！  "},{"id":5,"href":"/zh-tw/Getting-Started/","title":"開始使用","parent":"","content":"","description":""},{"id":6,"href":"/zh-tw/Continuous-Integration/GitHub-Actions/","title":"💿 GitHub Actions","parent":"持續整合","content":"   💾 在本地設置 Eask        \n以下是使用 GitHub Actions 服務的示例。\njobs:test:runs-on:${{ matrix.os }}strategy:matrix:os:[ubuntu-latest, macos-latest, windows-latest]emacs-version:[26.3,27.2,28.2,29.1,snapshot]steps:- uses:actions/checkout@v3# 安裝 Emacs- uses:jcs090218/setup-emacs@masterwith:version:${{ matrix.emacs-version }}# 安裝 Eask- uses:emacs-eask/setup-eask@masterwith:version:\u0026#39;snapshot\u0026#39;- name:Run testsrun:|eask package eask install eask compile此示例在以下環境中測試您的 Emacs Lisp 包；\n   OS Emacs Eask     Linux (Ubuntu) 26.x, 27.x, 28.x, 29.x, snapshot latest   macOS 26.x, 27.x, 28.x, 29.x, snapshot latest   Windows 26.x, 27.x, 28.x, 29.x, snapshot latest    通過以下操作，\n setup-emacs 安裝 Emacs setup-eask 安裝所需的 Eask 版本   💡 您可以通過 eask generate workflow github 生成工作流文件， 參見[命令和選項](https://emacs-eask.github.io/Getting-Started/Commands-and-options/#-eask-generate-workflow- github） 了解更多信息！  💾 在本地設置 Eask     您可以使用 .github/scripts/setup-eask (Unix) 或 .github/scripts/setup-eask.ps1 (Windows) 中的腳本在本地安裝 Eask。\n- uses:actions/checkout@v3- name:準備 Eask (Unix)if:matrix.os == \u0026#39;ubuntu-latest\u0026#39; || matrix.os == \u0026#39;macos-latest\u0026#39;run:|chmod -R 777 ./ .github/scripts/setup-eask- name:準備 Eask (Windows)if:matrix.os == \u0026#39;windows-latest\u0026#39;run:.github/scripts/setup-eask.ps1","description":"💾 在本地設置 Eask        \n以下是使用 GitHub Actions 服務的示例。\njobs:test:runs-on:${{ matrix.os }}strategy:matrix:os:[ubuntu-latest, macos-latest, windows-latest]emacs-version:[26.3,27.2,28.2,29.1,snapshot]steps:- uses:actions/checkout@v3# 安裝 Emacs- uses:jcs090218/setup-emacs@masterwith:version:${{ matrix.emacs-version }}# 安裝 Eask- uses:emacs-eask/setup-eask@masterwith:version:\u0026#39;snapshot\u0026#39;- name:Run testsrun:|eask package eask install eask compile此示例在以下環境中測試您的 Emacs Lisp 包；\n   OS Emacs Eask     Linux (Ubuntu) 26.x, 27.x, 28.x, 29.x, snapshot latest   macOS 26.x, 27.x, 28.x, 29.x, snapshot latest   Windows 26."},{"id":7,"href":"/zh-tw/Getting-Started/Quick-Start/","title":"🔰 快速開始","parent":"開始使用","content":"   步驟 1: 設置 NodeJS runtime 和 npm 步驟 2: 安裝 Eask 步驟 3: 導航到現有項目或創建新項目 步驟 4： 創建 Eask 文件 步驟 5: 開始包開發 步驟 6: 管理包檔案 步驟 7: 添加一些依賴 步驟 8: 安裝依賴 也可以看看      使用 Eask 作為您的 Emacs 包管理工具。\n 安裝是跨平台的，使用 npm。 關於如何使用其他方法安裝 Eask 的說明， 請參見安裝。\n需要安裝 Git 才能運行本教程。\n  步驟 1: 設置 NodeJS runtime 和 npm     請在 [此處](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm#using-a-node-installer-to-install-nodejs-and- npm) 並安裝 NodeJS 和 npm 對應你當前的操作系統\n 💡 如果您不喜歡 NodeJS 和 npm，您可以使用 [binary](https://emacs-eask.github.io/Getting-Started/Install-Eask/#binary-cross -platform） 來自我們的 release 頁面。  步驟 2: 安裝 Eask     $ npm install -g @emacs-eask/cli 要驗證您的新安裝：\n$ eask --version 步驟 3: 導航到現有項目或創建新項目     如果您已有一個現有的 elisp 項目，請導航到項目根文件夾。\n$ cd /path/to/project/dir/ 創建一個：\n$ eask create package project-name 它應該在您當前的工作目錄中創建一個名為 project-name 的文件夾。\n步驟 4： 創建 Eask 文件     如果您選擇使用 eask create 創建項目，請跳過此步驟！\n否則，在現有項目中創建 Eask 文件：\n$ eask init 您將被問到一些關於您將要創建的包的問題：\npackage name: (your-project) version: (1.0.0) description: Your project description! entry point: (your-project.el) emacs version: (26.1) website: https://example.com/project-url/ keywords: tools example About to write to /path/to/project/Eask: (package \u0026quot;your-project\u0026quot; \u0026quot;1.0.0\u0026quot; \u0026quot;Your project description!\u0026quot;) (website-url \u0026quot;https://example.com/project-url/\u0026quot;) (keywords \u0026quot;tools\u0026quot; \u0026quot;example\u0026quot;) (package-file \u0026quot;your-project.el\u0026quot;) (script \u0026quot;test\u0026quot; \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot;) (source \u0026quot;gnu\u0026quot;) (depends-on \u0026quot;emacs\u0026quot; \u0026quot;26.1\u0026quot;) Is this OK? (yes) yes ⏎ 您應該能夠在項目文件夾中看到一個 Eask 文件。 🎉🎊\n步驟 5: 開始包開發     要檢查您的包裹信息，請運行：\n$ eask info 您應該能夠看到以下信息：\nyour-package (1.0.0) | deps: 0 | devDeps: 0 Your project description! https://example.com/project-url/ keywords: tools, example entry: your-package-file.el kind: single dist .total-files: 0 .unpacked-size: 0 從一開始，您就不會有任何 dependencies 和 devDependencies（默認為 0）！\n步驟 6: 管理包檔案     您可以使用 Eask 文件中的 source 指令來管理包存檔。\n(source \u0026#34;gnu\u0026#34;) ; 默認 (source \u0026#34;melpa\u0026#34;) ; 添加包 archive   💡 有關更多信息，請參閱 DSL/source！  步驟 7: 添加一些依賴     您可以在 Eask 文件中使用 depends-on 指令添加依賴項。\n... (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;ht\u0026#34;)   💡 確保您添加的依賴項在包存檔中可用！\n否則你會得到一個錯誤 `package-name-' is unavailable！\n  步驟 8: 安裝依賴     現在我們可以安裝我們在 Eask 文件中指定的依賴項：\n$ eask install-deps 您應該會看到 Eask 正確執行，輸出類似如下：\nLoading package information... done Installing 2 package dependencies... - Installing f (20220405.1534)... done - Installing ht (20210119.741)... done (Total of 2 dependencies installed, 0 skipped) 也可以看看      Commands and options Domain Specific Language Basic Usage  ","description":"步驟 1: 設置 NodeJS runtime 和 npm 步驟 2: 安裝 Eask 步驟 3: 導航到現有項目或創建新項目 步驟 4： 創建 Eask 文件 步驟 5: 開始包開發 步驟 6: 管理包檔案 步驟 7: 添加一些依賴 步驟 8: 安裝依賴 也可以看看      使用 Eask 作為您的 Emacs 包管理工具。\n 安裝是跨平台的，使用 npm。 關於如何使用其他方法安裝 Eask 的說明， 請參見安裝。\n需要安裝 Git 才能運行本教程。\n  步驟 1: 設置 NodeJS runtime 和 npm     請在 [此處](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm#using-a-node-installer-to-install-nodejs-and- npm) 並安裝 NodeJS 和 npm 對應你當前的操作系統"},{"id":8,"href":"/zh-tw/Getting-Started/Finding-Emacs/","title":"🔭 尋找 Emacs","parent":"開始使用","content":"默認情況下，會為默認的 Emacs 安裝軟件包，即“emacs”命令後面的軟件包。 要選擇不同的 Emacs，請將環境變量“EMACS”設置為要使用的 Emacs 的命令名稱或可執行路徑：\n$ EMACS=\u0026#34;emacs26.1\u0026#34; eask command 請注意，已安裝的依賴項受 Emacs 版本的影響。 因此，在版本之間切換時，您必須為每個版本安裝依賴項：\n$ EMACS=\u0026#34;emacs26.3\u0026#34; eask install 不幸的是，在某些情況下，Emacs 本身會以與 eask 衝突的方式重置 EMACS 變量，在這種情況下， 您可以改用環境變量 EASK_EMACS。 具體來說，此問題會影響：Emacs-26，對於 M-x compile、 M-x shell 或 M-x term，對於 Emacs-27 和 Emacs-28 僅適用於 M-x term。\n","description":"默認情況下，會為默認的 Emacs 安裝軟件包，即“emacs”命令後面的軟件包。 要選擇不同的 Emacs，請將環境變量“EMACS”設置為要使用的 Emacs 的命令名稱或可執行路徑：\n$ EMACS=\u0026#34;emacs26.1\u0026#34; eask command 請注意，已安裝的依賴項受 Emacs 版本的影響。 因此，在版本之間切換時，您必須為每個版本安裝依賴項：\n$ EMACS=\u0026#34;emacs26.3\u0026#34; eask install 不幸的是，在某些情況下，Emacs 本身會以與 eask 衝突的方式重置 EMACS 變量，在這種情況下， 您可以改用環境變量 EASK_EMACS。 具體來說，此問題會影響：Emacs-26，對於 M-x compile、 M-x shell 或 M-x term，對於 Emacs-27 和 Emacs-28 僅適用於 M-x term。"},{"id":9,"href":"/zh-tw/DSL/","title":"领域特定语言","parent":"","content":"本文檔是關於 [DSL] (https://en.wikipedia.org/wiki/Domain-specific_language)。\n 🚩 包元資料  🔍 package (name version description) 🔍 website-url (url) 🔍 keywords (\u0026amp;rest keywords) 🔍 author (name \u0026amp;optional email) 🔍 license (name)   🚩 Package contents  🔍 package-file (file version description) 🔍 package-descriptor (pkg-file) 🔍 files (\u0026amp;rest patterns)   🚩 測試  🔍 script (name command \u0026amp;rest args)   🚩 依賴  🔍 source (alias) 🔍 source (name url) 🔍 source-priority (name priority) 🔍 depends-on (package-name \u0026amp;optional minimum-version) 🔍 depends-on (package-name \u0026amp;rest recipe) 🔍 development (\u0026amp;rest body) 🔍 load-paths (\u0026amp;rest paths) 🔍 exec-paths (\u0026amp;rest paths)      🚩 包元資料     🔍 package (name version description)     使用給定的名稱、版本和描述聲明一個包：\n(package \u0026#34;ert-runner\u0026#34; \u0026#34;0.7.0\u0026#34; \u0026#34;Opinionated Ert testing workflow\u0026#34;) 所有參數都是字符串。 該版本必須是 Emacs 內置的 version-to-list 可以理解的版本。\n🔍 website-url (url)     聲明包網站。\n(website-url \u0026#34;https://github.com/owner/repo.git\u0026#34;) 🔍 keywords (\u0026amp;rest keywords)     聲明包關鍵字。\n(keywords \u0026#34;tool\u0026#34; \u0026#34;utility\u0026#34; \u0026#34;emacs\u0026#34;) 🔍 author (name \u0026amp;optional email)     聲明包的作者。\n(author \u0026#34;使用者名稱\u0026#34; \u0026#34;user.name@example.com\u0026#34;) 🔍 license (name)     聲明包的作者。\n(license \u0026#34;GPLv3\u0026#34;) 🚩 Package contents     🔍 package-file (file version description)     從文件的包頭定義此包及其運行時依賴項（僅用於包開發）。\n(package-file \u0026#34;foo.el\u0026#34;) 🔍 package-descriptor (pkg-file)     通過指定文件中包含的包描述符直接聲明所有包元數據，名稱由文件給出。\n(package-descriptor \u0026#34;foo-pkg.el\u0026#34;) 🔍 files (\u0026amp;rest patterns)     指定包含在此項目中的文件列表。\n(files \u0026#34;foo.el\u0026#34;) (files \u0026#34;*.el\u0026#34; \u0026#34;core/*.el\u0026#34;) 🚩 測試     🔍 script (name command \u0026amp;rest args)     添加內置腳本及其預設的生命週期事件以及任意腳本。\n(script \u0026#34;test\u0026#34; \u0026#34;echo This is a test!\u0026#34;) 🚩 依賴     🔍 source (alias)     🔍 source (name url)     添加包存檔以從中安裝依賴項。\n(source \u0026#34;gnu\u0026#34;) (source \u0026#34;gnu\u0026#34; \u0026#34;https://elpa.gnu.org/packages/\u0026#34;) 可用別名：\n gnu (https://elpa.gnu.org/packages/) nongnu (https://elpa.nongnu.org/nongnu/) celpa (https://celpa.conao3.com/) jcs-elpa (https://jcs-emacs.github.io/jcs-elpa/packages/) marmalade (https://marmalade-repo.org/packages/) melpa (https://melpa.org/packages/) melpa-stable (https://stable.melpa.org/packages/) org (https://orgmode.org/elpa/) shmelpa (https://shmelpa.commandlinesystems.com/packages/)  可用 devel 別名：\n gnu-devel (https://elpa.gnu.org/devel/) nongnu-devel (https://elpa.nongnu.org/nongnu-devel/)   💡 使用**\u0026ndash;insecure讓https轉http**，但不推薦!  🔍 source-priority (name priority)     設置 archive 優先級。\n(source-priority \u0026#34;gnu\u0026#34; 5) 🔍 depends-on (package-name \u0026amp;optional minimum-version)     🔍 depends-on (package-name \u0026amp;rest recipe)     指定此包的依賴項。\n指定 archives 中列出的依賴項：\n(depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) (depends-on \u0026#34;dash\u0026#34;) (depends-on \u0026#34;company\u0026#34;) 以 recipe 格式指定依賴項：\n(depends-on \u0026#34;auto-rename-tag\u0026#34; :repo \u0026#34;jcs-elpa/auto-rename-tag\u0026#34; :fetcher \u0026#39;github) (depends-on \u0026#34;lsp-ui\u0026#34; :repo \u0026#34;emacs-lsp/lsp-ui\u0026#34; :fetcher \u0026#39;github :files \u0026#39;(:defaults \u0026#34;lsp-ui-doc.html\u0026#34; \u0026#34;resources\u0026#34;))   💡 使用命令 eask install-deps 安裝依賴項！  🔍 development (\u0026amp;rest body)     將正文中所有 depends-on 表達式的範圍限定為開發依賴。\n(development (depends-on \u0026#34;ert-runner\u0026#34;) (depends-on \u0026#34;elsa\u0026#34;))   💡 您需要為開發依賴項指定 \u0026ndash;dev 選項！  🔍 load-paths (\u0026amp;rest paths)     指定要添加到 load-path 的路徑。\n(load-paths \u0026#34;/lisp/\u0026#34;) 🔍 exec-paths (\u0026amp;rest paths)     指定要添加到 exec-path 的路徑。\n(load-paths \u0026#34;/bin/\u0026#34;) ","description":"本文檔是關於 [DSL] (https://en.wikipedia.org/wiki/Domain-specific_language)。\n 🚩 包元資料  🔍 package (name version description) 🔍 website-url (url) 🔍 keywords (\u0026amp;rest keywords) 🔍 author (name \u0026amp;optional email) 🔍 license (name)   🚩 Package contents  🔍 package-file (file version description) 🔍 package-descriptor (pkg-file) 🔍 files (\u0026amp;rest patterns)   🚩 測試  🔍 script (name command \u0026amp;rest args)   🚩 依賴  🔍 source (alias) 🔍 source (name url) 🔍 source-priority (name priority) 🔍 depends-on (package-name \u0026amp;optional minimum-version) 🔍 depends-on (package-name \u0026amp;rest recipe) 🔍 development (\u0026amp;rest body) 🔍 load-paths (\u0026amp;rest paths) 🔍 exec-paths (\u0026amp;rest paths)      🚩 包元資料     🔍 package (name version description)     使用給定的名稱、版本和描述聲明一個包："},{"id":10,"href":"/zh-tw/Getting-Started/Install-Eask/","title":"💾 安裝 Eask","parent":"開始使用","content":"本文檔將指導您完成 Eask 的安裝。\n   💾 快速安裝  二進制（跨平台） 使用 Shell （macOS 和 Linux） 使用 Shell (Windows) npm Homebrew (macOS or Linux) MacPorts (macOS) Chocolatey (Windows) Scoop (Windows)   💾 Source  🚩 Prerequisite Tools 🏡 設置        💾 快速安裝     二進制（跨平台）     從 Eask Releases 下載適合您平台的版本。 下載後，二進製文件可以從任何地方運行。 您無需將其安裝在全球位置。 這適用於您沒有特權帳戶的共享主機和其他系統。\n理想情況下，您應該將它安裝在 PATH 中的某個位置以便於使用。 /usr/local/bin 是最有可能的位置。\n使用 Shell （macOS 和 Linux）     $ curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh 使用 Shell (Windows)     $ curl.exe -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.bat | cmd /Q npm     如果您的機器上安裝了 npm，您可以使用以下一行代碼安裝 Eask：\n$ npm install -g @emacs-eask/cli Homebrew (macOS or Linux)     WIP\nMacPorts (macOS)     WIP\nChocolatey (Windows)     如果您的計算機上安裝了 Chocolatey，則可以使用以下一行代碼安裝 Eask：\n$ chcoc install eask Scoop (Windows)     WIP\n💾 Source     🚩 Prerequisite Tools      Git Node.js npm  或者，您可以直接從這個代碼庫克隆它:\n# 克隆這個代碼庫 $ git clone https://github.com/emacs-eask/cli eask # 將工作目錄更改為eask $ cd eask # 安裝所有依賴 $ npm install 🏡 設置     確保根據您的系統設置環境路徑變量:\n在 Linux/macOS 上，\nexport PATH=\u0026#34;path/to/eask/bin:$PATH\u0026#34; 在 Windows 上，\nset PATH=%PATH%;c:/path/to/eask/bin 正確設置後，嘗試 eask --version 然後您應該會看到當前 eask 的版本號！ 🎉🎊\n","description":"本文檔將指導您完成 Eask 的安裝。\n   💾 快速安裝  二進制（跨平台） 使用 Shell （macOS 和 Linux） 使用 Shell (Windows) npm Homebrew (macOS or Linux) MacPorts (macOS) Chocolatey (Windows) Scoop (Windows)   💾 Source  🚩 Prerequisite Tools 🏡 設置        💾 快速安裝     二進制（跨平台）     從 Eask Releases 下載適合您平台的版本。 下載後，二進製文件可以從任何地方運行。 您無需將其安裝在全球位置。 這適用於您沒有特權帳戶的共享主機和其他系統。\n理想情況下，您應該將它安裝在 PATH 中的某個位置以便於使用。 /usr/local/bin 是最有可能的位置。\n使用 Shell （macOS 和 Linux）     $ curl -fsSL https://raw."},{"id":11,"href":"/zh-tw/Examples/Package-Development/","title":"📦 Package 開發","parent":"範例","content":"Eask 是魔法文件，eask 會將其讀取為 Emacs 中的初始化文件。語法類似於“Cask”文件，但有所不同。\n(package \u0026#34;your-package\u0026#34; \u0026#34;0.1.0\u0026#34; \u0026#34;Your package description\u0026#34;) (website-url \u0026#34;https://github.com/owner/repo\u0026#34;) (keywords \u0026#34;example\u0026#34; \u0026#34;tool\u0026#34;) (package-file \u0026#34;your-package-file.el\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) (depends-on \u0026#34;dash\u0026#34;) (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;s\u0026#34;) ","description":"Eask 是魔法文件，eask 會將其讀取為 Emacs 中的初始化文件。語法類似於“Cask”文件，但有所不同。\n(package \u0026#34;your-package\u0026#34; \u0026#34;0.1.0\u0026#34; \u0026#34;Your package description\u0026#34;) (website-url \u0026#34;https://github.com/owner/repo\u0026#34;) (keywords \u0026#34;example\u0026#34; \u0026#34;tool\u0026#34;) (package-file \u0026#34;your-package-file.el\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) (depends-on \u0026#34;dash\u0026#34;) (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;s\u0026#34;) "},{"id":12,"href":"/zh-tw/Continuous-Integration/GitLab-Runner/","title":"🦊 GitLab Runner","parent":"持續整合","content":"  \n使用 GitLab 運行程序的示例。\ndefault:before_script:- apt-get update- apt-get install unzip- curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh- export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34;test-26.3:image:silex/emacs:26.3-ciscript:- eask clean all- eask package- eask install- eask compiletest-27.2:image:silex/emacs:27.2-ciscript:- eask clean all- eask package- eask install- eask compiletest-28.2:image:silex/emacs:28.2-ciscript:- eask clean all- eask package- eask install- eask compile此示例在以下環境中測試您的 Emacs Lisp 包；\n   OS Emacs Eask     Linux (Debian) 26.x, 27.x, 28.x, snapshot latest   macOS n/a latest   Windows n/a latest     💡 您可以通過 eask generate workflow gitlab 生成工作流文件， 參見[命令和選項](https://emacs-eask.github.io/Getting-Started/Commands-and-options/#-eask-generate-workflow- gitlab） 了解更多信息！  ","description":"使用 GitLab 運行程序的示例。\ndefault:before_script:- apt-get update- apt-get install unzip- curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh- export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34;test-26.3:image:silex/emacs:26.3-ciscript:- eask clean all- eask package- eask install- eask compiletest-27.2:image:silex/emacs:27.2-ciscript:- eask clean all- eask package- eask install- eask compiletest-28.2:image:silex/emacs:28.2-ciscript:- eask clean all- eask package- eask install- eask compile此示例在以下環境中測試您的 Emacs Lisp 包；\n   OS Emacs Eask     Linux (Debian) 26.x, 27.x, 28.x, snapshot latest   macOS n/a latest   Windows n/a latest     💡 您可以通過 eask generate workflow gitlab 生成工作流文件， 參見[命令和選項](https://emacs-eask."},{"id":13,"href":"/zh-tw/Getting-Started/Basic-Usage/","title":"🔨 使用基礎","parent":"開始使用","content":"Eask 的 CLI 功能齊全但易於使用，即使對於那些使用命令行的經驗非常有限的人也是如此。\n以下是您在開發 Eask 項目時將使用的最常用命令的說明。 請參閱 命令和選項 以全面了解 Eask 的 CLI。\n一旦你安裝了 Eask，確保它在你的 PATH 中。 您可以通過 help 命令測試 Eask 是否已正確安裝：\n$ eask --help   💡 或者，您可以使用 --show-hidden 來顯示所有可用的命令和選項！  您在控制台中看到的輸出應類似於以下內容：\neask is the main command, used to manage your Emacs dependencies Eask is a command-line tool that helps you build, lint, and test Emacs Lisp packages. Usage: eask \u0026lt;command\u0026gt; [options..] Commands: archives List out all package archives [aliases: sources] clean \u0026lt;type\u0026gt; Delete various files produced during building compile [names..] Byte compile all Emacs Lisp files in the package create \u0026lt;type\u0026gt; Create a new elisp project emacs [args..] Execute emacs with the appropriate environment eval [form] Evaluate lisp form with a proper PATH path [patterns..] Print the PATH (exec-path) from workspace [aliases: exec-path] exec [args..] Execute command with correct environment PATH set up files [patterns..] Print all package files generate \u0026lt;type\u0026gt; Generate files that are used for the development info Display information about the current package init [files..] Initialize project to use Eask install-deps Automatically install package dependencies [aliases: install-dependencies, prepare] install [names..] Install packages keywords List available keywords that can be used in the header section link \u0026lt;action\u0026gt; Manage links lint \u0026lt;type\u0026gt; Run linter list List packages load-path [patterns..] Print the load-path from workspace load [files..] Load elisp files outdated Show all outdated dependencies package-directory Print path to package directory package [destination] Build a package artifact, and put it into the given destination recipe Suggest a recipe format refresh Download package archives reinstall [names..] Reinstall packages run [names..] Run the script named [names..] [aliases: run-script] search [queries..] Search packages status Display the state of the workspace test \u0026lt;type\u0026gt; Run test uninstall [names..] Uninstall packages [aliases: delete] upgrade [names..] Upgrade packages check-eask [files..] Run eask checker locate Print out Eask installed location upgrade-eask Upgrade Eask itself [aliases: upgrade-self] Proxy Options: --proxy update proxy for HTTP and HTTPS to host [string] --http-proxy update proxy for HTTP to host [string] --https-proxy update proxy for HTTPS to host [string] --no-proxy set no-proxy to host [string] Options: --version show version number [boolean] --help show usage instructions [boolean] --show-hidden Show hidden commands and options [boolean] -g, --global change default workspace to ~/.eask/ [boolean] -c, --config change default workspace to ~/.emacs.d/ [boolean] -a, --all enable all flag [boolean] -q, --quick start cleanly without loading the configuration files [boolean] -f, --force enable force flag [boolean] --debug turn on debug mode [boolean] --strict report error instead of warnings [boolean] --allow-error continue the executioon even there is error reported [boolean] --insecure allow insecure connection [boolean] -v, --verbose set verbosity from 0 to 5 [number] For more information, find the manual at https://emacs-eask.github.io/ 🗃️ eask 命令     最常見的用法可能是在當前目錄作為輸入目錄的情況下運行 eask。 然後你運行 eask 後跟一個子命令：\n$ eask info # 打印出Eask文件信息 Notice the subcommand can be nested:\n$ eask clean workspace # 刪除你的 .eask 文件夾 傳遞選項 --help 以查找有關您正在使用的命令的更多信息：\n$ eask clean --help 輸出，它顯示支持 7 個子命令：\nDelete various files produced during building Usage: eask clean \u0026lt;type\u0026gt; [options..] Commands: clean all Do all cleaning tasks [aliases: everything] clean autoloads Remove generated autoloads file clean dist [destination] Delete dist subdirectory [aliases: distribution] clean elc Remove byte compiled files generated by eask compile clean log-file Remove all generated log files clean pkg-file Remove generated pkg-file clean workspace Clean up .eask directory [aliases: .eask] Positionals: \u0026lt;type\u0026gt; type of the cleaning task ... 以下是已知的嵌套子命令列表：\n eask create eask clean eask generate eask generate workflow eask link eask lint eask test  📌 了解你的 elpa 目錄     Eask 創建了一個隔離的環境，因此在播放、測試和運行您的 elisp 包後它不會產生任何副作用。 但了解當前 Eask 會話指向的 elpa 目錄（您可以將其視為您的 .emacs.d）非常重要，這樣您 才能釋放該工具的全部潛力！\n以下是 Eask 在不同場景下的幕後工作方式：\n   名稱 描述 選項 路徑     local 默認行為，使用 Eask 作為包開發工具 n/a ./.eask   config 使用 Eask 作為您的包管理器 (它也可以用作測試工具) -c or --config ~/.emacs.d   global Eask 作為通用工具使用，與其他範圍無關 -g or --global ~/.eask    您可能會想到為什麼要創建這些規則。\nconfig 和 local 範圍很容易理解，因為許多其他構建工具使用 local 範圍來創建隔離環境。 config 範圍是一項附加功能，適用於喜歡使用外部工具而不是內置 package.el 或配置基礎 straight.el 管理包的人， 因此您可以節省啟動時間 檢查是否為您的 Emacs 運行安裝了軟件包。\n那麼 Eask 的 global 範圍是什麼？ 為什麼需要它？\nEask 現在不僅僅是一個構建工具。 一些命令不需要它們的依賴項作為包依賴項。 例如，cat 命令：\n$ eask cat [PATTERNS..] cat 是一個模仿 Linux 的默認 cat 命令的簡單命令，但它會為您突出顯示語法！ 它是如何實施的？ 該命令依賴於外部包 e2ansi，這既不是 package 也不是 config 依賴項（它可能是，但假設我們不需要它）。\n我們如何使用這個命令而不會對您的項目或個人 emacs 配置產生副作用？ 針對這個問題引入了全局範圍。 現在我們可以添加任何有用的命令而不用擔心你的環境被搞砸了。\n下面是描述 Eask 生命週期的流程圖：\n默認情況下，Eask 使用您的當前目錄作為您的工作區，因為大多數時候您只想為您的 elisp 包運行作業。\n","description":"Eask 的 CLI 功能齊全但易於使用，即使對於那些使用命令行的經驗非常有限的人也是如此。\n以下是您在開發 Eask 項目時將使用的最常用命令的說明。 請參閱 命令和選項 以全面了解 Eask 的 CLI。\n一旦你安裝了 Eask，確保它在你的 PATH 中。 您可以通過 help 命令測試 Eask 是否已正確安裝：\n$ eask --help   💡 或者，您可以使用 --show-hidden 來顯示所有可用的命令和選項！  您在控制台中看到的輸出應類似於以下內容：\neask is the main command, used to manage your Emacs dependencies Eask is a command-line tool that helps you build, lint, and test Emacs Lisp packages. Usage: eask \u0026lt;command\u0026gt; [options..] Commands: archives List out all package archives [aliases: sources] clean \u0026lt;type\u0026gt; Delete various files produced during building compile [names."},{"id":14,"href":"/zh-tw/Examples/","title":"範例","parent":"","content":"","description":""},{"id":15,"href":"/zh-tw/Continuous-Integration/Travis-CI/","title":"📀 Travis CI","parent":"持續整合","content":"  \n使用 Travis CI 的示例。\nlanguage:nixos:- linux- osxenv:- EMACS_CI=emacs-26-3- EMACS_CI=emacs-27-2- EMACS_CI=emacs-28-2- EMACS_CI=emacs-snapshotmatrix:fast_finish:trueallow_failures:- env:EMACS_CI=emacs-snapshotinstall:- bash \u0026lt;(curl https://raw.githubusercontent.com/purcell/nix-emacs-ci/master/travis-install)- curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh- export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34;script:- eask package- eask install- eask compile此示例在以下環境中測試您的 Emacs Lisp 包；\n   OS Emacs Eask     Linux (Ubuntu) 26.x, 27.x, 28.x, snapshot latest   macOS n/a latest   Windows n/a latest     💡 您可以通過eask generate workflow travis-ci生成工作流文件， 參見[命令和選項](https://emacs-eask.github.io/Getting-Started/Commands-and-options/#-eask-generate- workflow-travis-ci) 了解更多信息！  ","description":"使用 Travis CI 的示例。\nlanguage:nixos:- linux- osxenv:- EMACS_CI=emacs-26-3- EMACS_CI=emacs-27-2- EMACS_CI=emacs-28-2- EMACS_CI=emacs-snapshotmatrix:fast_finish:trueallow_failures:- env:EMACS_CI=emacs-snapshotinstall:- bash \u0026lt;(curl https://raw.githubusercontent.com/purcell/nix-emacs-ci/master/travis-install)- curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh- export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34;script:- eask package- eask install- eask compile此示例在以下環境中測試您的 Emacs Lisp 包；\n   OS Emacs Eask     Linux (Ubuntu) 26.x, 27.x, 28.x, snapshot latest   macOS n/a latest   Windows n/a latest     💡 您可以通過eask generate workflow travis-ci生成工作流文件， 參見[命令和選項](https://emacs-eask."},{"id":16,"href":"/zh-tw/Getting-Started/Commands-and-options/","title":"🚩 命令和選項","parent":"開始使用","content":" 🚩 創建  🔍 eask create package 🔍 eask create elpa   🚩 核心  🔍 eask init 🔍 eask info 🔍 eask status 🔍 eask install-deps 🔍 eask install 🔍 eask uninstall 🔍 eask package 🔍 eask compile 🔍 eask package-directory 🔍 eask path 🔍 eask load-path 🔍 eask files 🔍 eask exec 🔍 eask emacs 🔍 eask eval 🔍 eask load 🔍 eask recipe 🔍 eask keywords 🔍 eask cat 🔍 eask concate 🔍 eask run   🚩 管理  🔍 eask archives 🔍 eask search 🔍 eask upgrade 🔍 eask list 🔍 eask outdated 🔍 eask refresh   🚩 生成  🔍 eask generate autoloads 🔍 eask generate pkg-file 🔍 eask generate license 🔍 eask generate ignore 🔍 eask generate workflow circle-ci 🔍 eask generate workflow github 🔍 eask generate workflow gitlab 🔍 eask generate workflow travis-ci   🚩 連結  🔍 eask link add   🔍 eask link delete [name..] 🔍 eask link list   🚩 清理  🔍 eask clean workspace 🔍 eask clean elc 🔍 eask clean dist 🔍 eask clean autoloads 🔍 eask clean pkg-file 🔍 eask clean log-file 🔍 eask clean all   🚩 检查器  🔍 eask lint package 🔍 eask lint checkdoc 🔍 eask lint elint 🔍 eask lint elisp-lint 🔍 eask lint elsa 🔍 eask lint indent 🔍 eask lint keywords 🔍 eask lint license 🔍 eask lint declare 🔍 eask lint regexps   🚩 測試框架  🔍 eask test activate 🔍 eask test ert 🔍 eask test ert-runner 🔍 eask test buttercup   🚩 實用工具  🔍 eask upgrade-eask 🔍 eask locate   🚩 Checker  🔍 eask check-eask   🚩 全域選項  🔍 \u0026ndash;global, -g 🔍 \u0026ndash;config, -c 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;quick, -q 🔍 \u0026ndash;force, -f 🔍 \u0026ndash;debug 🔍 \u0026ndash;strict 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;insecure 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help   🚩 代理選項  🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt;      eask 程序的一般語法是：\n$ eask [GLOBAL-OPTIONS] [COMMAND] [COMMAND-OPTIONS] [COMMAND-ARGUMENTS] 🚩 創建     🔍 eask create package     使用默認的“Eask”文件和 CI/CD 支持創建一個新的 elisp 項目。\n$ eask [GLOBAL-OPTIONS] create package \u0026lt;name\u0026gt;   💡 模板項目位於 https://github.com/emacs-eask/template-elisp。  🔍 eask create elpa     使用 github-elpa 創建一個新的 ELPA。\n$ eask [GLOBAL-OPTIONS] create elpa \u0026lt;name\u0026gt;   💡 模板項目位於 https://github.com/emacs-eask/template-elpa。  🚩 核心     經常使用未分類的命令。\n🔍 eask init     初始化當前目錄以開始使用 Eask。\n$ eask [GLOBAL-OPTIONS] init Eask 將生成這樣的文件：\n(package \u0026#34;PACKAGE-NAME\u0026#34; \u0026#34;VERSION\u0026#34; \u0026#34;YOUR PACKAGE SUMMARY\u0026#34;) (website-url \u0026#34;https://example.com/project-url/\u0026#34;) (keywords \u0026#34;KEYWORD1\u0026#34; \u0026#34;KEYWORD2\u0026#34;) (package-file \u0026#34;PACKAGE-FILE\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) 如果您已有 Cask 項目，您可以將 Cask 文件轉換為 Eask 文件：\n$ eask init --from cask /path/to/Cask 如果您已有 Keg 項目，您可以將 Keg 文件轉換為 Eask 文件：\n$ eask init --from keg /path/to/Keg [推薦] 如果您已有 elisp 項目，您可以將 .el 文件轉換為 Eask 文件：\n$ eask init --from source /path/to/source.el   💡 有關更多 Eask 文件示例，請參閱示例部分！  🔍 eask info     顯示有關項目或配置的信息。\n$ eask [GLOBAL-OPTIONS] info 🔍 eask status     顯示工作區的狀態。\n$ eask [GLOBAL-OPTIONS] status 🔍 eask install-deps     安裝所有依賴項。\n別名: install-dependencies, prepare\n$ eask [GLOBAL-OPTIONS] install-deps [--dev]   💡 指定選項 [\u0026ndash;dev] 從開發範圍安裝依賴項。  🔍 eask install     安裝軟件包。\n$ eask [GLOBAL-OPTIONS] install [PACKAGES..] 通過指定參數安裝包：\n$ eask install auto-complete helm magit 否則，它將安裝當前開發的包：\n$ eask install 🔍 eask uninstall     卸載/刪除包。\n$ eask [GLOBAL-OPTIONS] uninstall [PACKAGES..] 通過指定參數卸載軟件包：\n$ eask uninstall dash f s 否則，它將從當前開發中卸載包：\n$ eask uninstall 🔍 eask package     構建包工件。\n$ eask package [DESTINATION] 如果未指定 [DESTINATION]，則默認導出到 /dist 文件夾。\n🔍 eask compile     字節編譯文件。\n$ eask compile [FILES..] 通過指定參數編譯文件：\n$ eask compile file-1.el file-2.el 或者編譯已經在你的 Eask 文件中指定的文件。\n$ eask compile 🔍 eask package-directory     打印包目錄的路徑，其中安裝了所有依賴項。\n$ eask [GLOBAL-OPTIONS] package-directory 🔍 eask path     打印此項目的 PATH 環境變量。\n別名: exec-path\n$ eask [GLOBAL-OPTIONS] path [PATTERNS..] 或者，您可以傳入 [PATTERNS..] 來執行搜索。\n🔍 eask load-path     打印包含當前項目依賴項的加載路徑。\n$ eask [GLOBAL-OPTIONS] load-path [PATTERNS..] 或者，您可以傳入 [PATTERNS..] 來執行搜索。\n🔍 eask files     打印所有包文件的列表。\n$ eask [GLOBAL-OPTIONS] files [PATTERNS..] 如果定義了 [PATTERNS..] ，它將顯示與該模式匹配的文件。\n🔍 eask exec     使用給定的參數執行系統命令。\n$ eask [GLOBAL-OPTIONS] exec [COMMAND] [ARGUMENTS ...] 🔍 eask emacs     在合適的環境下執行emacs。\n$ eask [GLOBAL-OPTIONS] emacs [ARGUMENTS ...] 🔍 eask eval     將 FORM 評估為 lisp 形式。\n$ eask [GLOBAL-OPTIONS] eval [FORM] 🔍 eask load     按順序加載 Emacs Lisp 文件。\n$ eask [GLOBAL-OPTIONS] load [FILES..] 🔍 eask recipe     建議 recipe 格式。\n$ eask [GLOBAL-OPTIONS] recipe [FILES..] 🔍 eask keywords     列出可在標題部分中使用的可用關鍵字。\n$ eask [GLOBAL-OPTIONS] keywords 🔍 eask cat     查看文件名。\n位置參數 [PATTERNS..] 是一個通配符模式數組。\n$ eask [GLOBAL-OPTIONS] cat [PATTERNS..]   💡 此命令使用包 e2ansi 來完成語法高亮。  🔍 eask concate     將所有 Emacs Lisp 文件連接成一個文件。\n$ eask [GLOBAL-OPTIONS] concate [FILES..] 🔍 eask run     運行腳本。\n$ eask [GLOBAL-OPTIONS] run [FILES..] 別名: run-script\n🚩 管理     🔍 eask archives     列出所有包檔案。\n$ eask [GLOBAL-OPTIONS] archives 🔍 eask search     從檔案中搜索包。\n$ eask [GLOBAL-OPTIONS] search [QUEIRES..] 🔍 eask upgrade     升級所有軟件包。\n$ eask [GLOBAL-OPTIONS] upgrade 🔍 eask list     列出包。\n$ eask [GLOBAL-OPTIONS] list [--depth] 🔍 eask outdated     列出所有過時的包。\n$ eask [GLOBAL-OPTIONS] outdated [--depth] 🔍 eask refresh     刷新包 archives。\n$ eask [GLOBAL-OPTIONS] refresh 🚩 生成     生成用於開發的文件。\n🔍 eask generate autoloads     生成 autoload 文件。\n將包自動加載到項目根目錄中的 project-autoloads.el。\n$ eask [GLOBAL-OPTIONS] generate autoloads project 是在 Eask 文件中聲明的項目名稱。 有關詳細信息，請參閱 多文件包 (elisp)。\n🔍 eask generate pkg-file     生成 pkg 文件。\n將包描述符文件寫入項目根目錄中的 project-pkg.el。\n別名: pkg, pkg-el\n$ eask [GLOBAL-OPTIONS] generate pkg-file project 是在 Eask 文件中聲明的項目名稱。 有關詳細信息，請參閱 多文件包 (elisp)。\n🔍 eask generate license     生成 LICENSE 文件。\n$ eask [GLOBAL-OPTIONS] generate license \u0026lt;name\u0026gt; name` 是許可證的類型，請參閱 https://api.github.com/licenses 了解所有選擇。\n 💡 此命令使用包 license-templates 生成忽略文件。  🔍 eask generate ignore     生成忽略文件。\n$ eask [GLOBAL-OPTIONS] generate ignore \u0026lt;name\u0026gt;   💡 此命令使用包 gitignore-templates 生成忽略文件。  🔍 eask generate workflow circle-ci     生成 CircleCI 工作流 yaml 文件。\n默認文件名為 config.yml。\n$ eask [GLOBAL-OPTIONS] generate workflow circle-ci [--file] 這將在 .circleci/ 下生成 yaml 文件！\n🔍 eask generate workflow github     生成 GitHub Actions 工作流 yaml 文件。\n默認文件名為 test.yml。\n$ eask [GLOBAL-OPTIONS] generate workflow github [--file] 這將在 .github/workflow/ 下生成 yaml 文件！\n🔍 eask generate workflow gitlab     生成 GitLab Runner 工作流程 yaml 文件。\n默認文件名為 .gitlab-ci.yml。\n$ eask [GLOBAL-OPTIONS] generate workflow gitlab [--file] 🔍 eask generate workflow travis-ci     生成 Travis CI 工作流 yaml 文件。\n默認文件名為 .travis.yml。\n$ eask [GLOBAL-OPTIONS] generate workflow travis-ci [--file] 🚩 連結     此包與本地文件系統的依賴關係之間的鏈接。 鏈接的依賴項避免了從遠程存檔下載依賴項的需要。 鏈接到的包必須有一個 Eask 文件或一個 -pkg.el 文件。\n🔍 eask link add       將給定的 source 目錄鏈接到此項目的包目錄，在給定的 package 名稱下。\n$ eask [GLOBAL-OPTIONS] link add \u0026lt;name\u0026gt; \u0026lt;path\u0026gt; 🔍 eask link delete [name..]     刪除給定包的鏈接。\n$ eask [GLOBAL-OPTIONS] link delete [names..] 🔍 eask link list     列出所有鏈接。\n$ eask [GLOBAL-OPTIONS] link list 🚩 清理     🔍 eask clean workspace     從當前工作區中刪除 .eask 。\n$ eask [GLOBAL-OPTIONS] clean workspace ⛔️ 不要指定選項 --config, -c，否則它會刪除你的整個 ~/.emacs.d。\n$ eask clean workspace -g 別名: .eask\n🔍 eask clean elc     刪除所有 .elc 文件。 這將尊重您的 Eask 文件。\n$ eask [GLOBAL-OPTIONS] clean elc 🔍 eask clean dist     刪除 dist 子目錄。\n$ eask [GLOBAL-OPTIONS] clean dist 別名: distribution\n🔍 eask clean autoloads     刪除生成的 autoload 文件。\n$ eask [GLOBAL-OPTIONS] clean autoloads 🔍 eask clean pkg-file     刪除生成的 pkg 文件。\n$ eask [GLOBAL-OPTIONS] clean pkg-file 🔍 eask clean log-file     刪除所有生成的日誌文件。\n$ eask [GLOBAL-OPTIONS] clean log-file 🔍 eask clean all     此命令是所有其他清理命令的組合。\n clean workspace clean elc clean dist clean autoloads clean pkg-file clean log-file  $ eask [GLOBAL-OPTIONS] clean all 別名: everything\n🚩 检查器     對 Emacs 包進行 lint 的命令。\n🔍 eask lint package     運行 package-lint.\n$ eask [GLOBAL-OPTIONS] lint package [FILES..] 🔍 eask lint checkdoc     運行 checkdoc (自帶).\n$ eask [GLOBAL-OPTIONS] lint checkdoc [FILES..] 🔍 eask lint elint     運行 elint (自帶).\n$ eask [GLOBAL-OPTIONS] lint elint [FILES..] 🔍 eask lint elisp-lint     運行 elisp-lint.\n$ eask [GLOBAL-OPTIONS] lint elisp-lint [FILES..] 這確實尊重 .dir-locals.el 文件！ 🎉\n🔍 eask lint elsa     運行 elsa.\n$ eask [GLOBAL-OPTIONS] lint lint elsa [FILES..] 🔍 eask lint indent     運行 indent-lint.\n$ eask [GLOBAL-OPTIONS] lint indent [FILES..] 🔍 eask lint keywords     運行 keywords checker (自帶).\n$ eask [GLOBAL-OPTIONS] lint keywords 🔍 eask lint license     運行 license check.\n$ eask [GLOBAL-OPTIONS] lint license 🔍 eask lint declare     運行 check-declare (自帶).\n$ eask [GLOBAL-OPTIONS] lint declare [FILES..] 🔍 eask lint regexps     Run relint.\n$ eask [GLOBAL-OPTIONS] lint regexps [FILES..] 別名: lint relint\n🚩 測試框架     🔍 eask test activate     激活包； 用於測試包激活\n$ eask [GLOBAL-OPTIONS] activate [FILES..]   💡 您可以傳入 [FILES..] 以便您可以全面測試您的包激活！\n[FILES..] 將在包激活後加載。\n  🔍 eask test ert     $ eask [GLOBAL-OPTIONS] test ert [FILES..] 🔍 eask test ert-runner     $ eask [GLOBAL-OPTIONS] test ert-runner 🔍 eask test buttercup     $ eask [GLOBAL-OPTIONS] test buttercup 🚩 實用工具     其他輔助命令。\n🔍 eask upgrade-eask     將 Eask 升級到最新版本。\n別名: upgrade-self\n$ eask [GLOBAL-OPTIONS] upgrade-eask   💡 這只有在您從源代碼安裝時才有效！  🔍 eask locate     顯示 Eask 安裝位置。\n$ eask [GLOBAL-OPTIONS] locate 🚩 Checker     檢查您的 Eask 文件的命令。\n🔍 eask check-eask     檢查 Eask 文件。\n$ eask [GLOBAL-OPTIONS] check-eask [FILES..] 例子:\n# lint all Eask-files in the current directory and subdirectories eask check-eask # lint specific files eask check-eask Eask Eask.27 # lint all Eask-files in specified directory and subdirectories eask check-eask src/ # print result as JSON eask check-eask --json 有關更多詳細信息，請運行 eask check-eask --help。\n🚩 全域選項     以下選項適用於所有 Eask 命令：\n🔍 \u0026ndash;global, -g     這將使用 ~/.eask/ 而不是包開發環境。\n這用於其他任務。 例如，cat 等。\n$ eask -g [COMMAND] 🔍 \u0026ndash;config, -c     這將使用 ~/.emacs.d/ 而不是包開發環境。\n這用於為您的Emacs 配置做一些事情。 例如，包管理等。\n$ eask -c [COMMAND] 🔍 \u0026ndash;all, -a     啟用 all 標誌。\n$ eask -a [COMMAND] 🔍 \u0026ndash;quick, -q     乾淨地啟動而不加載配置文件。\n$ eask -q [COMMAND] 🔍 \u0026ndash;force, -f     強制執行命令。\n強制卸載包 dash ，即使它是另一個包的依賴項\n$ eask -f [COMMAND] 🔍 \u0026ndash;debug     啟用調試信息。\n這相當於：\n(setq debug-on-error t) 🔍 \u0026ndash;strict     Trigger error instead of warnings.\nFor instance, in eask compile:\n(setq byte-compile-error-on-warn t) 🔍 \u0026ndash;allow-error     在不終止 Emacs 的情況下繼續執行。\n🔍 \u0026ndash;insecure     使用 HTTP 而不是 HTTPS 連接存檔。\n🔍 \u0026ndash;timestamps     啟用/禁用時間戳。\n🔍 \u0026ndash;log-level     啟用/禁用日誌標頭。\n🔍 \u0026ndash;log-file, \u0026ndash;lf     是否生成日誌文件。\n🔍 \u0026ndash;no-color     禁用顏色輸出。\n🔍 \u0026ndash;elapsed-time, \u0026ndash;et     顯示每個操作之間經過的時間。\n🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt;     將詳細程度從 0 設置為 5。\n$ eask --verbose 4 [COMMAND] 🔍 \u0026ndash;version     顯示版本號。\n🔍 \u0026ndash;help     顯示幫助。\n🚩 代理選項     🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt;     為 HTTP 和 HTTPS 設置 Emacs 代理：\n$ eask --proxy \u0026#34;localhost:8888\u0026#34; [COMMAND] 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt;     僅為 HTTP 設置 Emacs 代理。\n🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt;     僅為 HTTPS 設置 Emacs 代理。\n🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt;     不要對任何 URL 匹配模式使用代理。\n\u0026lt;pattern\u0026gt; 是 Emacs 正則表達式。\n","description":"🚩 創建  🔍 eask create package 🔍 eask create elpa   🚩 核心  🔍 eask init 🔍 eask info 🔍 eask status 🔍 eask install-deps 🔍 eask install 🔍 eask uninstall 🔍 eask package 🔍 eask compile 🔍 eask package-directory 🔍 eask path 🔍 eask load-path 🔍 eask files 🔍 eask exec 🔍 eask emacs 🔍 eask eval 🔍 eask load 🔍 eask recipe 🔍 eask keywords 🔍 eask cat 🔍 eask concate 🔍 eask run   🚩 管理  🔍 eask archives 🔍 eask search 🔍 eask upgrade 🔍 eask list 🔍 eask outdated 🔍 eask refresh   🚩 生成  🔍 eask generate autoloads 🔍 eask generate pkg-file 🔍 eask generate license 🔍 eask generate ignore 🔍 eask generate workflow circle-ci 🔍 eask generate workflow github 🔍 eask generate workflow gitlab 🔍 eask generate workflow travis-ci   🚩 連結  🔍 eask link add   🔍 eask link delete [name."},{"id":17,"href":"/zh-tw/Getting-Started/Directory-Structure/","title":"🏗️ 目錄結構","parent":"開始使用","content":"   目錄結構說明      從命令行運行 eask create package 生成器將創建 具有以下結構的目錄：\n. ├── .gitignore ├── Makefile ├── Eask ├── README.md └── {package-file}.el 目錄結構說明     以下是每個文件的高級概述。\n.gitignore\nGitignore 文件，忽略您不想從存儲庫中包含的文件。 默認情況下，它已經排除了 Eask 生成的 文件 和 目錄。\nMakefile\n已經包含包的基本測試的 Makefile。 它現在默認具有以下任務：\n 測試構建（打包+安裝） 測試字節編譯 測試 checkdoc（樣式檢查器） 測試 lint（包 linter）  README.md\n生成的文檔文件。 這用於顯示存儲庫中的主頁。\n{package-file}.el\n這是主要的包文件； 你應該在哪裡寫你的elisp代碼。 如果您嘗試創建多文件包； 您需要相應地編輯 Eask 文件。\n","description":"目錄結構說明      從命令行運行 eask create package 生成器將創建 具有以下結構的目錄：\n. ├── .gitignore ├── Makefile ├── Eask ├── README.md └── {package-file}.el 目錄結構說明     以下是每個文件的高級概述。\n.gitignore\nGitignore 文件，忽略您不想從存儲庫中包含的文件。 默認情況下，它已經排除了 Eask 生成的 文件 和 目錄。\nMakefile\n已經包含包的基本測試的 Makefile。 它現在默認具有以下任務：\n 測試構建（打包+安裝） 測試字節編譯 測試 checkdoc（樣式檢查器） 測試 lint（包 linter）  README.md\n生成的文檔文件。 這用於顯示存儲庫中的主頁。\n{package-file}.el\n這是主要的包文件； 你應該在哪裡寫你的elisp代碼。 如果您嘗試創建多文件包； 您需要相應地編輯 Eask 文件。"},{"id":18,"href":"/zh-tw/Examples/Real-project-examples/","title":"⚖️ 真實項目實例","parent":"範例","content":"這些是使用 Eask 的一些項目和配置：\n   🧾 配置 📦 包 📂 ELPA      🧾 配置      jcs-emacs  📦 包      auto-highlight-symbol dashboard flycheck-languagetool grammarly popup-el line-reminder lsp-mode  📂 ELPA      jcs-elpa  ","description":"這些是使用 Eask 的一些項目和配置：\n   🧾 配置 📦 包 📂 ELPA      🧾 配置      jcs-emacs  📦 包      auto-highlight-symbol dashboard flycheck-languagetool grammarly popup-el line-reminder lsp-mode  📂 ELPA      jcs-elpa  "},{"id":19,"href":"/zh-tw/Continuous-Integration/","title":"持續整合","parent":"","content":"","description":""},{"id":20,"href":"/zh-tw/Continuous-Integration/CircleCI/","title":"💠 CircleCI","parent":"持續整合","content":"    \n使用 Circle CI 的示例。\nversion:2.1orbs:win:circleci/windows@2.2.0# 對每個 Emacs 版本執行的默認操作commands:setup-linux:steps:- checkout- run:name:Install unzipcommand:apt-get update \u0026amp;\u0026amp; apt-get install unzip- run:name:Install Easkcommand:curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | shsetup-macos:steps:- checkout- run:name:Install Emacs latestcommand:|echo \u0026#34;HOMEBREW_NO_AUTO_UPDATE=1\u0026#34; \u0026gt;\u0026gt; $BASH_ENV brew install homebrew/cask/emacs- run:name:Install unzipcommand:apt-get update \u0026amp;\u0026amp; apt-get install unzip- run:name:Install Easkcommand:curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | shsetup-windows:steps:- checkout- run:name:Install Easkcommand:url.exe -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.bat | cmd /Qtest:steps:- run:name:Run regression testscommand:eldev -dtT -p testlint:steps:- run:name:Run Elisp-lintcommand:eldev lint- run:name:Byte-compile `.el\u0026#39; filescommand:eldev -dtT compile --warnings-as-errorsjobs:test-ubuntu-emacs-26:docker:- image:silex/emacs:26-cientrypoint:bashsteps:- setup-linux- testtest-ubuntu-emacs-27:docker:- image:silex/emacs:27-cientrypoint:bashsteps:- setup-linux- testtest-ubuntu-emacs-28:docker:- image:silex/emacs:28-cientrypoint:bashsteps:- setup-linux- testtest-ubuntu-emacs-master:docker:- image:silex/emacs:master-cientrypoint:bashsteps:- setup-linux- testtest-macos-emacs-latest:macos:xcode:\u0026#34;14.0.0\u0026#34;steps:- setup-macos- testtest-windows-emacs-latest:executor:win/defaultsteps:- run:name:Install Emacs latestcommand:|choco install emacs- setup-windows- testworkflows:version:2ci-test-matrix:jobs:- test-ubuntu-emacs-26- test-ubuntu-emacs-27- test-ubuntu-emacs-28- test-ubuntu-emacs-master- test-macos-emacs-latest- test-windows-emacs-latest此示例在以下環境中測試您的 Emacs Lisp 包；\n   OS Emacs Eask     Linux (Ubuntu) 26.x, 27.x, 28.x, snapshot latest   macOS snapshot latest   Windows snapshot latest     💡 您可以通過 eask generate workflow circle-ci 生成工作流文件， 參見[命令和選項](https://emacs-eask.github.io/Getting-Started/Commands-and-options/#-eask-generate- workflow-circle-ci) 獲取更多信息！  ","description":"使用 Circle CI 的示例。\nversion:2.1orbs:win:circleci/windows@2.2.0# 對每個 Emacs 版本執行的默認操作commands:setup-linux:steps:- checkout- run:name:Install unzipcommand:apt-get update \u0026amp;\u0026amp; apt-get install unzip- run:name:Install Easkcommand:curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | shsetup-macos:steps:- checkout- run:name:Install Emacs latestcommand:|echo \u0026#34;HOMEBREW_NO_AUTO_UPDATE=1\u0026#34; \u0026gt;\u0026gt; $BASH_ENV brew install homebrew/cask/emacs- run:name:Install unzipcommand:apt-get update \u0026amp;\u0026amp; apt-get install unzip- run:name:Install Easkcommand:curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | shsetup-windows:steps:- checkout- run:name:Install Easkcommand:url.exe -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.bat | cmd /Qtest:steps:- run:name:Run regression testscommand:eldev -dtT -p testlint:steps:- run:name:Run Elisp-lintcommand:eldev lint- run:name:Byte-compile `.el\u0026#39; filescommand:eldev -dtT compile --warnings-as-errorsjobs:test-ubuntu-emacs-26:docker:- image:silex/emacs:26-cientrypoint:bashsteps:- setup-linux- testtest-ubuntu-emacs-27:docker:- image:silex/emacs:27-cientrypoint:bashsteps:- setup-linux- testtest-ubuntu-emacs-28:docker:- image:silex/emacs:28-cientrypoint:bashsteps:- setup-linux- testtest-ubuntu-emacs-master:docker:- image:silex/emacs:master-cientrypoint:bashsteps:- setup-linux- testtest-macos-emacs-latest:macos:xcode:\u0026#34;14."},{"id":21,"href":"/zh-tw/Getting-Started/Advanced-Usage/","title":"🔧 進階用法","parent":"開始使用","content":"Eask 只是一個普通的 Emacs Lisp 文件，應該從 Emacs 本身讀取！ 你可以做：\n; 常規 Eask 文件內容... (setq byte-compile-error-on-warn t) ; 出現警告時信號錯誤 eask 提供了一些 hooks，使您能夠在每個命令之前和之後執行代碼。 hook 看起來像這樣：\n eask-before-COMMAND-hook eask-after-COMMAND-hook  例如，在使用命令 eask compile 進行字節編譯時將警告視為錯誤：\n(add-hook \u0026#39;eask-before-compile-hook (lambda () (setq byte-compile-error-on-warn t))) 這也等同於選項 --strict：\n$ eask compile [FILES..] --strict 或者在每個命令上運行的 hooks：\n eask-before-command-hook eask-after-command-hook  (add-hook \u0026#39;eask-before-command-hook (lambda () (message \u0026#34;%s\u0026#34; (eask-command)))) ; print the current command 對於包含空格的子命令，將與/連接：\n$ eask lint checkdoc # lint/checkdoc $ eask generate license # generate/license 所以，\n(add-hook \u0026#39;eask-before-lint/checkdoc-hook (lambda () ;; 在 checkdoc linting 之前做一些事情... )) ","description":"Eask 只是一個普通的 Emacs Lisp 文件，應該從 Emacs 本身讀取！ 你可以做：\n; 常規 Eask 文件內容... (setq byte-compile-error-on-warn t) ; 出現警告時信號錯誤 eask 提供了一些 hooks，使您能夠在每個命令之前和之後執行代碼。 hook 看起來像這樣：\n eask-before-COMMAND-hook eask-after-COMMAND-hook  例如，在使用命令 eask compile 進行字節編譯時將警告視為錯誤：\n(add-hook \u0026#39;eask-before-compile-hook (lambda () (setq byte-compile-error-on-warn t))) 這也等同於選項 --strict：\n$ eask compile [FILES..] --strict 或者在每個命令上運行的 hooks：\n eask-before-command-hook eask-after-command-hook  (add-hook \u0026#39;eask-before-command-hook (lambda () (message \u0026#34;%s\u0026#34; (eask-command)))) ; print the current command 對於包含空格的子命令，將與/連接：\n$ eask lint checkdoc # lint/checkdoc $ eask generate license # generate/license 所以，"},{"id":22,"href":"/zh-tw/Contributing/","title":"貢獻","parent":"","content":"","description":""},{"id":23,"href":"/zh-tw/Development-API/","title":"開發 API","parent":"","content":"本文檔提供了對公共 Eask API 的引用，您可以在您的項目和 Eask 的擴展。\n 🚩 入口點  🔍 代碼段: _prepare.el 🔍 巨集: eask-start (\u0026amp;rest body)   🚩 核心  🔍 變數: eask-lisp-root 🔍 函式: eask-command () 🔍 函式: eask-special-p () 🔍 函式: eask-checker-p () 🔍 函式: eask-script (script) 🔍 函式: eask-load (script) 🔍 函式: eask-call (script) 🔍 巨集: eask-defvc\u0026lt; (version \u0026amp;rest body) 🔍 巨集: eask\u0026ndash;silent (\u0026amp;rest body) 🔍 巨集: eask\u0026ndash;unsilent (\u0026amp;rest body) 🔍 函式: eask-dependencies () 🔍 函式: eask-pkg-init (\u0026amp;optional force) 🔍 巨集: eask-with-archives (archives \u0026amp;rest body) 🔍 函式: eask-package-desc (name \u0026amp;optional current) 🔍 函式: eask-argv (index) 🔍 函式: eask-args () 🔍 變數: eask-file 🔍 變數: eask-file-root 🔍 函式: eask\u0026ndash;match-file (name) 🔍 函式: eask\u0026ndash;all-files (\u0026amp;optional dir) 🔍 函式: eask\u0026ndash;find-files (start-path) 🔍 函式: eask-file-try-load (start-path) 🔍 函式: eask-network-insecure-p ()   🚩 旗標  🔍 函式: eask-global-p () 🔍 函式: eask-config-p () 🔍 函式: eask-local-p () 🔍 函式: eask-all-p () 🔍 函式: eask-quick-p () 🔍 函式: eask-force-p () 🔍 函式: eask-dev-p () 🔍 函式: eask-debug-p () 🔍 函式: eask-strict-p () 🔍 函式: eask-timestamps-p () 🔍 函式: eask-log-level-p () 🔍 函式: eask-log-file-p () 🔍 函式: eask-no-color-p () 🔍 函式: eask-allow-error-p () 🔍 函式: eask-insecure-p () 🔍 函式: eask-proxy () 🔍 函式: eask-http-proxy () 🔍 函式: eask-https-proxy () 🔍 函式: eask-no-proxy () 🔍 函式: eask-destination () 🔍 函式: eask-depth () 🔍 函式: eask-verbose ()   🚩 Eask 文件  🔍 變數: eask-package 🔍 變數: eask-package-file 🔍 變數: eask-package-desc 🔍 變數: eask-files 🔍 變數: eask-scripts 🔍 變數: eask-depends-on-emacs 🔍 變數: eask-depends-on 🔍 變數: eask-depends-on-dev 🔍 函式: eask-f-package (name version description) 🔍 函式: eask-f-website-url (url) 🔍 函式: eask-f-keywords (\u0026amp;rest keywords) 🔍 函式: eask-f-author (name \u0026amp;optional email) 🔍 函式: eask-f-license (name) 🔍 函式: eask-f-package-file (file) 🔍 函式: eask-f-files (pkg \u0026amp;rest args) 🔍 函式: eask-f-script (name command \u0026amp;rest args) 🔍 函式: eask-f-source (name \u0026amp;optional location) 🔍 函式: eask-f-source-priority (name \u0026amp;optional priority) 🔍 函式: eask-f-depends-on (pkg \u0026amp;rest args) 🔍 函式: eask-f-development (\u0026amp;rest dependencies) 🔍 函式: eask-f-exec-paths (\u0026amp;rest dirs) 🔍 函式: eask-f-load-paths (\u0026amp;rest dirs)   🚩 信息紀錄  🔍 變數: eask-verbosity 🔍 變數: eask-timestamps 🔍 變數: eask-log-level 🔍 變數: eask-log-file 🔍 變數: eask-level-color 🔍 巨集: eask-with-verbosity (symbol \u0026amp;rest body) 🔍 函式: eask-debug (msg \u0026amp;rest args) 🔍 函式: eask-log (msg \u0026amp;rest args) 🔍 函式: eask-info (msg \u0026amp;rest args) 🔍 函式: eask-warn (msg \u0026amp;rest args) 🔍 函式: eask-error (msg \u0026amp;rest args) 🔍 函式: eask-msg (msg \u0026amp;rest args) 🔍 函式: eask-write (msg \u0026amp;rest args) 🔍 函式: eask-report (\u0026amp;rest args)   🚩 錯誤處理  🔍 變數: eask\u0026ndash;ignore-error-p 🔍 變數: eask-inhibit-error-message 🔍 巨集: eask-ignore-errors (\u0026amp;rest body) 🔍 巨集: eask\u0026ndash;silent-error (\u0026amp;rest body) 🔍 巨集: eask-ignore-errors-silent (\u0026amp;rest body) 🔍 函式: eask\u0026ndash;exit ()   🚩 文件  🔍 函式: eask-guess-package-name () 🔍 函式: eask-package-files () 🔍 函式: eask-package-el-files () 🔍 函式: eask-package-elc-files () 🔍 函式: eask-package-multi-p () 🔍 函式: eask-package-single-p () 🔍 函式: eask-unpacked-size ()   🚩 進度  🔍 巨集: eask-with-progress (msg-start body msg-end) 🔍 函式: eask-print-log-buffer (\u0026amp;optional buffer-or-name)   🚩 幫助  🔍 函式: eask-help (command)      🚩 入口點     🔍 代碼段: _prepare.el     加載 lisp/_prepare.el 以開始使用其他 Eask API。\n(let ((dir (file-name-directory (nth 1 (member \u0026#34;-scriptload\u0026#34; command-line-args))))) (load (expand-file-name \u0026#34;_prepare.el\u0026#34; (locate-dominating-file dir \u0026#34;_prepare.el\u0026#34;)) nil t)) 每個 Elisp 腳本都應該在文件的最頂部有這個片段。\n🔍 巨集: eask-start (\u0026amp;rest body)     命令入口點。 每個命令文件都應在文件的某處包含此宏。\n(eask-start ;; TODO: 在這裡設計你的命令！ ) 🚩 核心     🔍 變數: eask-lisp-root     從項目根目錄指向 lisp 目錄。\n(message \u0026#34;%s\u0026#34; eask-lisp-root) ; path/to/eask/cli/lisp/ 🔍 函式: eask-command ()     返回字符串中的當前命令。\n假設命令是：\n$ eask init 然後，\n(message \u0026#34;%s\u0026#34; (eask-command)) ; init 🔍 函式: eask-special-p ()     如果在沒有 Eask 文件存在的情況下可以運行的命令，則返回 t。\n這允許一些命令仍然可以在不定義用戶的情況下執行目錄。 當您想在沒有的情況下進行正常操作時，這會很方便 觸摸用戶目錄。\n🔍 函式: eask-checker-p ()     如果運行 Eask 作為檢查器，則返回 t。\n如果沒有這個標誌，一旦發生錯誤，進程就會終止。此標誌允許您在不報告錯誤的情況下運行所有操作。\n🔍 函式: eask-script (script)     返回完整的腳本文件名。\n(eask-script \u0026#34;extern/pacakge\u0026#34;) ; {project-root}/lisp/extern/package.el 🔍 函式: eask-load (script)     加載另一個 eask 腳本。\n(eask-load \u0026#34;extern/ansi\u0026#34;) ; load {project-root}/lisp/extern/ansi.el file 🔍 函式: eask-call (script)     調用另一個 eask 腳本。\n(eask-call \u0026#34;clean/elc\u0026#34;) ; call command `eask clean-elc`   💡 這個很少用！  🔍 巨集: eask-defvc\u0026lt; (version \u0026amp;rest body)     如果 Emacs 版本低於特定版本，則定義範圍。\nVERSION 是一個整數，將與 emacs-major-version 進行比較。\n(eask-defvc\u0026lt; 28 ;; 這在 Emacs 28 之前是缺失的； 定義它! (defvar package-native-compile nil))   💡 這用於 Emacs 兼容性！  🔍 巨集: eask\u0026ndash;silent (\u0026amp;rest body)     將來自範圍內標準輸出的所有消息靜音。\n(eask--unsilent (message \u0026#34;你聽不到我! :(\u0026#34;)) 🔍 巨集: eask\u0026ndash;unsilent (\u0026amp;rest body)     取消靜音來自範圍內標準輸出的所有消息。\n(eask--unsilent (message \u0026#34;你聽的到我! :)\u0026#34;)) 🔍 函式: eask-dependencies ()     返回依賴項列表。\n元素應該是 (NAME . VERSION) 或 (NAME . RECIPE-FORMAT)。\n🔍 函式: eask-pkg-init (\u0026amp;optional force)     初始化包以供使用。\n(eask-start (eask-pkg-init) ;; 現在您可以使用安裝在 `package-user-dir` 中的包 )   💡 這通常在 eask-start 之後調用！  🔍 巨集: eask-with-archives (archives \u0026amp;rest body)     臨時使存檔可用的範圍。\nARCHIVES 可以是字符串或字符串列表。\n(eask-with-archives \u0026#34;melpa\u0026#34; (eask-package-install \u0026#39;package-build)) ; 安裝僅在 MELPA 中定義的包   💡 當您需要某些檔案中的某些包時，這很方便。  🔍 函式: eask-package-desc (name \u0026amp;optional current)     為包構建包描述符。\nCURRENT 表示已安裝的包； 否則它將返回任何可用的來自選定包檔案的包。\n🔍 函式: eask-argv (index)     通过索引返回一个命令行参数。\n🔍 函式: eask-args ()     返回從命令行參數中提取的列表。\n$ eask info --verbose 4 foo bar 它會忽略 --verbose 和 4，只返回 foo 和 bar。\n🔍 變數: eask-file     當前加載的 Eask 文件的路徑。\n🔍 變數: eask-file-root     當前加載的 Eask 文件的目錄。\n🔍 函式: eask\u0026ndash;match-file (name)     檢查 NAME 是否是我們的目標 Eask 文件，然後返回它。\n以下輸出來自 Emacs 28.1：\n(eask--match-file \u0026#34;Eask\u0026#34;) ; t (eask--match-file \u0026#34;Eask.28\u0026#34;) ; t (eask--match-file \u0026#34;Eask.28.1\u0026#34;) ; t (eask--match-file \u0026#34;Eask.29\u0026#34;) ; nil (eask--match-file \u0026#34;Easkfile\u0026#34;) ; t (eask--match-file \u0026#34;Easkfile.28\u0026#34;) ; t (eask--match-file \u0026#34;Easkfile.29\u0026#34;) ; nil 🔍 函式: eask\u0026ndash;all-files (\u0026amp;optional dir)     從 DIR 返回 Eask 文件列表。\n考慮以下目錄樹：\n. root ├── Eask ├── Eask.28 └── Eask.29 以下輸出來自 Emacs 28.1：\n(eask--all-files \u0026#34;/root/\u0026#34;) ; \u0026#39;(Eask Eask.28) 🔍 函式: eask\u0026ndash;find-files (start-path)     從 START-PATH 找到 Eask 文件。\n考慮以下目錄樹：\n.project ├─ src │ └── config.el ├── Eask ├── Eask.28 └── Eask.29 以下輸出來自 Emacs 28.1：\n(eask--find-files \u0026#34;/project/src/config.el\u0026#34;) ; \u0026#39;(/project/Eask /project/Eask.28) 🔍 函式: eask-file-try-load (start-path)     嘗試在 START-PATH 中加載 Eask 文件。\n(eask--find-files \u0026#34;/project/src/\u0026#34;) ; t 🔍 函式: eask-network-insecure-p ()     如果當前 Emacs 會話允許不安全的網絡連接，則返回 t。\n🚩 旗標     🔍 函式: eask-global-p ()     如果啟用了 global 選項，則返回 t。\n(when (eask-global-p) user-emacs-directory) ; ~/.eask/ 🔍 函式: eask-config-p ()     如果啟用了 config 選項，則返回 t。\n(when (eask-config-p) user-emacs-directory) ; ~/.emacs.d   💡 如果選項 --config 和 --global 都打開，則選擇全局空間。  🔍 函式: eask-local-p ()     這使用當前工作區，這是默認設置。\n(when (eask-local-p) user-emacs-directory) ; ./.eask/{emacs-version}/   💡 此函數僅在 (eask-global-p) 和 (eask-config-p) 是 false 時返回 t！  🔍 函式: eask-all-p ()     如果啟用了 all 選項，則返回 t。\n(when (eask-all-p) ;; 運行所有測試 ...) 🔍 函式: eask-quick-p ()     如果啟用了 quick 選項，則返回 t。\n(unless (eask-quick-p) (load user-init-file) ...) 🔍 函式: eask-force-p ()     如果啟用了 force 選項，則返回 t。\n(package-delete .. (eask-force-p)) 🔍 函式: eask-dev-p ()     如果啟用了 development 選項，則返回 t。\n(when (eask-dev-p) (package-install \u0026#39;ert-runner)) ; 安裝開發依賴 🔍 函式: eask-debug-p ()     如果啟用了 debug 選項，則返回 t。\n(when (eask-debug-p) (error \u0026#34;在調試模式下執行...\u0026#34;)) 🔍 函式: eask-strict-p ()     如果啟用了 strict 選項，則返回 t。\n(setq byte-compile-error-on-warn (eask-strict-p)) 🔍 函式: eask-timestamps-p ()     如果啟用/禁用 timestamps 選項，則返回 t / nil。\n這些標誌不能在同一命令中共存。\n(when (eask-timestamps-p) (message \u0026#34;打印帶有時間戳的日誌！\u0026#34;)) 🔍 函式: eask-log-level-p ()     如果啟用/禁用 log-level 選項，則返回 t / nil。\n這些標誌不能在同一命令中共存。\n(when (eask-log-level-p) (message \u0026#34;打印帶有級別前綴的日誌！\u0026#34;)) 🔍 函式: eask-log-file-p ()     如果啟用/禁用 log-file 選項，則返回 t / nil。\n這些標誌不能在同一命令中共存。\n(when (eask-log-file-p) (message \u0026#34;讓我們創建一個日誌文件！\u0026#34;)) 🔍 函式: eask-no-color-p ()     如果啟用了 color 選項，則返回 t。\n(unless (eask-no-color-p) (message \u0026#34;此字符串沒有 ANSI 代碼！\u0026#34;)) 🔍 函式: eask-allow-error-p ()     如果啟用了 allow-error 選項，則返回 t。\n(unless (eask-allow-error-p) (error \u0026#34;停在這裡。\u0026#34;)) 🔍 函式: eask-insecure-p ()     如果啟用了 insecure 選項，則返回 t。\n(when (eask-insecure-p) ;; 做一些危險的工作？ ) 🔍 函式: eask-proxy ()     🔍 函式: eask-http-proxy ()     🔍 函式: eask-https-proxy ()     🔍 函式: eask-no-proxy ()     返回一個 string 表示 hostname + port number。\n$ eask [command] --proxy \u0026#34;localhost:1000\u0026#34; $ eask [command] --http-proxy \u0026#34;localhost:2000\u0026#34; $ eask [command] --https-proxy \u0026#34;localhost:3000\u0026#34; $ eask [command] --no-proxy \u0026#34;localhost:4000\u0026#34; 🔍 函式: eask-destination ()     返回一個 string 表示目的地（輸出路徑）。\n(write-file (or (eask-destination) \u0026#34;./dist\u0026#34;)) ; 將文件寫入目標 🔍 函式: eask-depth ()     返回一個整數表示當前打印層級的深度。\n(setq print-level (eask-depth)) 🔍 函式: eask-verbose ()     返回一個 整數 表示冗長級別。\n(when (= (eask-verbose) 4) (setq byte-compile-verbose t)) 🚩 Eask 文件     這些函數是 Eask-file DSL 的實際實現； 和將單詞 eask- 作為函數前綴。\n有關詳細信息，請參閱 DSL 部分。\n🔍 變數: eask-package     它在 plist 中保存包的 NAME、VERSION 和 DESCRIPTION。\n(plist-get eask-package :name) ; 返回包名 從該變量擴展的三個函數：\n (eask-package-name) (eask-package-version) (eask-package-description)  🔍 變數: eask-package-file     指向打包主文件。\n🔍 變數: eask-package-desc     來自包主文件的包描述符。\n(package-desc-p eask-package-desc) ; 返回 t   ⚠ 如果不能正確構造包描述符，這可以是 nil！  🔍 變數: eask-files     持有通配符規範中的文件模式列表。\n🔍 變數: eask-scripts     包含可用腳本的列表，用戶可以使用 eask run-script 命令。\n🔍 變數: eask-depends-on-emacs     保存有關 Emacs 最低版本的信息。\n(depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) 函數將返回字符串中的 Emacs 版本。\n (eask-depends-emacs-version) - 返回 \u0026quot;26.1\u0026quot;  🔍 變數: eask-depends-on     持有依賴項列表。\n🔍 變數: eask-depends-on-dev     持有開發使用的依賴項列表。\n🔍 函式: eask-f-package (name version description)     別名 package.\n🔍 函式: eask-f-website-url (url)     別名 website-url.\n🔍 函式: eask-f-keywords (\u0026amp;rest keywords)     別名 keywords.\n🔍 函式: eask-f-author (name \u0026amp;optional email)     別名 author.\n🔍 函式: eask-f-license (name)     別名 license.\n🔍 函式: eask-f-package-file (file)     別名 package-file.\n🔍 函式: eask-f-files (pkg \u0026amp;rest args)     別名 files.\n🔍 函式: eask-f-script (name command \u0026amp;rest args)     別名 script.\n🔍 函式: eask-f-source (name \u0026amp;optional location)     別名 source.\n🔍 函式: eask-f-source-priority (name \u0026amp;optional priority)     別名 source-priority.\n🔍 函式: eask-f-depends-on (pkg \u0026amp;rest args)     別名 depends-on.\n🔍 函式: eask-f-development (\u0026amp;rest dependencies)     別名 development.\n🔍 函式: eask-f-exec-paths (\u0026amp;rest dirs)     別名 exec-paths.\n🔍 函式: eask-f-load-paths (\u0026amp;rest dirs)     別名 load-paths.\n🚩 信息紀錄     具有時間戳和日誌級別的記錄器實用程序。\n日誌級別值在函數 eask--verb2lvl 中定義。\n   等級 描述 值     debug 指定對調試應用程序最有用的細粒度信息事件。 4   log 指定普通消息。 3   info 指定在粗粒度級別突出顯示應用程序進度的信息性消息。 2   warn 指定潛在的有害情況。 1   error 指定可能仍允許應用程序繼續運行的錯誤事件。 0    The default level is log.\n🔍 變數: eask-verbosity     詳細級別表示為整數。\n(setq eask-verbosity 4) ; 你可以設置從 0 到 4 🔍 變數: eask-timestamps     記錄帶有時間戳的消息。\n(setq eask-timestamps t) Output:\n2022-04-14 13:44:46 這是一條帶有時間戳的消息 🔍 變數: eask-log-level     記錄消息級別。 （默認值：nil）\n(setq eask-log-level t) 輸出：\n[DEBUG] 這是一條具有日誌級別的 DEBUG 消息 🔍 變數: eask-log-file     天氣生成日誌文件。 （默認值：nil）\n(setq eask-log-level t) 使用命令 cat 查看日誌，\n$ cat /.log/messages.log 🔍 變數: eask-level-color     定義每個日誌級別顏色。\n(setq eask-level-color \u0026#39;((debug . ansi-blue) (log . ansi-white) (info . ansi-cyan) (warn . ansi-yellow) (error . ansi-red))) 🔍 巨集: eask-with-verbosity (symbol \u0026amp;rest body)     使用詳細級別定義執行。\n(eask-with-verbosity \u0026#39;debug ;; TODO: 在這裡執行.. ) 除非冗長，否則此宏範圍內的所有內容都將被靜音。 僅當您指定 --verbose 4 時才會打印 全局選項。\n🔍 函式: eask-debug (msg \u0026amp;rest args)     (eask-debug \u0026#34;這是調試信息\u0026#34;) 2022-04-14 17:31:54 [DEBUG] 這是調試信息 🔍 函式: eask-log (msg \u0026amp;rest args)     (eask-log \u0026#34;這是日誌消息\u0026#34;) 2022-04-14 17:31:54 [LOG] 這是日誌消息 🔍 函式: eask-info (msg \u0026amp;rest args)     (eask-info \u0026#34;這是信息消息\u0026#34;) 2022-04-14 17:31:54 [INFO] 這是信息消息 🔍 函式: eask-warn (msg \u0026amp;rest args)     (eask-warn \u0026#34;這是警告消息\u0026#34;) 2022-04-14 17:31:54 [WARNING] 這是警告消息 🔍 函式: eask-error (msg \u0026amp;rest args)     (eask-error \u0026#34;這是錯誤信息\u0026#34;) 2022-04-14 17:31:54 [ERROR] 這是錯誤信息 🔍 函式: eask-msg (msg \u0026amp;rest args)     類似於 message 函數，但會用顏色替換 unicode。\n(eask-msg \u0026#34;用換行符打印此消息！\u0026#34;) 🔍 函式: eask-write (msg \u0026amp;rest args)     類似於 eask-msg 函數，但末尾沒有換行符。\n(eask-write \u0026#34;不帶換行符打印此消息...\u0026#34;) 🔍 函式: eask-report (\u0026amp;rest args)     報告錯誤/警告取決於嚴格標誌。\n(eask-report \u0026#34;This can be warning or error\u0026#34;) 見選項 \u0026ndash;strict.\n🚩 錯誤處理     🔍 變數: eask\u0026ndash;ignore-error-p     非 nil 是為了防止 Emacs 被殺死。\n(let ((eask--ignore-error-p t)) (error \u0026#34;Emacs can\u0026#39;t die! :P\u0026#34;)) 🔍 變數: eask-inhibit-error-message     非 nil 停止錯誤/警告消息。\n(let ((eask-inhibit-error-message t)) (error \u0026#34;This won\u0026#39;t display at all!\u0026#34;)) 🔍 巨集: eask-ignore-errors (\u0026amp;rest body)     防止 Emacs 被殺死。\n(eask-ignore-errors (error \u0026#34;Emacs can\u0026#39;t die! :P\u0026#34;)) 🔍 巨集: eask\u0026ndash;silent-error (\u0026amp;rest body)     禁止顯示錯誤/警告消息。\n(eask--silent-error (error \u0026#34;This won\u0026#39;t display at all!\u0026#34;)) 🔍 巨集: eask-ignore-errors-silent (\u0026amp;rest body)     防止 Emacs 被殺死並禁止顯示錯誤/警告消息。\n(eask-ignore-errors-silent (error \u0026#34;Nothing happens!\u0026#34;)) 🔍 函式: eask\u0026ndash;exit ()     Send exit code.\nThis will kill Emacs process.\n🚩 文件     🔍 函式: eask-guess-package-name ()     返回可能的包名稱。\n🔍 函式: eask-package-files ()     返回包文件列表。\n🔍 函式: eask-package-el-files ()     返回擴展名為 .el 的包文件列表。\n🔍 函式: eask-package-elc-files ()     返回擴展名為 .elc 的包文件列表。\n🔍 函式: eask-package-multi-p ()     如果是單個文件包，則返回 nil。\n🔍 函式: eask-package-single-p ()     如果是單個文件包，則返回 t。\n🔍 函式: eask-unpacked-size ()     返回當前包的大小。\n ⚠️ 這將返回一個字符串而不是字節。  🚩 進度     🔍 巨集: eask-with-progress (msg-start body msg-end)     使用響應消息輸出創建執行。\n(eask-with-progress \u0026#34;檔案下載中s... \u0026#34; (eask-with-verbosity \u0026#39;debug ; 通常與 `eask-with-verbosity` 一起使用 ;; 執行一些操作.. ) \u0026#34;完成 ✓\u0026#34;) 期望輸出：\n檔案下載中... 完成 ✓ 🔍 函式: eask-print-log-buffer (\u0026amp;optional buffer-or-name)     打印緩衝區並突出顯示“錯誤和“警告”。\n(eask-print-log-buffer \u0026#34;*Package-Lint*\u0026#34;)   💡 這對於創建 buffer 來顯示 errors 和 warnings 的 linters 會很方便。  🚩 幫助     🔍 函式: eask-help (command)     打印位於 lisp/help/ 目錄下的幫助手冊。\n(eask-help \u0026#34;core/search\u0026#34;)   💡 這是在命令失敗時使用的，想給用戶一些提示！  ","description":"本文檔提供了對公共 Eask API 的引用，您可以在您的項目和 Eask 的擴展。\n 🚩 入口點  🔍 代碼段: _prepare.el 🔍 巨集: eask-start (\u0026amp;rest body)   🚩 核心  🔍 變數: eask-lisp-root 🔍 函式: eask-command () 🔍 函式: eask-special-p () 🔍 函式: eask-checker-p () 🔍 函式: eask-script (script) 🔍 函式: eask-load (script) 🔍 函式: eask-call (script) 🔍 巨集: eask-defvc\u0026lt; (version \u0026amp;rest body) 🔍 巨集: eask\u0026ndash;silent (\u0026amp;rest body) 🔍 巨集: eask\u0026ndash;unsilent (\u0026amp;rest body) 🔍 函式: eask-dependencies () 🔍 函式: eask-pkg-init (\u0026amp;optional force) 🔍 巨集: eask-with-archives (archives \u0026amp;rest body) 🔍 函式: eask-package-desc (name \u0026amp;optional current) 🔍 函式: eask-argv (index) 🔍 函式: eask-args () 🔍 變數: eask-file 🔍 變數: eask-file-root 🔍 函式: eask\u0026ndash;match-file (name) 🔍 函式: eask\u0026ndash;all-files (\u0026amp;optional dir) 🔍 函式: eask\u0026ndash;find-files (start-path) 🔍 函式: eask-file-try-load (start-path) 🔍 函式: eask-network-insecure-p ()   🚩 旗標  🔍 函式: eask-global-p () 🔍 函式: eask-config-p () 🔍 函式: eask-local-p () 🔍 函式: eask-all-p () 🔍 函式: eask-quick-p () 🔍 函式: eask-force-p () 🔍 函式: eask-dev-p () 🔍 函式: eask-debug-p () 🔍 函式: eask-strict-p () 🔍 函式: eask-timestamps-p () 🔍 函式: eask-log-level-p () 🔍 函式: eask-log-file-p () 🔍 函式: eask-no-color-p () 🔍 函式: eask-allow-error-p () 🔍 函式: eask-insecure-p () 🔍 函式: eask-proxy () 🔍 函式: eask-http-proxy () 🔍 函式: eask-https-proxy () 🔍 函式: eask-no-proxy () 🔍 函式: eask-destination () 🔍 函式: eask-depth () 🔍 函式: eask-verbose ()   🚩 Eask 文件  🔍 變數: eask-package 🔍 變數: eask-package-file 🔍 變數: eask-package-desc 🔍 變數: eask-files 🔍 變數: eask-scripts 🔍 變數: eask-depends-on-emacs 🔍 變數: eask-depends-on 🔍 變數: eask-depends-on-dev 🔍 函式: eask-f-package (name version description) 🔍 函式: eask-f-website-url (url) 🔍 函式: eask-f-keywords (\u0026amp;rest keywords) 🔍 函式: eask-f-author (name \u0026amp;optional email) 🔍 函式: eask-f-license (name) 🔍 函式: eask-f-package-file (file) 🔍 函式: eask-f-files (pkg \u0026amp;rest args) 🔍 函式: eask-f-script (name command \u0026amp;rest args) 🔍 函式: eask-f-source (name \u0026amp;optional location) 🔍 函式: eask-f-source-priority (name \u0026amp;optional priority) 🔍 函式: eask-f-depends-on (pkg \u0026amp;rest args) 🔍 函式: eask-f-development (\u0026amp;rest dependencies) 🔍 函式: eask-f-exec-paths (\u0026amp;rest dirs) 🔍 函式: eask-f-load-paths (\u0026amp;rest dirs)   🚩 信息紀錄  🔍 變數: eask-verbosity 🔍 變數: eask-timestamps 🔍 變數: eask-log-level 🔍 變數: eask-log-file 🔍 變數: eask-level-color 🔍 巨集: eask-with-verbosity (symbol \u0026amp;rest body) 🔍 函式: eask-debug (msg \u0026amp;rest args) 🔍 函式: eask-log (msg \u0026amp;rest args) 🔍 函式: eask-info (msg \u0026amp;rest args) 🔍 函式: eask-warn (msg \u0026amp;rest args) 🔍 函式: eask-error (msg \u0026amp;rest args) 🔍 函式: eask-msg (msg \u0026amp;rest args) 🔍 函式: eask-write (msg \u0026amp;rest args) 🔍 函式: eask-report (\u0026amp;rest args)   🚩 錯誤處理  🔍 變數: eask\u0026ndash;ignore-error-p 🔍 變數: eask-inhibit-error-message 🔍 巨集: eask-ignore-errors (\u0026amp;rest body) 🔍 巨集: eask\u0026ndash;silent-error (\u0026amp;rest body) 🔍 巨集: eask-ignore-errors-silent (\u0026amp;rest body) 🔍 函式: eask\u0026ndash;exit ()   🚩 文件  🔍 函式: eask-guess-package-name () 🔍 函式: eask-package-files () 🔍 函式: eask-package-el-files () 🔍 函式: eask-package-elc-files () 🔍 函式: eask-package-multi-p () 🔍 函式: eask-package-single-p () 🔍 函式: eask-unpacked-size ()   🚩 進度  🔍 巨集: eask-with-progress (msg-start body msg-end) 🔍 函式: eask-print-log-buffer (\u0026amp;optional buffer-or-name)   🚩 幫助  🔍 函式: eask-help (command)      🚩 入口點     🔍 代碼段: _prepare."},{"id":24,"href":"/zh-tw/Troubleshooting/","title":"故障排除","parent":"","content":"本文檔幫助您排除 Eask 故障。\n   🚩 可能的錯誤變量 ⛔️ Error when running an Eask command      🚩 可能的錯誤變量     一些潛在的變量可能導致錯誤的Eask，請檢查:\n 用 PATH 安裝並設置 Emacs Eask安裝正確 Node 版本應為 14.x 或更高版本  ⛔️ Error when running an Eask command     如果您運行 Eask 命令並遇到錯誤，您可以嘗試一些方法：\n 確保您擁有最新的 Eask 版本。 您可以使用 eask --version 來確定當前的 Eask 版本。 如果您選擇從 npm 安裝，請使用 eask upgrade-eask 或 npm install -g @emacs-eask/cli@latest 升級 Eask   ⚠ 警告\n如果您使用 npm 安裝了 Eask，那麼您應該通過 npm 升級它。 否則，您只需確保安裝了 git。\n   如果錯誤仍然存在，請嘗試從頭開始重新安裝 Eask。  如果Eask還是不行，請 提交 issue 到 issue tracker. 請在啟用 [\u0026ndash;verbose 4] 和 [\u0026ndash;debug] 選項的情況下包含 Eask 輸出，為我們提供盡可能多的信息。\n","description":"本文檔幫助您排除 Eask 故障。\n   🚩 可能的錯誤變量 ⛔️ Error when running an Eask command      🚩 可能的錯誤變量     一些潛在的變量可能導致錯誤的Eask，請檢查:\n 用 PATH 安裝並設置 Emacs Eask安裝正確 Node 版本應為 14.x 或更高版本  ⛔️ Error when running an Eask command     如果您運行 Eask 命令並遇到錯誤，您可以嘗試一些方法：\n 確保您擁有最新的 Eask 版本。 您可以使用 eask --version 來確定當前的 Eask 版本。 如果您選擇從 npm 安裝，請使用 eask upgrade-eask 或 npm install -g @emacs-eask/cli@latest 升級 Eask   ⚠ 警告"},{"id":25,"href":"/zh-tw/FAQ/","title":"常見問題","parent":"","content":"以下是一般常見問題列表。\n 🔍 About Eask  ❓ 您需要 Node.JS 才能使用 Eask 嗎？ ❓ 誰應該使用這個工具？ ❓ 我在哪裡可以下載 Eask snapshot？   🔍 技術選擇  ❓ 為什麼選擇 Node.JS? ❓ 為什麼是 yargs?   🔍 用法  ❓ 為什麼安裝時出現錯誤 package target tar/el not found？ ❓ 為什麼我收到錯誤包不可安裝？ ❓ 為什麼我會收到狀態為 2 的 git 錯誤？ ❓ 為什麼我會以狀態 2 退出 tar？      🔍 About Eask     ❓ 您需要 Node.JS 才能使用 Eask 嗎？     答案是 不.\nEask 在每個版本上構建本機可執行文件，您可以從我們的發布頁面 下載！ 但是，如果您要開發 Eask，那就需要需要 Node.JS！\n❓ 誰應該使用這個工具？     這是我們的建議； 如果您打算使用特定於操作系統的軟件包（從不去其他平台），去尋找其他工具。 另一方面，Eask 旨在提供每個操作系統之間的最佳一致性。 或者，如果你想學習一個隨處可用的 工具，Eask 是最好的選擇之一。\n❓ 我在哪裡可以下載 Eask snapshot？     您可以在我們的網站下載最新的可執行文件 (snapshot) emacs-eask/binaries 代碼庫!\n🔍 技術選擇     ❓ 為什麼選擇 Node.JS?     Node 對各種終端應用程序有更好的支持（相比 shell 腳本）！ 比如豐富多彩的界面，整個 npm 社區等等。 所以你可以更輕鬆地構建跨平台軟件！ 尤其是在微軟之後已經購買了 NPM 公司，並且可能會很好地支持他 們自己的系統。\n在 0.8.6 版本之後，Cask 似乎不支持 Windows（無 WSL）。 在裡面早期版本，他們使用的是 Python 但由於 Python 在 Windows 上的支持只是不如 Node.JS。\n有關詳細信息，請參閱問題 #140！\n❓ 為什麼是 yargs?     yargs 擁有非常廣泛的社區； 和它 已經被用在很多工具中。 它是跨平台的！ 最重要的是，這是在 Linux、macOS 和 Windows 上運行良好的工具之一。\n與 Eask 和其他替代方案相比，也存在主要差異。Cask、makem.sh 或 Eldev 更依賴於 batch 和 bash。 我們選擇了一個路線不同，想把繁重的任務交給高層編程語言，JavaScript。 開髮變得更加容易，因為我們不再需要關心不同類型的 shell！\n缺點是 NodeJS 的 runtime，但我們可以簡單地打包整個 CLI 程序變成可執行文件！ 這樣我們就不需要安裝 Node 和npm！\n🔍 用法     ❓ 為什麼安裝時出現錯誤 package target tar/el not found？     示例錯誤消息，\nhttp://melpa.org/packages/lsp-mode-20220429.647.tar: Not found 該問題是由備份存檔不匹配引起的。 一般來說，Eask 將從源中獲取最新的 archive-contents 除非你已經 ping 源太多次。 然後來源可能會阻止您的 IP 一段時間分鐘。\n您可以等待幾分鐘讓消息來源將您從他們的黑名單。 或者等待備份存檔更新到最新版本。 這 備份存檔存儲庫在 此處。\n❓ 為什麼我收到錯誤包不可安裝？     示例錯誤消息，\nPackage not installable `helm'; make sure package archives are included 你需要先問問自己； 包裹從哪裡來，是什麼具體來源保存此包信息。 從上面的示例消息中， helm 列在 melpa 源代碼中。 您將不得不編輯您的 Eask 文件像這樣：\n... (source \u0026#34;melpa\u0026#34;) ; \u0026lt;- add this line (depends-on \u0026#34;helm\u0026#34;) ❓ 為什麼我會收到狀態為 2 的 git 錯誤？     如果您收到此示例錯誤消息:\nLoading package information... done ✓ - Installing s (20210616.619)... Failed (status 2): git --no-pager remote get-url upstream . ... 您可能啟用了 bug-reference-prog-mode 。 它還不兼容 Eask, 運行 Eask 的任何命令時都應禁用。\n參見問題 #39 了解更多信息。\n❓ 為什麼我會以狀態 2 退出 tar？     如果您收到此示例錯誤消息:\nCreated your-package-0.1.0.tar containing: tar exited with status 2 Error: Process completed with exit code 1. 使用 BSD tar 時您可能會收到此錯誤。解決方法是使用 GNU tar 代替。\n(setq package-build-tar-executable \u0026quot;/path/to/gnu/tar\u0026quot;) 在 Windows 中，默認是使用 BSD tar。如果安裝了 Git，則可以使用 Git 中的 tar 可執行文件；它使用 GNU tar。\n將以下代碼片段添加到您的 Eask 文件中：\n;; 在Windows中使用 GNU tar (when (memq system-type '(cygwin windows-nt ms-dos)) (setq package-build-tar-executable \u0026quot;C:/Program Files/Git/usr/bin/tar.exe\u0026quot;)) ","description":"以下是一般常見問題列表。\n 🔍 About Eask  ❓ 您需要 Node.JS 才能使用 Eask 嗎？ ❓ 誰應該使用這個工具？ ❓ 我在哪裡可以下載 Eask snapshot？   🔍 技術選擇  ❓ 為什麼選擇 Node.JS? ❓ 為什麼是 yargs?   🔍 用法  ❓ 為什麼安裝時出現錯誤 package target tar/el not found？ ❓ 為什麼我收到錯誤包不可安裝？ ❓ 為什麼我會收到狀態為 2 的 git 錯誤？ ❓ 為什麼我會以狀態 2 退出 tar？      🔍 About Eask     ❓ 您需要 Node.JS 才能使用 Eask 嗎？     答案是 不."},{"id":26,"href":"/zh-tw/License/","title":"GNU 通用公共授權條款","parent":"","content":"在 GPLv3 下獲得許可。詳情見下文。\n GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. \u0026lt;http://fsf.org/\u0026gt; Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \u0026quot;This License\u0026quot; refers to version 3 of the GNU General Public License. \u0026quot;Copyright\u0026quot; also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u0026quot;The Program\u0026quot; refers to any copyrightable work licensed under this License. Each licensee is addressed as \u0026quot;you\u0026quot;. \u0026quot;Licensees\u0026quot; and \u0026quot;recipients\u0026quot; may be individuals or organizations. To \u0026quot;modify\u0026quot; a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u0026quot;modified version\u0026quot; of the earlier work or a work \u0026quot;based on\u0026quot; the earlier work. A \u0026quot;covered work\u0026quot; means either the unmodified Program or a work based on the Program. To \u0026quot;propagate\u0026quot; a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u0026quot;convey\u0026quot; a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u0026quot;Appropriate Legal Notices\u0026quot; to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \u0026quot;source code\u0026quot; for a work means the preferred form of the work for making modifications to it. \u0026quot;Object code\u0026quot; means any non-source form of a work. A \u0026quot;Standard Interface\u0026quot; means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u0026quot;System Libraries\u0026quot; of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u0026quot;Major Component\u0026quot;, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u0026quot;Corresponding Source\u0026quot; for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u0026quot;keep intact all notices\u0026quot;. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u0026quot;aggregate\u0026quot; if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u0026quot;User Product\u0026quot; is either (1) a \u0026quot;consumer product\u0026quot;, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u0026quot;normally used\u0026quot; refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u0026quot;Installation Information\u0026quot; for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u0026quot;Additional permissions\u0026quot; are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u0026quot;further restrictions\u0026quot; within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u0026quot;entity transaction\u0026quot; is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \u0026quot;contributor\u0026quot; is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u0026quot;contributor version\u0026quot;. A contributor's \u0026quot;essential patent claims\u0026quot; are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u0026quot;control\u0026quot; includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u0026quot;patent license\u0026quot; is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u0026quot;grant\u0026quot; such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u0026quot;Knowingly relying\u0026quot; means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u0026quot;discriminatory\u0026quot; if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u0026quot;or any later version\u0026quot; applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u0026quot;AS IS\u0026quot; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u0026quot;copyright\u0026quot; line and a pointer to where the full notice is found. \u0026lt;one line to give the program's name and a brief idea of what it does.\u0026gt; Copyright (C) \u0026lt;year\u0026gt; \u0026lt;name of author\u0026gt; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see \u0026lt;http://www.gnu.org/licenses/\u0026gt;. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: \u0026lt;program\u0026gt; Copyright (C) \u0026lt;year\u0026gt; \u0026lt;name of author\u0026gt; This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \u0026quot;about box\u0026quot;. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u0026quot;copyright disclaimer\u0026quot; for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see \u0026lt;http://www.gnu.org/licenses/\u0026gt;. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read \u0026lt;http://www.gnu.org/philosophy/why-not-lgpl.html\u0026gt;. ","description":"在 GPLv3 下獲得許可。詳情見下文。\n GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. \u0026lt;http://fsf.org/\u0026gt; Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works."},{"id":27,"href":"/zh-tw/","title":"","parent":"","content":"CLI 建立, 執行, 測試, 和管理你的 Emacs Lisp 依賴      \n安裝 Eask 之後, 你就可以很輕鬆的開發任何 Elisp 包.\n開箱及用, Eask 支援 50+ 指令 來幫助整個你開發. 🔥\n開始使用   🏆 功能概述   Cask 的繼任者   Eask 與 Cask 非常相似！\nEask 擁有 Cask 的所有命令甚至更多！\n 開箱及用   自帶 10+ 內置 linters 和 test runners，所以你不用擔心如何使用它! Eask-file 是一個 elisp 文件   Eask 被視為 elisp 文件。\n您可以像在 Emacs 中那樣做任何事情！\n  ","description":"CLI 建立, 執行, 測試, 和管理你的 Emacs Lisp 依賴      \n安裝 Eask 之後, 你就可以很輕鬆的開發任何 Elisp 包.\n開箱及用, Eask 支援 50+ 指令 來幫助整個你開發. 🔥\n開始使用   🏆 功能概述   Cask 的繼任者   Eask 與 Cask 非常相似！\nEask 擁有 Cask 的所有命令甚至更多！\n 開箱及用   自帶 10+ 內置 linters 和 test runners，所以你不用擔心如何使用它! Eask-file 是一個 elisp 文件   Eask 被視為 elisp 文件。\n您可以像在 Emacs 中那樣做任何事情！"},{"id":28,"href":"/zh-tw/tags/","title":"Tags","parent":"","content":"","description":""},{"id":29,"href":"/zh-tw/Contributing/How-to-Contribute/","title":"❓ 如何貢獻","parent":"貢獻","content":"   ⚜️ 行為守則 🪑 開放發展 📌 語義版本控制 💡 分支機構 📂 項目狀況      ⚜️ 行為守則     我們採用了貢獻者公約 作為其行為準則，我們希望項目參與者遵守它。請閱讀全文，以便您了解將要執行的操作不容忍。\n🪑 開放發展     Eask 上的所有工作都直接在 GitHub 上進行。 核心團隊成員和外部貢獻者都發送 PR 通過相同的審查程序。\n📌 語義版本控制     Eask 遵循 語義版本控制。 我們發布補丁版本對於關鍵錯誤修復、 新功能的次要版本或非必要的更改，以及任何重大更改的主要版本。 當我們進行重大更改時，我們 還在次要版本中引入棄用警告，以便我們的用戶了解關於即將發生的變化並提前遷移他們的代碼。\n變更日誌文件 中記錄了每個重大變更。\n💡 分支機構     將所有更改直接提交到 master 分支。 我們不使用單獨的分支機構用於開發或即將發布的版本。 我們盡最大努力讓“主人”保持良好狀態，通過所有測試。\n落在 master 中的代碼必須與最新的穩定版本兼容。 它可能包含附加功能，但沒有重大更改。 我們應該能夠釋放隨時從 master 的提示中獲取一個新的次要版本。\n📂 項目狀況     該項目的基本框架已經完成，我們目前正在尋找貢獻者向我們提供反饋並改進此工具的 TUI/UX！\n我們也在尋求建議以增加更多。 Emacser 常用命令和選項，所以這些功能是默認准備的！ 點贊命令 lint (package-lint) 或選項 --debug 指的是 debug-on-error 到 t！\n","description":"⚜️ 行為守則 🪑 開放發展 📌 語義版本控制 💡 分支機構 📂 項目狀況      ⚜️ 行為守則     我們採用了貢獻者公約 作為其行為準則，我們希望項目參與者遵守它。請閱讀全文，以便您了解將要執行的操作不容忍。\n🪑 開放發展     Eask 上的所有工作都直接在 GitHub 上進行。 核心團隊成員和外部貢獻者都發送 PR 通過相同的審查程序。\n📌 語義版本控制     Eask 遵循 語義版本控制。 我們發布補丁版本對於關鍵錯誤修復、 新功能的次要版本或非必要的更改，以及任何重大更改的主要版本。 當我們進行重大更改時，我們 還在次要版本中引入棄用警告，以便我們的用戶了解關於即將發生的變化並提前遷移他們的代碼。\n變更日誌文件 中記錄了每個重大變更。\n💡 分支機構     將所有更改直接提交到 master 分支。 我們不使用單獨的分支機構用於開發或即將發布的版本。 我們盡最大努力讓“主人”保持良好狀態，通過所有測試。\n落在 master 中的代碼必須與最新的穩定版本兼容。 它可能包含附加功能，但沒有重大更改。 我們應該能夠釋放隨時從 master 的提示中獲取一個新的次要版本。"},{"id":30,"href":"/zh-tw/tos/","title":"法律聲明和隱私","parent":"","content":"聯繫信息   Jen-Chieh Shen  Email: jcs090219@gmail.com\n隱私政策   一般數據和信息的收集   當數據主體或自動化系統調用該網站時，emacs-eask.github.io 網站會收集一系列一般數據和信息。 這些一般數據和信息存儲在服務器日誌文件中。 收集的可能是：\n 使用的瀏覽器類型和版本 訪問系統使用的操作系統 訪問系統訪問我們網站的網站（所謂的推薦人） 子網站 訪問網站的日期和時間 一個互聯網協議地址（IP地址） 接入系統的互聯網服務提供商 在我們的信息技術系統受到攻擊時可能會使用的任何其他類似數據和信息  使用這些一般數據和信息時，我們不會得出任何結論關於數據主體。 相反，需要此信息來提供正確瀏覽我們 網站的內容並回答您的要求 (Article 6.1b GDPR).\n由於分析，您的 IP 地址和請求的 URL 最多可存儲 7 天網頁可能出現的問題。 鑑於出現問題有在某些情 況下，此信息的存儲時間可能超過 7 天深入分析問題。 一經確認將立即刪除他們無法進一步幫助診斷問題 或解決問題。 (Article 6.1f GDPR).\nCookies   該網頁不使用任何 cookie。\n","description":"聯繫信息   Jen-Chieh Shen  Email: jcs090219@gmail.com\n隱私政策   一般數據和信息的收集   當數據主體或自動化系統調用該網站時，emacs-eask.github.io 網站會收集一系列一般數據和信息。 這些一般數據和信息存儲在服務器日誌文件中。 收集的可能是：\n 使用的瀏覽器類型和版本 訪問系統使用的操作系統 訪問系統訪問我們網站的網站（所謂的推薦人） 子網站 訪問網站的日期和時間 一個互聯網協議地址（IP地址） 接入系統的互聯網服務提供商 在我們的信息技術系統受到攻擊時可能會使用的任何其他類似數據和信息  使用這些一般數據和信息時，我們不會得出任何結論關於數據主體。 相反，需要此信息來提供正確瀏覽我們 網站的內容並回答您的要求 (Article 6.1b GDPR).\n由於分析，您的 IP 地址和請求的 URL 最多可存儲 7 天網頁可能出現的問題。 鑑於出現問題有在某些情 況下，此信息的存儲時間可能超過 7 天深入分析問題。 一經確認將立即刪除他們無法進一步幫助診斷問題 或解決問題。 (Article 6.1f GDPR).\nCookies   該網頁不使用任何 cookie。"},{"id":31,"href":"/zh-tw/Getting-Started/Introduction/","title":"🚪 介紹","parent":"開始使用","content":"Eask 被構建為用作 Elisp 包中的包開發工具。 但是現在，Eask 支持各種類型的 Emacs Lisp 任務。 它可以通過三種主要方式使用：\n Elisp 包的開發工具 配置的依賴管理 為所有其他目的運行 elisp 程序  那麼，除上述內容外，Eask 與其他構建工具（如 Cask、makem.sh 和 Eldev 之間的主要區別是什麼？\n好問題！ Eask 現在不僅僅是一個構建工具，它可以用於各種目的！ 但 Eask 的目標是：\n 一致足以跨所有系統進行沙盒 通用足以讓 Emacsers 經常使用命令（byte-compile、checkdoc 等） 穩健即使在出現用戶錯誤的情況下也足以提供有用的結果 無依賴，使該工具可以在任何平台上運行  附言 有關更多詳細信息，請參閱為什麼使用 Eask？。\n❓ 為什麼選擇 Eask？     Eask 與 Cask 具有相同的理念，請參閱他們的網站 Why Cask? 以了解您為什麼應該這樣做, 使用 Eask（或 Cask）。\nCask、makem.sh 或 Eldev 等許多工具並不**“真正”**支持 Windows。 Cask 已經放棄了對舊版 Windows 的支持，makem.sh 在 bash 上運行，Eldev 確實支持 Windows， 但作者沒有在 Windows 上使用它（沒有完整的測試，請參閱他們的 [CI 工作流程]（https //github.com/doublep/eldev/actions/workflows/test.yml））。 Eask 旨在適配所有平台，包括 Linux、macOS 和 Windows。 它側重於跨平台能力和每個 操作系統之間的一致性。 如果 Eask 可以在您的機器上運行，那麼它也可以在任何平台上運行。\n這是我們的建議； 如果您打算在特定於操作系統的軟件包上工作（從不使用其他平台），請使用其他工具。 另一方面，Eask 旨在提供每個操作系統之間的最佳一致性。 或者，如果你想學習一個隨處可用的工具， Eask 是最好的選擇之一。\n⚖️ 比較     該表是通過閱讀這些項目的文檔和源代碼編制的，但作者不是這些工具的專家。 歡迎指正。\n🔍 專案方面     該表顯示了作者選擇的技術以及項目的構建方式。 此外，他們做出了哪些技術決策？ 放棄支持？ 項目佈局？ 等等。\n    Eask Cask Eldev makem.sh     bin folder binary, bash, bat bash, bat bash, bat, ps1 bash   Cross-Platform yes no, doesn\u0026rsquo;t support Windows yes no, doesn\u0026rsquo;t support Windows   Emacs version 26.1+ 24.5+ 24.4+ 26.1+   Size 7,000+ lines 3,000+ lines 8,000+ lines 1,200+ lines   Executable yes no no no   Pure Elisp no, JavaScript yes yes yes   CLI Parser yargs commander built-in built-in     💡 makem.sh 也有很好的比較文檔，請訪問他們的站點  🔍 功能方面     這是每個工具之間的功能比較。 每種工具都有其優點； 選擇適合您的工具！\n如果這些功能沒有在下面列出，要么被遺忘，要么只是被認為太重要了，所以每個工具都有它； 因此我們不將它們添加到列表中。\n    Eask Cask Eldev makem.sh     Elisp configuration yes, DSL is optional no, DSL only yes, pure elisp no   Handle archives failure yes, see emacs-eask/archives no no no   create project, etc yes no no no   link local dependencies yes yes yes no   exec program yes yes no no   eval expressions yes yes yes no   emacs execution yes yes no no   Built-in linters yes no yes no   Built-in tests yes no yes no   Run script yes no no no   Self-defined commands no, replaced with run script no yes no   Subcommand yes no no no    📰 消息      0.9.x - Improve UX in general 0.8.x - Add link command 0.7.x - Fix default-directory isn\u0026rsquo;t honored by -g option 0.6.x - You can now use eask create to create an Elisp project 0.5.x - Handle error for failed archive 0.4.x - Add color logger 0.3.x - Add verbosity level and timestamps 0.2.x - Done basic error handling with exit code at the end of executions 0.1.39 - Use spawn instead exec; now messages will be printed immediately 0.1.x - Project bare-bones are pretty much complete!  📝 TODO 事項列表     請參考這.\n📂 基礎項目     Eask 的設計深受以下項目的影響：\n Cask - Emacs 的項目管理工具 makem.sh -用於構建和測試 Emacs Lisp 包的類似 Makefile 的腳本 epm - Emacs 包管理器 Eldev - Elisp 開發工具  ","description":"Eask 被構建為用作 Elisp 包中的包開發工具。 但是現在，Eask 支持各種類型的 Emacs Lisp 任務。 它可以通過三種主要方式使用：\n Elisp 包的開發工具 配置的依賴管理 為所有其他目的運行 elisp 程序  那麼，除上述內容外，Eask 與其他構建工具（如 Cask、makem.sh 和 Eldev 之間的主要區別是什麼？\n好問題！ Eask 現在不僅僅是一個構建工具，它可以用於各種目的！ 但 Eask 的目標是：\n 一致足以跨所有系統進行沙盒 通用足以讓 Emacsers 經常使用命令（byte-compile、checkdoc 等） 穩健即使在出現用戶錯誤的情況下也足以提供有用的結果 無依賴，使該工具可以在任何平台上運行  附言 有關更多詳細信息，請參閱為什麼使用 Eask？。\n❓ 為什麼選擇 Eask？     Eask 與 Cask 具有相同的理念，請參閱他們的網站 Why Cask? 以了解您為什麼應該這樣做, 使用 Eask（或 Cask）。\nCask、makem.sh 或 Eldev 等許多工具並不**“真正”**支持 Windows。 Cask 已經放棄了對舊版 Windows 的支持，makem.sh 在 bash 上運行，Eldev 確實支持 Windows， 但作者沒有在 Windows 上使用它（沒有完整的測試，請參閱他們的 [CI 工作流程]（https //github."}]
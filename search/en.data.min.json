[{"id":0,"href":"/Contributing/Codebase-Overview/","title":"🔱 Codebase Overview","parent":"Contributing","content":"Eask consists of two components: a command-line tool (the Eask CLI), and Elisp scripts.\nThe CLI, is used to find the corresponding lisp file and feed it into the Emacs executable. It would parse all options and convert them to Emacs understandable options on the lisp scripts end. It is written in plain JavaScript, the main file is located in src/util.js.\nThe Elisp scripts, is used to do the actual execution for each command that passes through the CLI. All commands are split into its file and are organized in the lisp folder. It is written in plain Emacs Lisp, the main file is located in lisp/_prepare.el.\n🖥️ CLI \u0026amp; Yargs 📜 Elisp Script 📂 Project Structure ♻️ Execution Order inside Eask-file 🖥️ CLI \u0026amp; Yargs The yargs command file is written in JavaScript, and located under the cmds folder. Each file under, will be named with convention [command_name].js. This file should define basic command-line parsing rules and correctly prepare data to feed the Emacs session.\nLet\u0026rsquo;s look at the file cmds/core/archives.js:\nexports.command = [\u0026#39;archives\u0026#39;, \u0026#39;sources\u0026#39;]; // alias to sources exports.desc = \u0026#39;List out all package archives\u0026#39;; exports.handler = async (argv) =\u0026gt; { await UTIL.e_call(argv, \u0026#39;core/archives\u0026#39;); }; This is a standard yargs command file, which contains all the information we need to pass it to the Emacs session.\nexports.command is the argument pattern, but it also accepts alias (array) exports.desc is the command description exports.handler is an asynchronous function that handles command execution UTIL is a global variable that points to the src/util.js module. 'core/archives' is the elisp file under lisp folder (without .el extension). eask is a JavaScript file that holds all our global options.\nyargs .usage(\u0026#39;Usage: eask \u0026lt;command\u0026gt; [options..]\u0026#39;) .help( \u0026#39;help\u0026#39;, \u0026#39;Show usage instructions.\u0026#39; ) .options({ \u0026#39;global\u0026#39;: { description: `change default workspace to ~/.eask/`, alias: \u0026#39;g\u0026#39;, type: \u0026#39;boolean\u0026#39;, }, }) ... For local options, please use exports.builder and specify under its command file.\nSee yargs/docs/advanced.md, the official documentation for more information and getting a better explanation would help!\n📜 Elisp Script Elisp scripts are located under the lisp folder and will wait to get called by the CLI. All Elisp scripts are written in Emacs Lisp and should have a similar structure below:\n(let ((dir (file-name-directory (nth 1 (member \u0026#34;-scriptload\u0026#34; command-line-args))))) (load (expand-file-name \u0026#34;_prepare.el\u0026#34; (locate-dominating-file dir \u0026#34;_prepare.el\u0026#34;)) nil t)) (eask-start (message \u0026#34;PWD is %s\u0026#34; default-directory)) See Development API section for more information!\n📂 Project Structure There are three places you need to look into it:\neask file at the root of the project cmds folder with all available commands lisp folder with all elisp code eask is the node entry, and the main yargs definition! cmds and lisp folders are command files that correspond to each other.\n♻️ Execution Order inside Eask-file Eask is executed this way:\nEask environment builds sandbox and reads Eask file information Emacs configuration is only being executed when -g option is enabled before hooks are hooks run before command task command execution is the primary command task after hooks are hooks run after command task ","description":"Eask consists of two components: a command-line tool (the Eask CLI), and Elisp scripts.\nThe CLI, is used to find the corresponding lisp file and feed it into the Emacs executable. It would parse all options and convert them to Emacs understandable options on the lisp scripts end. It is written in plain JavaScript, the main file is located in src/util.js.\nThe Elisp scripts, is used to do the actual execution for each command that passes through the CLI. All commands are split into its file and are organized in the lisp folder. It is written in plain Emacs Lisp, the main file is located in lisp/_prepare.el.\n"},{"id":1,"href":"/Contributing/Developing-Eask/","title":"🔨 Developing Eask","parent":"Contributing","content":" 🚩 Prerequisites 📝 Building 🧪 Testing ⚗️ Running Tests 🌍 Environment Vars 🔬 How to Write a Test 🪧 Snapshots ⏱️ Timeouts 📜 Patterns 🩺 Common Problems 🚩 Prerequisites To make changes to Eask, you should have:\nNode.js for the development environment. npm for the package manager. Emacs, 26.1 or above! 📝 Building To build the development environment, you would have to install Eask using the build from source method. Make sure you have set up the environment PATH variable, so you can call eask from the terminal.\nAfter you have stepped through the installation, try:\neask locate It should print out the location of the eask executable. You should be able to identify the Eask executable\u0026rsquo;s location, even you have multiple Eask versions installed!\n🧪 Testing Local testing for Eask is done using the Jest testing framework. Jest is a mature and well supported testing framework written in Javascript. Jest was chosen for much the same reasons as Javascript was chosen for this project. In addition, Jest is easy to learn and has built in support for snapshot based testing.\n⚗️ Running Tests If you have not done so already, run npm install --dev\nAlways run from the project root (i.e. same directory as package.json)\nrun all tests npm run test run a single test npm run test path/to/test.js run tests with full output npm run test-debug remove files created during test npm run test-reset Since npm run test just runs Jest, you can also pass Jest options to the commands above. For example:\nrun tests whose names (in test() blocks) match npm run test -t 'eask lint .*' re-run failed tests npm run test -f 🌍 Environment Vars Name Type Default Meaning ALLOW_UNSAFE bool* false Run tests in testUnsafe blocks. These can overwrite your personal emacs config or settings. DEBUG bool* false Print full output from commands in test. EASK_COMMAND path \u0026ldquo;eask\u0026rdquo; Path to Eask. Usually either eask or $PWD/bin/eask to use local changes. TIMEOUT number 25000 Command timeout in ms. Note this is different than Jest\u0026rsquo;s timeout, which should be greater. Note 💡 Node.js handles environment variables as strings. That means that DEBUG=0, DEBUG=false all enable DEBUG. The only setting which disables a boolean flag is null, for example DEBUG=. 🔬 How to Write a Test Folder structure\nTests should be in test/js. Related tests should be in the same file with the suffix .test.js and are usually named after the feature or command that they test, for example link.test.js tests the eask link command.\nIf the test needs some specific project files, put them in a new folder within test/js For example, files in test/js/foo would be expected to be for foo.test.js.\nThe exception is test/js/empty, which is simply an empty folder. If you use it, make sure to run eask clean all before your tests.\nTest File structure\nconst { TestContext } = require(\u0026#34;./helpers\u0026#34;); describe(\u0026#34;emacs\u0026#34;, () =\u0026gt; { const ctx = new TestContext(\u0026#34;./test/jest/empty\u0026#34;); beforeAll(async () =\u0026gt; await ctx.runEask(\u0026#34;clean all\u0026#34;)); afterAll(() =\u0026gt; ctx.cleanUp); test(\u0026#34;eask emacs --version\u0026#34;, async () =\u0026gt; { await ctx.runEask(\u0026#34;emacs --version\u0026#34;); }); test(\u0026#34;eask emacs --batch --eval\u0026#34;, async () =\u0026gt; { await ctx.runEask( \u0026#39;emacs --batch --eval \u0026#34;(require (quote ert))\u0026#34; --eval \u0026#34;(ert-deftest mytest () (should-not (display-graphic-p)))\u0026#34; -f ert-run-tests-batch\u0026#39;, ); }); }); In Jest, you group related tests using describe. Tests in the same describe block can share setup/teardown code, can be disabled as a group and are grouped under the same heading in output.\ndescribe blocks can be nested within other describe blocks. It\u0026rsquo;s a good idea to add a nested describe when tests run in different directories, or to match a \u0026ldquo;given, when, then\u0026rdquo; style of testing.\nFor each test directory you should create a new TestContext object. All runEask commands will use the TestContext\u0026rsquo;s working directory.\nJest\u0026rsquo;s tests are in test blocks. Note that it is an alias for test. Tests can be selectively disabled in code, like so:\ntest.only(name, fn) runs only that test in the file test.skip(name, fn) skips running the test but still prints its name test.failing(name, fn) invert the meaning of the test: it should fail. The expect API matches values in different ways and usually prints a diff as part of the failure report. See Jest\u0026rsquo;s expect() API for more info.\nUncaught errors thrown in a test block will fail it and report the error. That\u0026rsquo;s why many tests don\u0026rsquo;t have an expect call, they simply check that the command succeeds.\nOutput from runEask is wrapped in a helper class CommandOutput which provides some transformation methods. For example, if you have const out = await ctx.runEask(\u0026quot;analyze\u0026quot;);, then\nout.combined() concatenates both stdout and stderr as a string, out.raw() returns a plain object with just stdout and stderr as properties, out.sanitized() replaces all absolute paths that match the context\u0026rsquo;s path Since the class wraps the output of Node\u0026rsquo;s exec() method you can still access stdout and stderr:\nconst { stderr, stdout } = await ctx.runEask(\u0026#34;analyze\u0026#34;); Some commands create files or directories which should be removed after the test runs. For example, eask generate ignore elisp creates a .gitignore file. You can use the context\u0026rsquo;s removeFiles method to remove files and directories relative to the context\u0026rsquo;s path:\ndescribe(\u0026#34;Generating\u0026#34;, () =\u0026gt; { beforeAll(async () =\u0026gt; await ctx.removeFiles(\u0026#34;.gitignore\u0026#34;)); afterAll(async () =\u0026gt; await ctx.removeFiles(\u0026#34;.gitignore\u0026#34;)); it(\u0026#34;eask generate ignore elisp\u0026#34;, async () =\u0026gt; { await ctx.runEask(\u0026#34;generate ignore elisp\u0026#34;); }); }); Note that removeFiles() will recursively remove directories, but does not accept patterns. So, to remove all files in ./test just call ctx.remove(\u0026quot;test\u0026quot;). You can pass multiple files or directory names in single call: ctx.remove(\u0026quot;test\u0026quot;, \u0026quot;.gitignore\u0026quot;).\nUse TestContext.cleanUp() to immediately abort any still-running commands that were called in that context. Use this if Jest reports \u0026ldquo;open handles were detected\u0026rdquo; after a test run. Note that cleanUp sends a signal to all processes started using the context\u0026rsquo;s runEask command. If used in an afterEach hook (i.e. after every test) it may result in failures.\n🪧 Snapshots Snapshot tests match the output of a test against a saved copy of the expected output. For example:\ntest(\u0026#34;eask analyze\u0026#34;, async () =\u0026gt; { const res = await ctx.runEask(\u0026#34;analyze\u0026#34;); expect(res.raw()).toMatchSnapshot(); }); The first time you run this Jest will create a new snapshot saved in an adjacent __snapshot__ directory.\nYou should check this file in to version control as it forms a critical part of the test. If the snapshot changes, you can update the snapshot by running Jest with option -u, for example, npm run test -- -u will update all changed snapshots.\nAny type of output can be used for a snapshot test. You could snapshot the contents of a file after changing it\ntest(\u0026#34;eask analyze\u0026#34;, async () =\u0026gt; { await ctx.runEask(\u0026#34;foo\u0026#34;); const file = ctx.fileContents(\u0026#34;Easkfile\u0026#34;); // file as a string expect(file).toMatchSnapshot(); }); Often snapshots will include data that varies with time or environment, for example timestamps or file paths. The snapshot of eask analyze contains absolute file paths that will be different on every machine.\nOutput from runEask is wrapped in a helper class CommandOutput which provides some transformation methods. The simplest just removes the absolute file paths:\nit(\u0026#34;matches snapshot\u0026#34;, async () =\u0026gt; { const res = await ctx.runEask(\u0026#34;analyze\u0026#34;); const resClean = res.sanitized() // a CommandOutput object with absolute paths replaced by \u0026#34;~\u0026#34; .raw(); // an object { stderr, stdout } suitable for snapshotting expect(resClean).toMatchSnapshot(); }); You can include custom replacement functions. Here, numbers will be replaced by \u0026quot;x\u0026quot;. Then strings \u0026quot;x:x\u0026quot; will be replaced by \u0026quot;y\u0026quot;.\nit(\u0026#34;matches snapshot\u0026#34;, async () =\u0026gt; { const res = await ctx.runEask(\u0026#34;analyze\u0026#34;); const resClean = res .sanitized( (x) =\u0026gt; x.replace(/[0-9]+/g, \u0026#34;x\u0026#34;), (x) =\u0026gt; x.replaceAll(\u0026#34;x:x\u0026#34;, \u0026#34;y\u0026#34;), ) .raw(); expect(resClean).toMatchSnapshot(); }); It\u0026rsquo;s important to use the g regex flag so all occurrences of the match are replaced, or you could use replaceAll. User provided functions run in addition to the default sanitize function and run in the order they were given.\n⏱️ Timeouts There are two timeout settings, one for Jest and one for Node\u0026rsquo;s exec(). All timeout values are in milliseconds.\nSince the exec() timeout immediately terminates the running command and reports output, it is much better to use that instead of Jest\u0026rsquo;s timeout.\nTo change a timeout for a single command\nctx.runEask(\u0026#34;analyze\u0026#34;, { timeout: 10000}) To change the global timeout for a single run, use the env var\nenv TIMEOUT=30000 npm run test To change the global timeout permanently, set the default in ./helpers.js.\nIf you change either global timeout, make sure the global Jest timeout is greater by setting it in package.json\n\u0026#34;jest\u0026#34;: { \u0026#34;rootDir\u0026#34;: \u0026#34;./test/jest\u0026#34;, \u0026#34;testTimeout\u0026#34;: 40000 } 📜 Patterns Here are some common patterns for testing commands. Each of these assumes that ctx is a TestContext object.\nCheck a command succeeds:\ntest(\u0026#34;eask analyze\u0026#34;, async () =\u0026gt; { await ctx.runEask(\u0026#34;analyze\u0026#34;); }); Uncaught errors thrown in a test block will fail the test and report the error. Failed commands will include stderr and stdout.\nCheck a command fails:\ntest(\u0026#34;eask analyze\u0026#34;, async () =\u0026gt; { await expect(ctx.runEask(\u0026#34;analyze\u0026#34;)).rejects.toThrow(); }); Check a command fails with a specific code:\ntest(\u0026#34;eask link add should error\u0026#34;, async () =\u0026gt; { // the error object should have property code = 1 await expect(ctx.runEask(\u0026#34;link add\u0026#34;)).rejects.toMatchObject({ code: 1, }); }); Check a command produces some output:\ntest(\u0026#34;eask analyze\u0026#34;, async () =\u0026gt; { const out = await ctx.runEask(\u0026#34;analyze\u0026#34;); expect(out.stderr).toMatch(\u0026#34;success\u0026#34;); // should apppear as a substring // If you want to check both `stderr` and `stdout`, just concatenate them expect(out.stdout + \u0026#34;/n\u0026#34; + out.stderr).toMatch(\u0026#34;success\u0026#34;); // Same thing using helper methods expect(out.combined()).toMatch(\u0026#34;success\u0026#34;); }); Check command output against a snapshot:\nSimple output matching\ntest(\u0026#34;eask analyze\u0026#34;, async () =\u0026gt; { const res = await ctx.runEask(\u0026#34;analyze\u0026#34;); expect(res).toMatchSnapshot(); }); Update all changed snapshots: npm run test -- -u\nRemove absolute file paths from output:\nit(\u0026#34;matches snapshot\u0026#34;, async () =\u0026gt; { const res = await ctx.runEask(\u0026#34;analyze\u0026#34;); const resClean = res.sanitized() // a CommandOutput object with absolute paths replaced by \u0026#34;~\u0026#34; .raw(); // an object { stderr, stdout } suitable for snapshotting expect(resClean).toMatchSnapshot(); }); Apply custom transformations for sanitizing output:\nit(\u0026#34;matches snapshot\u0026#34;, async () =\u0026gt; { const res = await ctx.runEask(\u0026#34;analyze\u0026#34;); const resClean = res .sanitized( (x) =\u0026gt; x.replace(/[0-9]+/g, \u0026#34;x\u0026#34;), (x) =\u0026gt; x.replace(/x:x/g, \u0026#34;y\u0026#34;), ) .raw(); expect(resClean).toMatchSnapshot(); }); User provided functions run in addition to the default sanitize function and run in the order they were given.\nCommands which modify the user\u0026rsquo;s environment:\nFor example, commands which use -c or -g options.\nconst { testUnsafe } = require(\u0026#39;./helpers\u0026#39;); // this will only run if ALLOW_UNSAFE is != 0 testUnsafe(\u0026#34;global install\u0026#34;, async () =\u0026gt; { // this installs in ~/.eask and changes ~/Eask await ctx.runEask(\u0026#34;install -g foo\u0026#34;); }); 🩺 Common Problems When using runEask(), pass only the Eask arguments, not the eask command itself. Always await any expressions that trigger commands. When using expect(...).rejects it should be awaited so that the promise rejects before the test completes. The folder argument to TestContext should be relative to project root, if it doesn\u0026rsquo;t exist you may get an error ENOENT If you get an error from Jest reporting open handles, then try using afterAll(() =\u0026gt; ctx.cleanUp()) There are two timeout values: one used for Jest (set in package.json), and one used for node.exec, set via env var in ./helpers.js. The node.exec timeout is set lower than the Jest one, so changing timeout values for tests or by jest.setTimeout usually won\u0026rsquo;t have an effect. Instead set the timeout on the command itself runEask(\u0026quot;eask emacs\u0026quot;, { timeout: 100000 }) ","description":" 🚩 Prerequisites 📝 Building 🧪 Testing ⚗️ Running Tests 🌍 Environment Vars 🔬 How to Write a Test 🪧 Snapshots ⏱️ Timeouts 📜 Patterns 🩺 Common Problems 🚩 Prerequisites To make changes to Eask, you should have:\nNode.js for the development environment. npm for the package manager. Emacs, 26.1 or above! 📝 Building To build the development environment, you would have to install Eask using the build from source method. Make sure you have set up the environment PATH variable, so you can call eask from the terminal.\n"},{"id":2,"href":"/Contributing/Documentation/","title":"✒️ Documentation","parent":"Contributing","content":" 🚩 Prerequisites 📐 Setup Eask includes a comprehensive user guide. Please try to extend it accordingly while you implement new features.\nThe documentation is written in Markdown, using Hugo and GitHub Pages. The former is the static site generator, and the latter is the static web pages hosting service from GitHub.\nNote 💡 You can find all our documentation under the docs/content/ folder. 🚩 Prerequisites To make changes to documentation, you should have:\nhugo executable; the static site generator. 📐 Setup To set up the website locally, you need to first install the theme:\n# Clone the repository with submodules... git clone https://github.com/emacs-eask/cli --recurse-submodules # Navgiate to `docs/theme/geekdoc` folder cd ./docs/theme/geekdoc/ # Build the themes npm install \u0026amp;\u0026amp; npm run build Then run the hugo command:\n# Navigate back to `docs` folder cd ./docs/ # Run hugo server locally hugo server And that\u0026rsquo;s it! Now you can open the browser with the URL localhost:1313. 🎉\nNote 💡 You can specify -D option if you consider writing a draft. ","description":" 🚩 Prerequisites 📐 Setup Eask includes a comprehensive user guide. Please try to extend it accordingly while you implement new features.\nThe documentation is written in Markdown, using Hugo and GitHub Pages. The former is the static site generator, and the latter is the static web pages hosting service from GitHub.\nNote 💡 You can find all our documentation under the docs/content/ folder. 🚩 Prerequisites To make changes to documentation, you should have:\n"},{"id":3,"href":"/Contributing/PR/","title":"📭 Pull Request","parent":"Contributing","content":"If all tests have passed, and the Eask can operate normally with updated documentation (if any), please send us a pull request with your changes. 🎊\n🧪 Tests Explained This has moved to the repository README.md file.\nPlease visit https://github.com/emacs-eask/cli#-testing.\n","description":"If all tests have passed, and the Eask can operate normally with updated documentation (if any), please send us a pull request with your changes. 🎊\n🧪 Tests Explained This has moved to the repository README.md file.\nPlease visit https://github.com/emacs-eask/cli#-testing.\n"},{"id":4,"href":"/Examples/Emacs-Configuration/","title":"⚙️ Emacs Configuration","parent":"Examples","content":"Eask is the magic file that eask will read it as the init file in Emacs. The syntaxes are similar to the Cask file, but different.\n;; -*- mode: eask; lexical-binding: t -*- (package \u0026#34;Emacs configuration\u0026#39;s name\u0026#34; \u0026#34;0.1.0\u0026#34; \u0026#34;Your Emacs configuration\u0026#39;s description\u0026#34;) ; optional (website-url \u0026#34;https://github.com/owner/repo\u0026#34;) (keywords \u0026#34;config\u0026#34;) (package-file \u0026#34;init.el\u0026#34;) ; optional (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (files \u0026#34;early-init.el\u0026#34; \u0026#34;init.el\u0026#34; \u0026#34;lisp/*.el\u0026#34; \u0026#34;site-lisp/*.el\u0026#34;) (source \u0026#34;gnu\u0026#34;) (source \u0026#34;melpa\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) (depends-on \u0026#34;auto-complete\u0026#34;) (depends-on \u0026#34;dash\u0026#34;) (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;flycheck\u0026#34;) (depends-on \u0026#34;helm\u0026#34;) (depends-on \u0026#34;magit\u0026#34;) (depends-on \u0026#34;popup\u0026#34;) (depends-on \u0026#34;projectile\u0026#34;) (depends-on \u0026#34;s\u0026#34;) (depends-on \u0026#34;smartparens\u0026#34;) (depends-on \u0026#34;yasnippet\u0026#34;) Note 💡 You would need to use -c or \u0026ndash;config option to manage your configuration\u0026rsquo;s packages! ","description":"Eask is the magic file that eask will read it as the init file in Emacs. The syntaxes are similar to the Cask file, but different.\n;; -*- mode: eask; lexical-binding: t -*- (package \u0026#34;Emacs configuration\u0026#39;s name\u0026#34; \u0026#34;0.1.0\u0026#34; \u0026#34;Your Emacs configuration\u0026#39;s description\u0026#34;) ; optional (website-url \u0026#34;https://github.com/owner/repo\u0026#34;) (keywords \u0026#34;config\u0026#34;) (package-file \u0026#34;init.el\u0026#34;) ; optional (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (files \u0026#34;early-init.el\u0026#34; \u0026#34;init.el\u0026#34; \u0026#34;lisp/*.el\u0026#34; \u0026#34;site-lisp/*.el\u0026#34;) (source \u0026#34;gnu\u0026#34;) (source \u0026#34;melpa\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) (depends-on \u0026#34;auto-complete\u0026#34;) (depends-on \u0026#34;dash\u0026#34;) (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;flycheck\u0026#34;) (depends-on \u0026#34;helm\u0026#34;) (depends-on \u0026#34;magit\u0026#34;) (depends-on \u0026#34;popup\u0026#34;) (depends-on \u0026#34;projectile\u0026#34;) (depends-on \u0026#34;s\u0026#34;) (depends-on \u0026#34;smartparens\u0026#34;) (depends-on \u0026#34;yasnippet\u0026#34;) Note 💡 You would need to use -c or \u0026ndash;config option to manage your configuration\u0026rsquo;s packages! "},{"id":5,"href":"/Continuous-Integration/GitHub-Actions/","title":"💿 GitHub Actions","parent":"Continuous Integration","content":" 💾 Setup Eask locally Here is an example using the GitHub Actions service.\njobs: test: runs-on: ${{ matrix.os }} strategy: matrix: os: [ubuntu-latest, macos-latest, windows-latest] emacs-version: [26.3, 27.2, 28.2, 29.4, 30.1, snapshot] steps: - uses: actions/checkout@v3 # Install Emacs - uses: jcs090218/setup-emacs@master with: version: ${{ matrix.emacs-version }} # Install Eask - uses: emacs-eask/setup-eask@master with: version: \u0026#39;snapshot\u0026#39; - name: Run tests run: | eask package eask install eask compile This example is testing your Emacs Lisp package in the below environment;\nOS Emacs Eask Linux (Ubuntu) 26.x, 27.x, 28.x, 29.x, 30.x, snapshot latest macOS 26.x, 27.x, 28.x, 29.x, 30.x, snapshot latest Windows 26.x, 27.x, 28.x, 29.x, 30.x, snapshot latest with these following actions,\nsetup-emacs to install Emacs setup-eask to install desired Eask version Note 💡 You can generate workflow file via eask generate workflow github, see Commands and options for more information! 💾 Setup Eask locally You can install Eask locally using scripts from .github/scripts/setup-eask (Unix) or .github/scripts/setup-eask.ps1 (Windows).\n- uses: actions/checkout@v3 - name: Prepare Eask (Unix) if: matrix.os == \u0026#39;ubuntu-latest\u0026#39; || matrix.os == \u0026#39;macos-latest\u0026#39; run: | chmod -R 777 ./ .github/scripts/setup-eask - name: Prepare Eask (Windows) if: matrix.os == \u0026#39;windows-latest\u0026#39; run: .github/scripts/setup-eask.ps1 ","description":" 💾 Setup Eask locally Here is an example using the GitHub Actions service.\njobs: test: runs-on: ${{ matrix.os }} strategy: matrix: os: [ubuntu-latest, macos-latest, windows-latest] emacs-version: [26.3, 27.2, 28.2, 29.4, 30.1, snapshot] steps: - uses: actions/checkout@v3 # Install Emacs - uses: jcs090218/setup-emacs@master with: version: ${{ matrix.emacs-version }} # Install Eask - uses: emacs-eask/setup-eask@master with: version: \u0026#39;snapshot\u0026#39; - name: Run tests run: | eask package eask install eask compile This example is testing your Emacs Lisp package in the below environment;\n"},{"id":6,"href":"/Getting-Started/Quick-Start/","title":"🔰 Quick Start","parent":"Getting Started","content":" 🔍 Step 1: Setup NodeJS runtime and npm 🔍 Step 2: Install Eask 🔍 Step 3: Navigate to an existing project or create a new project 🔍 Step 4: Create Eask-file 🔍 Step 5: Start the package development 🔍 Step 6: Manage package archives 🔍 Step 7: Add some dependencies 🔍 Step 8: Install dependencies 🔗 See Also Using Eask as your Emacs package management tool.\nNote The installation is cross-platform and uses npm. For instructions on how to install Eask using other methods, see the install section.\nIt is required to have Git installed to run this tutorial.\n🔍 Step 1: Setup NodeJS runtime and npm Please check out their official site here and install NodeJS and npm corresponds to your current operating system\nNote 💡 If you don\u0026rsquo;t prefer NodeJS and npm, you can install with binary from our release page. 🔍 Step 2: Install Eask npm install -g @emacs-eask/cli To verify your new installation:\neask --version 🔍 Step 3: Navigate to an existing project or create a new project If you already have an existing elisp project, navigate to the project root folder.\ncd /path/to/project/dir/ To create one:\neask create package \u0026lt;your-project\u0026gt; It should create a folder named \u0026lt;your-project\u0026gt; in your current working directory.\n🔍 Step 4: Create Eask-file Skip this step if you chose to create the project with eask create!\nOtherwise, to create Eask-file in the existing project:\neask init You will be asked some questions about the package you are going to create:\npackage name: (your-project) version: (1.0.0) description: Your project description! entry point: (your-project.el) emacs version: (26.1) website: https://example.com/project-url/ keywords: tools example About to write to /path/to/project/Eask: ;; -*- mode: eask; lexical-binding: t -*- (package \u0026#34;your-project\u0026#34; \u0026#34;1.0.0\u0026#34; \u0026#34;Your project description!\u0026#34;) (website-url \u0026#34;https://example.com/project-url/\u0026#34;) (keywords \u0026#34;tools\u0026#34; \u0026#34;example\u0026#34;) (package-file \u0026#34;your-project.el\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) Is this OK? (yes) yes ⏎ You should be able to see an Eask file in your project folder. 🎉🎊\n🔍 Step 5: Start the package development To check your package information, run:\neask info You should be able to see the following information:\nyour-package (1.0.0) | deps: 0 | devDeps: 0 Your project description! https://example.com/project-url/ keywords: tools, example entry: your-package-file.el kind: single dist .total-files: 0 .unpacked-size: 0 From the start, you would not have any dependencies and devDependencies (0 by default)!\n🔍 Step 6: Manage package archives You can manage package archives by using the source directive in your Eask-file.\n(source \u0026#34;gnu\u0026#34;) ; default (source \u0026#34;melpa\u0026#34;) ; Add package archives Note 💡 See DSL/source for more information! 🔍 Step 7: Add some dependencies You can add dependencies by using depends-on directive in your Eask-file.\n... (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;ht\u0026#34;) Note 💡 Make sure the dependencies you add are available in the package archives!\nOr else you would get an error `package-name-\u0026rsquo; is unavailable!\n🔍 Step 8: Install dependencies Now we can install the dependencies we have specified in the Eask-file:\neask install-deps You should see Eask executed correctly with the similar output below:\nLoading package information... done ✓ Installing 2 package dependencies... - [1/2] Installing f (20241003.1131)... done ✓ - [2/2] Installing ht (20230703.558)... done ✓ (Total of 2 dependencies installed, 0 skipped) 🔗 See Also Commands and options Domain Specific Language Basic Usage ","description":" 🔍 Step 1: Setup NodeJS runtime and npm 🔍 Step 2: Install Eask 🔍 Step 3: Navigate to an existing project or create a new project 🔍 Step 4: Create Eask-file 🔍 Step 5: Start the package development 🔍 Step 6: Manage package archives 🔍 Step 7: Add some dependencies 🔍 Step 8: Install dependencies 🔗 See Also Using Eask as your Emacs package management tool.\nNote The installation is cross-platform and uses npm. For instructions on how to install Eask using other methods, see the install section.\n"},{"id":7,"href":"/Getting-Started/","title":"Getting Started","parent":"","content":"","description":""},{"id":8,"href":"/Getting-Started/Finding-Emacs/","title":"🔭 Finding Emacs","parent":"Getting Started","content":"By default, packages are installed for the default Emacs, i.e., the one behind the emacs command. To pick a different Emacs, set the environment variable EMACS to the command name or executable path of the Emacs to use:\nEMACS=\u0026#34;emacs-26.1\u0026#34; eask command Note that installed dependencies are scoped on the version of Emacs. So when switching between versions you will have to install the dependencies for each:\nEMACS=\u0026#34;emacs-26.3\u0026#34; eask install There are, unfortunately, circumstances under which Emacs itself resets the EMACS variable in a way which conflicts with eask, in which case you can use the environment variable EASK_EMACS instead. Specifically, this problem effects: Emacs-26, for M-x compile, M-x shell or M-x term, for Emacs-27 and Emacs-28 only for M-x term.\n","description":"By default, packages are installed for the default Emacs, i.e., the one behind the emacs command. To pick a different Emacs, set the environment variable EMACS to the command name or executable path of the Emacs to use:\nEMACS=\u0026#34;emacs-26.1\u0026#34; eask command Note that installed dependencies are scoped on the version of Emacs. So when switching between versions you will have to install the dependencies for each:\nEMACS=\u0026#34;emacs-26.3\u0026#34; eask install There are, unfortunately, circumstances under which Emacs itself resets the EMACS variable in a way which conflicts with eask, in which case you can use the environment variable EASK_EMACS instead. Specifically, this problem effects: Emacs-26, for M-x compile, M-x shell or M-x term, for Emacs-27 and Emacs-28 only for M-x term.\n"},{"id":9,"href":"/Getting-Started/Install-Eask/","title":"💾 Install Eask","parent":"Getting Started","content":"This document guides you through the installation of Eask.\nInstall Eask on macOS, Linux, Windows, BSD, and on any machine that can run the Node.js.\n💾 Prebuilt binaries 💾 Using Shell 💾 Package managers 📦 npm (Cross-platform) 📦 Nix (macOS or Linux) 📦 Homebrew (macOS or Linux) 📦 MacPorts (macOS) 📦 Debian (Linux) 📦 Snap (Linux) 📦 Arch (Linux) 📦 Chocolatey (Windows) 📦 Scoop (Windows) 📦 Winget (Windows) 💾 Build from source 🚩 Prerequisite Tools 🏡 Setup (through script) 🏡 Setup (through executable) 💾 Prebuilt binaries Download the appropriate version for your platform from Eask Releases. Once downloaded, the binary can be run from anywhere. You don’t need to install it in a global location. This works well for shared hosts and other systems where you don’t have a privileged account.\nIdeally, you should install it somewhere in your PATH for easy use. /usr/local/bin is the most probable location.\n💾 Using Shell On macOS or Linux:\ncurl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh On Windows:\ncurl.exe -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.bat | cmd /Q 💾 Package managers 📦 npm (Cross-platform) If you have npm installed on your machine, you can install Eask with the following one-liner:\nnpm install -g @emacs-eask/cli 📦 Nix (macOS or Linux) Nix is a free and open-source package manager for macOS and Linux. To install the Eask CLI:\nnix profile install nixpkgs#eask-cli 📦 Homebrew (macOS or Linux) Homebrew is a free and open-source package manager for macOS and Linux. To install the Eask CLI:\nbrew tap emacs-eask/cli https://github.com/emacs-eask/packaging brew install eask-cli 📦 MacPorts (macOS) MacPorts is a free and open-source package manager for macOS. To install the Eask CLI:\nsudo port install eask-cli 📦 Debian (Linux) Derivatives of the Debian distribution of Linux include elementary OS, KDE neon, Linux Lite, Linux Mint, MX Linux, Pop!_OS, Ubuntu, Zorin OS, and others.\nsudo curl -SsL -o /etc/apt/trusted.gpg.d/easksource.gpg https://raw.githubusercontent.com/emacs-eask/packaging/master/debian/KEY.gpg sudo curl -SsL -o /etc/apt/sources.list.d/easksource.list https://raw.githubusercontent.com/emacs-eask/packaging/master/debian/easksource.list sudo apt update --allow-insecure-repositories sudo apt install eask-cli --allow-unauthenticated You can also download Debian packages from the packaging repo.\n📦 Snap (Linux) Snap is a free and open-source package manager for Linux. Available for most distributions, snap packages are simple to install and are automatically updated.\nsudo snap install eask-cli 📦 Arch (Linux) There\u0026rsquo;s a PKGBUILD that builds eask from sources and creates a package, so inside the top directory of the repository you can simply run:\nmakepkg -i 📦 Chocolatey (Windows) If you have Chocolatey installed on your machine, you can install Eask with the following one-liner:\nchoco install eask-cli 📦 Scoop (Windows) Scoop is a free and open-source package manager for Windows. To install the Eask CLI:\nscoop bucket add extras scoop install eask-cli Alternatively, you can use our bucket to access the latest release.\nscoop bucket add emacs-eask/cli https://github.com/emacs-eask/packaging scoop install eask-cli 📦 Winget (Windows) Winget is Microsoft’s official free and open-source package manager for Windows. To install the Eask CLI:\nwinget install eask.cli 💾 Build from source 🚩 Prerequisite Tools Git Node.js npm Alternatively, you can clone it directly from this repo\n# clone the repo git clone https://github.com/emacs-eask/cli eask-cli # change the working directory to eask-cli cd eask-cli # install the requirements npm install 🏡 Setup (through script) You can now run eask using the script bin/eask; add /path/to/eask-cli/bin/ to your environment PATH to execute eask from any location!\nOn Linux/macOS,\nexport PATH=\u0026#34;path/to/eask-cli/bin:$PATH\u0026#34; On Windows,\nset PATH=%PATH%;c:/path/to/eask-cli/bin Once you have set it up correctly, try eask --version then you should see the current eask\u0026rsquo;s version number! 🎉 🎊\n🏡 Setup (through executable) To run eask through executable, you will need pkg installed on your machine.\n# install it locally in the workspace scope npm install --dev # or # install it globally npm install -g pkg Subsequently, run the following command to build the executable. By default, it will generate an executable in the dist folder.\n# build from sources. For available targets see `scripts` in `package.json` npm run pkg-linux-x64 # move `lisp` to `dist` folder mv lisp dist You can now run eask using the executable dist/eask; add /path/to/eask-cli/dist/ to your environment PATH to execute eask from any location! 🎉 🎊\n","description":"This document guides you through the installation of Eask.\nInstall Eask on macOS, Linux, Windows, BSD, and on any machine that can run the Node.js.\n💾 Prebuilt binaries 💾 Using Shell 💾 Package managers 📦 npm (Cross-platform) 📦 Nix (macOS or Linux) 📦 Homebrew (macOS or Linux) 📦 MacPorts (macOS) 📦 Debian (Linux) 📦 Snap (Linux) 📦 Arch (Linux) 📦 Chocolatey (Windows) 📦 Scoop (Windows) 📦 Winget (Windows) 💾 Build from source 🚩 Prerequisite Tools 🏡 Setup (through script) 🏡 Setup (through executable) 💾 Prebuilt binaries Download the appropriate version for your platform from Eask Releases. Once downloaded, the binary can be run from anywhere. You don’t need to install it in a global location. This works well for shared hosts and other systems where you don’t have a privileged account.\n"},{"id":10,"href":"/Examples/Package-Development/","title":"📦 Package Development","parent":"Examples","content":"Eask is the magic file that eask will read it as the init file in Emacs. The syntaxes are similar to the Cask file, but different.\n;; -*- mode: eask; lexical-binding: t -*- (package \u0026#34;your-package\u0026#34; \u0026#34;0.1.0\u0026#34; \u0026#34;Your package description\u0026#34;) (website-url \u0026#34;https://github.com/owner/repo\u0026#34;) (keywords \u0026#34;example\u0026#34; \u0026#34;tool\u0026#34;) (package-file \u0026#34;your-package-file.el\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) (depends-on \u0026#34;dash\u0026#34;) (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;s\u0026#34;) ","description":"Eask is the magic file that eask will read it as the init file in Emacs. The syntaxes are similar to the Cask file, but different.\n;; -*- mode: eask; lexical-binding: t -*- (package \u0026#34;your-package\u0026#34; \u0026#34;0.1.0\u0026#34; \u0026#34;Your package description\u0026#34;) (website-url \u0026#34;https://github.com/owner/repo\u0026#34;) (keywords \u0026#34;example\u0026#34; \u0026#34;tool\u0026#34;) (package-file \u0026#34;your-package-file.el\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) (depends-on \u0026#34;dash\u0026#34;) (depends-on \u0026#34;f\u0026#34;) (depends-on \u0026#34;s\u0026#34;) "},{"id":11,"href":"/DSL/","title":"Domain Specific Language","parent":"","content":"This document provides a reference on the DSL.\n🚩 Package metadata 🔍 package (name version description) 🔍 website-url (url) 🔍 keywords (\u0026amp;rest keywords) 🔍 author (name \u0026amp;optional email) 🔍 license (name) 🚩 Package contents 🔍 package-file (file version description) 🔍 package-descriptor (pkg-file) 🔍 files (\u0026amp;rest patterns) 🚩 Tests 🔍 script (name command \u0026amp;rest args) 🚩 Dependencies 🔍 source (alias) 🔍 source (name url) 🔍 source-priority (name priority) 🔍 depends-on (package-name \u0026amp;optional minimum-version) 🔍 depends-on (package-name \u0026amp;rest recipe) 🔍 development (\u0026amp;rest body) 🔍 load-paths (\u0026amp;rest paths) 🔍 exec-paths (\u0026amp;rest paths) 🚩 Package metadata 🔍 package (name version description) Declare a package with the given name, version, and description:\n(package \u0026#34;ert-runner\u0026#34; \u0026#34;0.7.0\u0026#34; \u0026#34;Opinionated Ert testing workflow\u0026#34;) All arguments are strings. The version must be a version understood by Emacs' built-in version-to-list.\n🔍 website-url (url) Declare the package website.\n(website-url \u0026#34;https://github.com/owner/repo.git\u0026#34;) 🔍 keywords (\u0026amp;rest keywords) Declare package keywords.\n(keywords \u0026#34;tool\u0026#34; \u0026#34;utility\u0026#34; \u0026#34;emacs\u0026#34;) 🔍 author (name \u0026amp;optional email) Declare package\u0026rsquo;s author.\n(author \u0026#34;USER NAME\u0026#34; \u0026#34;user.name@example.com\u0026#34;) 🔍 license (name) Declare package\u0026rsquo;s author.\n(license \u0026#34;GPLv3\u0026#34;) 🚩 Package contents 🔍 package-file (file version description) Define this package and its runtime dependencies from the package headers of a file (used only for package development).\n(package-file \u0026#34;foo.el\u0026#34;) 🔍 package-descriptor (pkg-file) Declare all package metadata directly by specifying a package descriptor contained in file with name given by file.\n(package-descriptor \u0026#34;foo-pkg.el\u0026#34;) 🔍 files (\u0026amp;rest patterns) Specify list of files that are included in this project.\n(files \u0026#34;foo.el\u0026#34;) (files \u0026#34;*.el\u0026#34; \u0026#34;core/*.el\u0026#34;) 🚩 Tests 🔍 script (name command \u0026amp;rest args) Add built-in scripts and their preset life cycle event as well as arbitrary scripts.\n(script \u0026#34;test\u0026#34; \u0026#34;echo This is a test!\u0026#34;) 🚩 Dependencies 🔍 source (alias) 🔍 source (name url) Add a package archive to install dependencies from.\n(source \u0026#34;gnu\u0026#34;) (source \u0026#34;gnu\u0026#34; \u0026#34;https://elpa.gnu.org/packages/\u0026#34;) Available aliases:\ngnu (https://elpa.gnu.org/packages/) nongnu (https://elpa.nongnu.org/nongnu/) celpa (https://celpa.conao3.com/) jcs-elpa (https://jcs-emacs.github.io/jcs-elpa/packages/) marmalade (https://marmalade-repo.org/packages/) melpa (https://melpa.org/packages/) melpa-stable (https://stable.melpa.org/packages/) org (https://orgmode.org/elpa/) shmelpa (https://shmelpa.commandlinesystems.com/packages/) ublt (https://elpa.ubolonton.org/packages/) Available devel aliases:\ngnu-devel (https://elpa.gnu.org/devel/) nongnu-devel (https://elpa.nongnu.org/nongnu-devel/) Note 💡 Use \u0026ndash;insecure to make https to http, but not recommended! 🔍 source-priority (name priority) Set archive priority.\n(source-priority \u0026#34;gnu\u0026#34; 5) 🔍 depends-on (package-name \u0026amp;optional minimum-version) 🔍 depends-on (package-name \u0026amp;rest recipe) Specify a dependency of this package.\nSpecify dependencies that are listed in archives:\n(depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) (depends-on \u0026#34;dash\u0026#34;) (depends-on \u0026#34;company\u0026#34;) Specify dependencies in file format:\n(depends-on \u0026#34;auto-rename-tag\u0026#34; :file \u0026#34;/path/to/auto-rename-tag\u0026#34;) (depends-on \u0026#34;lsp-ui\u0026#34; :file \u0026#34;/path/to/lsp-ui\u0026#34;) Specify dependencies in vc format:\n(depends-on \u0026#34;auto-rename-tag\u0026#34; :vc \u0026#34;jcs-elpa/auto-rename-tag\u0026#34;) (depends-on \u0026#34;lsp-ui\u0026#34; :vc \u0026#34;emacs-lsp/lsp-ui\u0026#34;) Specify dependencies in try format:\n(depends-on \u0026#34;auto-rename-tag\u0026#34; :try \u0026#34;https://raw.githubusercontent.com/emacs-vs/auto-rename-tag/refs/heads/master/auto-rename-tag.el\u0026#34;) (depends-on \u0026#34;lsp-ui\u0026#34; :try) ; Try it, don\u0026#39;t install it. Specify dependencies in recipe format:\n(depends-on \u0026#34;auto-rename-tag\u0026#34; :fetcher \u0026#39;github :repo \u0026#34;jcs-elpa/auto-rename-tag\u0026#34;) (depends-on \u0026#34;lsp-ui\u0026#34; :fetcher \u0026#39;github :repo \u0026#34;emacs-lsp/lsp-ui\u0026#34; :files \u0026#39;(:defaults \u0026#34;lsp-ui-doc.html\u0026#34; \u0026#34;resources\u0026#34;)) Note 💡 Install dependencies with command eask install-deps! 🔍 development (\u0026amp;rest body) Scope all depends-on expressions in body to development.\n(development (depends-on \u0026#34;ert-runner\u0026#34;) (depends-on \u0026#34;elsa\u0026#34;)) Note 💡 You would need to specify the \u0026ndash;dev option for development dependencies! 🔍 load-paths (\u0026amp;rest paths) Specify paths to add to load-path.\n(load-paths \u0026#34;/lisp/\u0026#34;) 🔍 exec-paths (\u0026amp;rest paths) Specify paths to add to exec-path.\n(load-paths \u0026#34;/bin/\u0026#34;) ","description":"This document provides a reference on the DSL.\n🚩 Package metadata 🔍 package (name version description) 🔍 website-url (url) 🔍 keywords (\u0026amp;rest keywords) 🔍 author (name \u0026amp;optional email) 🔍 license (name) 🚩 Package contents 🔍 package-file (file version description) 🔍 package-descriptor (pkg-file) 🔍 files (\u0026amp;rest patterns) 🚩 Tests 🔍 script (name command \u0026amp;rest args) 🚩 Dependencies 🔍 source (alias) 🔍 source (name url) 🔍 source-priority (name priority) 🔍 depends-on (package-name \u0026amp;optional minimum-version) 🔍 depends-on (package-name \u0026amp;rest recipe) 🔍 development (\u0026amp;rest body) 🔍 load-paths (\u0026amp;rest paths) 🔍 exec-paths (\u0026amp;rest paths) 🚩 Package metadata 🔍 package (name version description) Declare a package with the given name, version, and description:\n"},{"id":12,"href":"/Continuous-Integration/GitLab-Runner/","title":"🦊 GitLab Runner","parent":"Continuous Integration","content":" Example to use GitLab runner.\ndefault: before_script: - apt-get update - apt-get install unzip - curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh - export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34; test-26.3: image: silex/emacs:26.3-ci script: - eask clean all - eask package - eask install - eask compile test-27.2: image: silex/emacs:27.2-ci script: - eask clean all - eask package - eask install - eask compile test-28.2: image: silex/emacs:28.2-ci script: - eask clean all - eask package - eask install - eask compile test-29.4: image: silex/emacs:29.4-ci script: - eask clean all - eask package - eask install - eask compile test-30.1: image: silex/emacs:30.1-ci script: - eask clean all - eask package - eask install - eask compile This example is testing your Emacs Lisp package in the below environment;\nOS Emacs Eask Linux (Debian) 26.x, 27.x, 28.x, 29.x, 30.x, snapshot latest macOS n/a latest Windows n/a latest Note 💡 You can generate workflow file via eask generate workflow gitlab, see Commands and options for more information! ","description":" Example to use GitLab runner.\ndefault: before_script: - apt-get update - apt-get install unzip - curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh - export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34; test-26.3: image: silex/emacs:26.3-ci script: - eask clean all - eask package - eask install - eask compile test-27.2: image: silex/emacs:27.2-ci script: - eask clean all - eask package - eask install - eask compile test-28.2: image: silex/emacs:28.2-ci script: - eask clean all - eask package - eask install - eask compile test-29.4: image: silex/emacs:29.4-ci script: - eask clean all - eask package - eask install - eask compile test-30.1: image: silex/emacs:30.1-ci script: - eask clean all - eask package - eask install - eask compile This example is testing your Emacs Lisp package in the below environment;\n"},{"id":13,"href":"/Getting-Started/Basic-Usage/","title":"🔨 Basic Usage","parent":"Getting Started","content":"Eask’s CLI is fully featured but simple to use, even for those who have very limited experience working from the command line.\nThe following is a description of the most common commands you will use while developing your Eask project. See the Commands and options for a comprehensive view of Eask’s CLI.\nOnce you have installed Eask, make sure it is in your PATH. You can test that Eask has been installed correctly via the help command:\neask --help Note 💡 Optionally, you can use --show-hidden to show all available commands and options! The output you see in your console should be similar to the following:\neask is the main command, used to manage your Emacs dependencies Eask is a command-line tool that helps you build, lint, and test Emacs Lisp packages. Usage: eask \u0026lt;command\u0026gt; [options..] Commands: analyze [files..] Run Eask checker archives List out all package archives [aliases: sources] clean \u0026lt;type\u0026gt; Delete various files produced during building compile [names..] Byte-compile `.el\u0026#39; files create \u0026lt;type\u0026gt; Create a new elisp project docker \u0026lt;version\u0026gt; [args..] Launch specified Emacs version in a Docker container docs [names..] Build documentation [aliases: doc] emacs [args..] Execute emacs with the appropriate environment eval [form] Evaluate lisp form with a proper PATH path [patterns..] Print the PATH (exec-path) from workspace [aliases: exec-path] exec [args..] Execute command with correct environment PATH set up files [patterns..] Print all package files format \u0026lt;type\u0026gt; Run formatters [aliases: fmt] generate \u0026lt;type\u0026gt; Generate files that are used for the development info Display information about the current package init [files..] Initialize project to use Eask install-deps Automatically install package dependencies [aliases: install-dependencies, prepare] install-file [files..] Install packages from files, .tar files, or directories install-vc [specs..] Fetch and install packages directly via version control install [names..] Install packages from archives or install from the workspace keywords Display the available keywords for use in the header section link \u0026lt;action\u0026gt; Manage links lint \u0026lt;type\u0026gt; Run linters list List all installed packages in dependency tree form load-path [patterns..] Print the load-path from workspace load [files..] Load elisp files outdated Show all outdated dependencies package-directory Print the path to package directory package [destination] Build a package artifact, and put it into the given destination [aliases: pack] recipe Suggest a recipe format recompile [names..] Byte-recompile `.el\u0026#39; files refresh Download descriptions of all configured package archives reinstall [names..] Reinstall packages from archives run \u0026lt;type\u0026gt; Run custom tasks search [queries..] Search packages from archives status Show the workspace status test \u0026lt;type\u0026gt; Run regression/unit tests uninstall [names..] Uninstall packages from archives [aliases: delete] upgrade [names..] Upgrade packages from archives locate Show the location where Eask is installed upgrade-eask Upgrade Eask itself [aliases: upgrade-self] Proxy Options: --proxy update proxy for HTTP and HTTPS to host [string] --http-proxy update proxy for HTTP to host [string] --https-proxy update proxy for HTTPS to host [string] --no-proxy set no-proxy to host [string] Options: --version output version information and exit [boolean] --help show usage instructions [boolean] --show-hidden Show hidden commands and options [boolean] -g, --global change default workspace to ~/.eask/ [boolean] -c, --config change default workspace to ~/.emacs.d/ [boolean] -a, --all enable all flag [boolean] -q, --quick start cleanly without loading the configuration files [boolean] -f, --force enable force flag [boolean] --debug turn on debug mode [boolean] --strict report error instead of warnings [boolean] --allow-error attempt to continue execution on error [boolean] --insecure allow insecure connection [boolean] --no-color enable/disable color output [boolean] -v, --verbose set verbosity from 0 to 5 [number] For more information, find the manual at https://emacs-eask.github.io/ 🗃️ The eask Command The most common usage is probably to run eask with your current directory being the input directory. Then you run eask followed by a subcommand:\neask info # Print out Eask-file information Notice the subcommand can be nested:\neask clean workspace # Deletes your `.eask` folder Pass in option --help to look up more information regarding the command you are using:\neask clean --help The output, and it shows there are 7 subcommands supported:\nDelete various files produced during building Usage: eask clean \u0026lt;type\u0026gt; [options..] Commands: clean all Do all cleaning tasks [aliases: everything] clean autoloads Remove generated autoloads file clean dist [destination] Delete dist subdirectory [aliases: distribution] clean elc Remove byte compiled files generated by eask compile clean log-file Remove all generated log files clean pkg-file Remove generated pkg-file clean workspace Clean up .eask directory [aliases: .eask] Positionals: \u0026lt;type\u0026gt; type of the cleaning task ... Here is a list of known nested subcommands:\neask create eask clean eask generate eask generate workflow eask link eask lint eask run eask source eask test 📌 Knowing your elpa directory Eask creates an isolated environment, so it won\u0026rsquo;t create any side effects after playing, testing, and running your elisp packages. But it\u0026rsquo;s important to know what elpa directory (you can think of this as your .emacs.d) the current Eask session is pointing to, so you can release the full potential of this tool!\nHere is how Eask works behind the scene in different scenarios:\nName Description Options Path local The default behavior, use Eask as package dev tool n/a ./.eask config Use Eask as your package manager (It can be used as a test tool too) -c or --config ~/.emacs.d global Use Eask as a general tool, it\u0026rsquo;s unrelated to other scopes -g or --global ~/.eask You might think of why these rules are created.\nIt\u0026rsquo;s easy to understand config and local scopes since many other build tools use the local scope to create an isolated environment. The config scope is an additional feature for people who prefer managing their packages with an external tool and not by built-in package.el or config base straight.el, so you can save up startup time to check if packages are installed for your Emacs to operate.\nSo what is the global scope in terms of Eask? Why it\u0026rsquo;s needed?\nEask is more than a build tool now. Several commands don\u0026rsquo;t require their dependencies as package dependencies. For example, the cat command:\neask cat [PATTERNS..] cat is a simple command that mimics Linux\u0026rsquo;s default cat command, but it does the syntax highlighting for you! How it\u0026rsquo;s implemented? The command relies on an external package e2ansi, and this is neither the package nor config dependency (it could be, but let\u0026rsquo;s assume we don\u0026rsquo;t want it).\nHow do we use this command without side effects to your project or personal emacs configuration? The global scope is introduced for this problem. Now we can add any useful commands without worrying your environment got messed up.\nHere is the flowchart describes Eask\u0026rsquo;s lifecycle:\nBy default, Eask uses your current directory as your workspace since most of the time you would just want to operate jobs for your elisp packages.\n","description":"Eask’s CLI is fully featured but simple to use, even for those who have very limited experience working from the command line.\nThe following is a description of the most common commands you will use while developing your Eask project. See the Commands and options for a comprehensive view of Eask’s CLI.\nOnce you have installed Eask, make sure it is in your PATH. You can test that Eask has been installed correctly via the help command:\n"},{"id":14,"href":"/Continuous-Integration/Travis-CI/","title":"📀 Travis CI","parent":"Continuous Integration","content":" Example to use Travis CI.\nlanguage: nix os: - linux - osx env: - EMACS_CI=emacs-26-3 - EMACS_CI=emacs-27-2 - EMACS_CI=emacs-28-2 - EMACS_CI=emacs-29-4 - EMACS_CI=emacs-30-1 - EMACS_CI=emacs-snapshot matrix: fast_finish: true allow_failures: - env: EMACS_CI=emacs-snapshot install: - bash \u0026lt;(curl https://raw.githubusercontent.com/purcell/nix-emacs-ci/master/travis-install) - curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh - export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34; script: - eask package - eask install - eask compile This example is testing your Emacs Lisp package in the below environment;\nOS Emacs Eask Linux (Ubuntu) 26.x, 27.x, 28.x, 29.x, 30.x, snapshot latest macOS n/a latest Windows n/a latest Note 💡 You can generate workflow file via eask generate workflow travis-ci, see Commands and options for more information! ","description":" Example to use Travis CI.\nlanguage: nix os: - linux - osx env: - EMACS_CI=emacs-26-3 - EMACS_CI=emacs-27-2 - EMACS_CI=emacs-28-2 - EMACS_CI=emacs-29-4 - EMACS_CI=emacs-30-1 - EMACS_CI=emacs-snapshot matrix: fast_finish: true allow_failures: - env: EMACS_CI=emacs-snapshot install: - bash \u0026lt;(curl https://raw.githubusercontent.com/purcell/nix-emacs-ci/master/travis-install) - curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh - export PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34; script: - eask package - eask install - eask compile This example is testing your Emacs Lisp package in the below environment;\n"},{"id":15,"href":"/Getting-Started/Commands-and-options/","title":"🚩 Commands and options","parent":"Getting Started","content":" 🚩 Creating 🔍 eask create package 🔍 eask create elpa 🔍 eask create el-project 🚩 Core 🔍 eask init 🔍 eask info 🔍 eask status 🔍 eask install 🔍 eask install-deps 🔍 eask install-file 🔍 eask install-vc 🔍 eask uninstall 🔍 eask reinstall 🔍 eask package 🔍 eask compile 🔍 eask recompile 🔍 eask package-directory 🔍 eask path 🔍 eask load-path 🔍 eask files 🔍 eask recipe 🔍 eask keywords 🔍 eask bump 🔍 eask cat 🔍 eask concat 🔍 eask loc 🚩 Documentation 🔍 eask docs 🚩 Execution 🔍 eask load 🔍 eask exec 🔍 eask emacs 🔍 eask eval 🔍 eask repl 🔍 eask run script 🔍 eask run command 🔍 eask docker 🚩 Management 🔍 eask archives 🔍 eask search 🔍 eask upgrade 🔍 eask list 🔍 eask outdated 🔍 eask refresh 🚩 Generating 🔍 eask generate autoloads 🔍 eask generate pkg-file 🔍 eask generate recipe 🔍 eask generate license 🔍 eask generate ignore 🔍 eask generate test ert 🔍 eask generate test ert-runner 🔍 eask generate test buttercup 🔍 eask generate test ecukes 🔍 eask generate workflow circle-ci 🔍 eask generate workflow github 🔍 eask generate workflow gitlab 🔍 eask generate workflow travis-ci 🚩 Linking 🔍 eask link add 🔍 eask link delete 🔍 eask link list 🚩 Cleaning 🔍 eask clean workspace 🔍 eask clean elc 🔍 eask clean dist 🔍 eask clean autoloads 🔍 eask clean pkg-file 🔍 eask clean log-file 🔍 eask clean all 🚩 Linting 🔍 eask lint package 🔍 eask lint checkdoc 🔍 eask lint elint 🔍 eask lint elisp-lint 🔍 eask lint elsa 🔍 eask lint indent 🔍 eask lint declare 🔍 eask lint regexps 🔍 eask lint keywords 🔍 eask lint license 🔍 eask lint org 🚩 Testing 🔍 eask test activate 🔍 eask test ert 🔍 eask test ert-runner 🔍 eask test buttercup 🔍 eask test ecukes 🔍 eask test melpazoid 🚩 Formatting 🔍 eask format elisp-autofmt 🔍 eask format elfmt 🚩 Control DSL 🔍 eask source add 🔍 eask source delete 🔍 eask source list 🚩 Utilities 🔍 eask upgrade-eask 🔍 eask locate 🚩 Checker 🔍 eask analyze 🚩 Global Options 🔍 \u0026ndash;global, -g 🔍 \u0026ndash;config, -c 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;quick, -q 🔍 \u0026ndash;force, -f 🔍 \u0026ndash;debug 🔍 \u0026ndash;strict 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;insecure 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help 🚩 Proxy Options 🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt; The general syntax of the eask program is:\neask [GLOBAL-OPTIONS] [COMMAND] [COMMAND-OPTIONS] [COMMAND-ARGUMENTS] 🚩 Creating 🔍 eask create package Create a new elisp project with the default Eask-file and CI/CD support.\neask [GLOBAL-OPTIONS] create package \u0026lt;name\u0026gt; Note 💡 The template project is located in https://github.com/emacs-eask/template-elisp 🔍 eask create elpa Create a new ELPA using github-elpa.\neask [GLOBAL-OPTIONS] create elpa \u0026lt;name\u0026gt; Note 💡 The template project is located in https://github.com/emacs-eask/template-elpa 🔍 eask create el-project Create a new project with el-project.\neask [GLOBAL-OPTIONS] create el-project 🚩 Core Often use commands that are uncategorized.\n🔍 eask init Initialize the current directory to start using Eask.\neask [GLOBAL-OPTIONS] init Eask will generate the file like this:\n(package \u0026#34;PACKAGE-NAME\u0026#34; \u0026#34;VERSION\u0026#34; \u0026#34;YOUR PACKAGE SUMMARY\u0026#34;) (website-url \u0026#34;https://example.com/project-url/\u0026#34;) (keywords \u0026#34;KEYWORD1\u0026#34; \u0026#34;KEYWORD2\u0026#34;) (package-file \u0026#34;PACKAGE-FILE\u0026#34;) (script \u0026#34;test\u0026#34; \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34;) (source \u0026#34;gnu\u0026#34;) (depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) [RECOMMENDED] If you already have an elisp project, you can convert the .el file to Eask-file:\neask init --from source /path/to/source.el If you already have a Cask project, you can convert Cask-file to Eask-file:\neask init --from cask /path/to/Cask If you already have a Eldev project, you can convert Eldev-file to Eask-file:\neask init --from eldev /path/to/Eldev If you already have a Keg project, you can convert Keg-file to Eask-file:\neask init --from keg /path/to/Keg Note 💡 See section Examples for more Eask-file examples! 🔍 eask info Show information about the project or configuration.\neask [GLOBAL-OPTIONS] info 🔍 eask status Show the workspace status.\neask [GLOBAL-OPTIONS] status 🔍 eask install To install packages from archives or install from the workspace.\neask [GLOBAL-OPTIONS] install [PACKAGES..] Install packages by specifying arguments:\neask install auto-complete helm magit Or else, it will install the package from the current development:\neask install 🔍 eask install-deps To install all dependencies.\nAlias: install-dependencies, prepare\neask [GLOBAL-OPTIONS] install-deps [--dev] Note 💡 Specify option [\u0026ndash;dev] to install dependencies from the development scope. 🔍 eask install-file Install packages from files, .tar files, or directories.\neask [GLOBAL-OPTIONS] install-file [FILES..] 🔍 eask install-vc Fetch and install packages directly via version control.\neask [GLOBAL-OPTIONS] install-vc [SPECS..] 🔍 eask uninstall To uninstall/delete packages.\neask [GLOBAL-OPTIONS] uninstall [PACKAGES..] Uninstall packages by specifying arguments:\neask uninstall dash f s Or else, it will uninstall the package from the current workspace:\neask uninstall 🔍 eask reinstall To reinstall packages from archives.\neask [GLOBAL-OPTIONS] reinstall [PACKAGES..] 🔍 eask package Build the package artifact.\nAlias: pack\neask package [DESTINATION] If [DESTINATION] is not specified, it will generate to the /dist folder by default.\n🔍 eask compile Byte-compile .el files.\neask compile [FILES..] Compile files by specifying arguments:\neask compile file-1.el file-2.el Or compile files that are already specified in your Eask-file.\neask compile 🔍 eask recompile Byte-recompile .el files.\neask recompile [FILES..] Note 💡 Similar to eask compile, but it will also remove old .elc files before compiling. 🔍 eask package-directory Print the path to package directory, where all dependencies are installed.\neask [GLOBAL-OPTIONS] package-directory 🔍 eask path Print the PATH environment variable of this project.\nAlias: exec-path\neask [GLOBAL-OPTIONS] path [PATTERNS..] Optionally, you can pass in [PATTERNS..] to perform the search.\n🔍 eask load-path Print the load path containing the dependencies of the current project.\neask [GLOBAL-OPTIONS] load-path [PATTERNS..] Optionally, you can pass in [PATTERNS..] to perform the search.\n🔍 eask files Print the list of all package files.\neask [GLOBAL-OPTIONS] files [PATTERNS..] If [PATTERNS..] are defined, it will display files that match that pattern.\n🔍 eask recipe Suggest a recipe format.\neask [GLOBAL-OPTIONS] recipe [FILES..] 🔍 eask keywords Display the available keywords for use in the header section.\neask [GLOBAL-OPTIONS] keywords 🔍 eask bump Bump version for your project and/or Eask-file.\neask [GLOBAL-OPTIONS] bump [LEVELS..] Note 💡 Argument [LEVELS..] accepts major, minor and/or patch! 🔍 eask cat View filename(s).\nThe positional argument [PATTERNS..] is an array of wildcard patterns.\neask [GLOBAL-OPTIONS] cat [PATTERNS..] Note 💡 This command uses the package e2ansi to accomplish the syntax highlighting. 🔍 eask concat Concatenate all Emacs Lisp files into one file.\neask [GLOBAL-OPTIONS] concat [FILES..] 🔍 eask loc Print LOC information.\neask [GLOBAL-OPTIONS] loc [FILES..] 🚩 Documentation Commands used to build documentation site.\n🔍 eask docs Build documentation.\neask [GLOBAL-OPTIONS] docs [NAMES..] 🚩 Execution Commands allow you to execute on top of the Eask core.\nBasically, this allows you to do anything you want!\n🔍 eask load Load Emacs Lisp files in order.\neask [GLOBAL-OPTIONS] load [FILES..] 🔍 eask exec Execute the system command with the given arguments.\neask [GLOBAL-OPTIONS] exec [COMMAND] [ARGUMENTS ...] 🔍 eask emacs Execute emacs with the appropriate environment.\neask [GLOBAL-OPTIONS] emacs [ARGUMENTS ...] 🔍 eask eval Evaluate FORM as a lisp form.\neask [GLOBAL-OPTIONS] eval [FORM] 🔍 eask repl Start an Elisp REPL.\neask [GLOBAL-OPTIONS] repl [FILES..] Alias: ielm\n🔍 eask run script Run the script.\neask [GLOBAL-OPTIONS] run script [NAMES..] 🔍 eask run command Run the command.\nAlias: cmd\neask [GLOBAL-OPTIONS] run command [NAMES..] 🔍 eask docker Launch specified Emacs version in a Docker container.\neask [GLOBAL-OPTIONS] docker \u0026lt;VERSION\u0026gt; [ARGUMENTS ...] For example:\neask docker 26.1 info This is the same as jumping right into Emacs 26.1 (in docker) and executing eask info.\n🚩 Management Commands that help you manage your package\u0026rsquo;s dependencies.\n🔍 eask archives List out all package archives.\neask [GLOBAL-OPTIONS] archives 🔍 eask search Search packages from archives.\neask [GLOBAL-OPTIONS] search [QUEIRES..] 🔍 eask upgrade Upgrade all packages from archives.\neask [GLOBAL-OPTIONS] upgrade 🔍 eask list List all installed packages in dependency tree form.\neask [GLOBAL-OPTIONS] list [--depth] 🔍 eask outdated List out all outdated packages.\neask [GLOBAL-OPTIONS] outdated [--depth] 🔍 eask refresh Download descriptions of all configured package archives.\neask [GLOBAL-OPTIONS] refresh 🚩 Generating Generate files that are used for the development.\n🔍 eask generate autoloads Generate the autoload file.\nWrite a package autoloads to project-autoloads.el in the project root.\neask [GLOBAL-OPTIONS] generate autoloads project is the project name, as declared in Eask-file. See Multi-file Packages (elisp) for details.\n🔍 eask generate pkg-file Generate the pkg file.\nWrite a package descriptor file to project-pkg.el in the project root.\nAlias: pkg, pkg-el\neask [GLOBAL-OPTIONS] generate pkg-file project is the project name, as declared in Eask-file. See Multi-file Packages (elisp) for details.\n🔍 eask generate recipe Generate the recipe file.\neask [GLOBAL-OPTIONS] generate recipe [DESTINATION] If [DESTINATION] is not specified, it will generate to the /recipes folder by default.\n🔍 eask generate license Generate a LICENSE file.\neask [GLOBAL-OPTIONS] generate license \u0026lt;name\u0026gt; name is the type of the license, see https://api.github.com/licenses for all the choices.\nNote 💡 This command uses the package license-templates to generate ignore file. 🔍 eask generate ignore Generate an ignore file.\neask [GLOBAL-OPTIONS] generate ignore \u0026lt;name\u0026gt; Note 💡 This command uses the package gitignore-templates to generate ignore file. 🔍 eask generate test ert Create a new test project for the ert tests.\neask [GLOBAL-OPTIONS] generate test ert [NAMES..] 🔍 eask generate test ert-runner Create a new test project for the ert-runner.\neask [GLOBAL-OPTIONS] generate test ert-runner [NAMES..] 🔍 eask generate test buttercup Create a new Buttercup setup for the project.\neask [GLOBAL-OPTIONS] generate test buttercup 🔍 eask generate test ecukes Create a new Ecukes setup for the project.\neask [GLOBAL-OPTIONS] generate test ecukes 🔍 eask generate workflow circle-ci Generate the CircleCI workflow yaml file.\nThe default filename is config.yml.\neask [GLOBAL-OPTIONS] generate workflow circle-ci [--file] This will generate the yaml file under .circleci/!\n🔍 eask generate workflow github Generate the GitHub Actions workflow yaml file.\nThe default filename is test.yml.\neask [GLOBAL-OPTIONS] generate workflow github [--file] This will generate the yaml file under .github/workflow/!\n🔍 eask generate workflow gitlab Generate the GitLab Runner workflow yaml file.\nThe default filename is .gitlab-ci.yml.\neask [GLOBAL-OPTIONS] generate workflow gitlab [--file] 🔍 eask generate workflow travis-ci Generate the Travis CI workflow yaml file.\nThe default filename is .travis.yml.\neask [GLOBAL-OPTIONS] generate workflow travis-ci [--file] 🚩 Linking Link between this package and a dependency on the local filesystem. A linked dependency avoids the need to download a dependency from a remote archive. The package linked to must either have a Eask-file or a -pkg.el-file.\n🔍 eask link add Links the given source directory into the package directory of this project, under the given package name.\neask [GLOBAL-OPTIONS] link add \u0026lt;NAME\u0026gt; \u0026lt;PATH\u0026gt; 🔍 eask link delete Delete locally linked packages.\nAlias: remove\neask [GLOBAL-OPTIONS] link delete [NAMES..] 🔍 eask link list List all links.\neask [GLOBAL-OPTIONS] link list 🚩 Cleaning Delete various files produced during building.\n🔍 eask clean workspace Delete the .eask from the current workspace.\nAlias: .eask\neask [GLOBAL-OPTIONS] clean workspace ⛔️ Don\u0026rsquo;t specify the option --config, -c, or else it will delete your entire ~/.emacs.d.\neask clean workspace -g 🔍 eask clean elc Delete all .elc files. This would respect to your Eask file.\neask [GLOBAL-OPTIONS] clean elc 🔍 eask clean dist Delete the dist directory where the build output is stored.\nAlias: distribution\neask [GLOBAL-OPTIONS] clean dist 🔍 eask clean autoloads Remove the generated autoloads file.\neask [GLOBAL-OPTIONS] clean autoloads 🔍 eask clean pkg-file Remove the generated pkg-file.\neask [GLOBAL-OPTIONS] clean pkg-file 🔍 eask clean log-file Remove all generated log files.\neask [GLOBAL-OPTIONS] clean log-file 🔍 eask clean all This command is the combination of all other clean commands.\nclean workspace clean elc clean dist clean autoloads clean pkg-file clean log-file Alias: everything\neask [GLOBAL-OPTIONS] clean all 🚩 Linting Commands that lint your Emacs package.\n🔍 eask lint package Run package-lint.\neask [GLOBAL-OPTIONS] lint package [FILES..] 🔍 eask lint checkdoc Run checkdoc (built-in).\neask [GLOBAL-OPTIONS] lint checkdoc [FILES..] 🔍 eask lint elint Run elint (built-in).\neask [GLOBAL-OPTIONS] lint elint [FILES..] 🔍 eask lint elisp-lint Run elisp-lint.\neask [GLOBAL-OPTIONS] lint elisp-lint [FILES..] This does respect the .dir-locals.el file! 🎉\n🔍 eask lint elsa Run elsa.\neask [GLOBAL-OPTIONS] lint lint elsa [FILES..] 🔍 eask lint indent Run indent-lint.\neask [GLOBAL-OPTIONS] lint indent [FILES..] 🔍 eask lint declare Run check-declare (built-in).\neask [GLOBAL-OPTIONS] lint declare [FILES..] 🔍 eask lint regexps Run relint.\nAlias: lint relint\neask [GLOBAL-OPTIONS] lint regexps [FILES..] 🔍 eask lint keywords Run keywords checker (built-in).\neask [GLOBAL-OPTIONS] lint keywords 🔍 eask lint license Run license check.\neask [GLOBAL-OPTIONS] lint license 🔍 eask lint org Run org-lint on Org files.\neask [GLOBAL-OPTIONS] lint org 🚩 Testing Run regression/unit tests.\n🔍 eask test activate Activate package; use to test the package activation\neask [GLOBAL-OPTIONS] activate [FILES..] Note 💡 You can pass in [FILES..] so you can test your package activation fully!\n[FILES..] will be loaded after the package is activated.\n🔍 eask test ert Run ert tests.\neask [GLOBAL-OPTIONS] test ert [FILES..] 🔍 eask test ert-runner Run ert test using ert-runner.\neask [GLOBAL-OPTIONS] test ert-runner 🔍 eask test buttercup Run buttercup tests.\neask [GLOBAL-OPTIONS] test buttercup 🔍 eask test ecukes Run ecukes tests.\neask [GLOBAL-OPTIONS] test ecukes [FILES..] 🔍 eask test melpazoid Run melpazoid tests.\neask [GLOBAL-OPTIONS] test melpazoid [DIRECTORIES..] Note 💡 If [DIRECTORIES..] is not passed in; it will use the current workspace instead. 🚩 Formatting Commands that formats your Emacs source files.\n🔍 eask format elisp-autofmt Run elisp-autofmt formatter.\neask [GLOBAL-OPTIONS] format elisp-autofmt [FILES..] 🔍 eask format elfmt Run elfmt formatter.\neask [GLOBAL-OPTIONS] format elfmt [FILES..] 🚩 Control DSL List of commands that control DSL.\n🔍 eask source add Add an archive source.\neask [GLOBAL-OPTIONS] source add \u0026lt;NAME\u0026gt; [URL] 🔍 eask source delete Remove an archive source.\nAlias: remove\neask [GLOBAL-OPTIONS] source delete \u0026lt;NAME\u0026gt; 🔍 eask source list List all source information.\neask [GLOBAL-OPTIONS] source list Note 💡 This command is the same as eask archives! 🚩 Utilities Other helper commands.\n🔍 eask upgrade-eask Upgrade Eask to the latest version.\nAlias: upgrade-self\neask [GLOBAL-OPTIONS] upgrade-eask Note 💡 This will only work if you install it from the source! 🔍 eask locate Show the location where Eask is installed.\neask [GLOBAL-OPTIONS] locate 🚩 Checker Commands to check your Eask-file.\n🔍 eask analyze Lint an Eask-file.\neask [GLOBAL-OPTIONS] analyze [FILES..] Example:\n# lint all Eask-files in the current directory and subdirectories eask analyze # lint specific files eask analyze Eask Eask.27 # lint all Eask-files in specified directory and subdirectories eask analyze src/ # print result as JSON eask analyze --json For more detail, run eask analyze --help.\n🚩 Global Options The following options are available on all Eask commands:\n🔍 \u0026ndash;global, -g This will use ~/.eask/ instead of the package development environment.\nThis is used for other tasks. e.g., cat, etc.\neask -g [COMMAND] 🔍 \u0026ndash;config, -c This will use ~/.emacs.d/ instead of the package development environment.\nThis is used for doing stuff for your Emacs configuration. e.g., package management, etc.\neask -c [COMMAND] 🔍 \u0026ndash;all, -a Enable the all flag.\neask -a [COMMAND] 🔍 \u0026ndash;quick, -q Start cleanly without loading the configuration files.\neask -q [COMMAND] 🔍 \u0026ndash;force, -f Force command\u0026rsquo;s execution.\nForce to uninstall the package dash even it\u0026rsquo;s a dependency from another packages.\neask -f [COMMAND] 🔍 \u0026ndash;debug Enable debug information.\nThis is equivalent to:\n(setq debug-on-error t) 🔍 \u0026ndash;strict Trigger error instead of warnings.\nFor instance, in eask compile:\n(setq byte-compile-error-on-warn t) 🔍 \u0026ndash;allow-error Continue the execution without killing the Emacs.\n🔍 \u0026ndash;insecure Connect archives with HTTP instead of HTTPS.\n🔍 \u0026ndash;timestamps Enable/Disable timestamps.\n🔍 \u0026ndash;log-level Enable/Disable log header.\n🔍 \u0026ndash;log-file, \u0026ndash;lf Weather to generate log files.\n🔍 \u0026ndash;no-color Disable color output.\n🔍 \u0026ndash;elapsed-time, \u0026ndash;et Show elapsed time between each operation.\n🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; Set verbosity from 0 to 5.\neask --verbose 4 [COMMAND] 🔍 \u0026ndash;version Show version number.\n🔍 \u0026ndash;help Show help.\n🚩 Proxy Options 🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt; Set Emacs proxy for HTTP and HTTPS:\neask --proxy \u0026#34;localhost:8888\u0026#34; [COMMAND] 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt; Set Emacs proxy for HTTP only.\n🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt; Set Emacs proxy for HTTPS only.\n🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt; Do not use a proxy for any URL matching pattern.\n\u0026lt;pattern\u0026gt;is an Emacs regular expression.\n","description":" 🚩 Creating 🔍 eask create package 🔍 eask create elpa 🔍 eask create el-project 🚩 Core 🔍 eask init 🔍 eask info 🔍 eask status 🔍 eask install 🔍 eask install-deps 🔍 eask install-file 🔍 eask install-vc 🔍 eask uninstall 🔍 eask reinstall 🔍 eask package 🔍 eask compile 🔍 eask recompile 🔍 eask package-directory 🔍 eask path 🔍 eask load-path 🔍 eask files 🔍 eask recipe 🔍 eask keywords 🔍 eask bump 🔍 eask cat 🔍 eask concat 🔍 eask loc 🚩 Documentation 🔍 eask docs 🚩 Execution 🔍 eask load 🔍 eask exec 🔍 eask emacs 🔍 eask eval 🔍 eask repl 🔍 eask run script 🔍 eask run command 🔍 eask docker 🚩 Management 🔍 eask archives 🔍 eask search 🔍 eask upgrade 🔍 eask list 🔍 eask outdated 🔍 eask refresh 🚩 Generating 🔍 eask generate autoloads 🔍 eask generate pkg-file 🔍 eask generate recipe 🔍 eask generate license 🔍 eask generate ignore 🔍 eask generate test ert 🔍 eask generate test ert-runner 🔍 eask generate test buttercup 🔍 eask generate test ecukes 🔍 eask generate workflow circle-ci 🔍 eask generate workflow github 🔍 eask generate workflow gitlab 🔍 eask generate workflow travis-ci 🚩 Linking 🔍 eask link add 🔍 eask link delete 🔍 eask link list 🚩 Cleaning 🔍 eask clean workspace 🔍 eask clean elc 🔍 eask clean dist 🔍 eask clean autoloads 🔍 eask clean pkg-file 🔍 eask clean log-file 🔍 eask clean all 🚩 Linting 🔍 eask lint package 🔍 eask lint checkdoc 🔍 eask lint elint 🔍 eask lint elisp-lint 🔍 eask lint elsa 🔍 eask lint indent 🔍 eask lint declare 🔍 eask lint regexps 🔍 eask lint keywords 🔍 eask lint license 🔍 eask lint org 🚩 Testing 🔍 eask test activate 🔍 eask test ert 🔍 eask test ert-runner 🔍 eask test buttercup 🔍 eask test ecukes 🔍 eask test melpazoid 🚩 Formatting 🔍 eask format elisp-autofmt 🔍 eask format elfmt 🚩 Control DSL 🔍 eask source add 🔍 eask source delete 🔍 eask source list 🚩 Utilities 🔍 eask upgrade-eask 🔍 eask locate 🚩 Checker 🔍 eask analyze 🚩 Global Options 🔍 \u0026ndash;global, -g 🔍 \u0026ndash;config, -c 🔍 \u0026ndash;all, -a 🔍 \u0026ndash;quick, -q 🔍 \u0026ndash;force, -f 🔍 \u0026ndash;debug 🔍 \u0026ndash;strict 🔍 \u0026ndash;allow-error 🔍 \u0026ndash;insecure 🔍 \u0026ndash;timestamps 🔍 \u0026ndash;log-level 🔍 \u0026ndash;log-file, \u0026ndash;lf 🔍 \u0026ndash;no-color 🔍 \u0026ndash;elapsed-time, \u0026ndash;et 🔍 \u0026ndash;verbose, -v \u0026lt;integer\u0026gt; 🔍 \u0026ndash;version 🔍 \u0026ndash;help 🚩 Proxy Options 🔍 \u0026ndash;proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;http-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;https-proxy \u0026lt;proxy\u0026gt; 🔍 \u0026ndash;no-proxy \u0026lt;pattern\u0026gt; The general syntax of the eask program is:\n"},{"id":16,"href":"/Examples/","title":"Examples","parent":"","content":"","description":""},{"id":17,"href":"/Getting-Started/Directory-Structure/","title":"🏗️ Directory Structure","parent":"Getting Started","content":" 📂 Directory Structure Explained Running the eask create package generator from the command-line will create a directory with the following structure:\n. ├── .gitignore ├── Makefile ├── Eask ├── README.md └── {package-file}.el 📂 Directory Structure Explained The following is a high-level overview of each of the files.\n.gitignore\nGitignore file, to ignore files you don\u0026rsquo;t like to include from your repository. By default, it already excludes files and directories that are generated by Eask.\nMakefile\nMakefile that has already included basic tests for your package. It now has the following tasks be default:\nTest build (packaging + installing) Test byte-compile Test checkdoc (style checker) Test lint (package linter) README.md\nThe generated document file. This is used to display the main page from your repository.\n{package-file}.el\nThis is the main package file; where you should write your elisp code. If you attempt to create a multiple-file package; you would need to edit the Eask-file accordingly.\n","description":" 📂 Directory Structure Explained Running the eask create package generator from the command-line will create a directory with the following structure:\n. ├── .gitignore ├── Makefile ├── Eask ├── README.md └── {package-file}.el 📂 Directory Structure Explained The following is a high-level overview of each of the files.\n"},{"id":18,"href":"/Examples/Real-project-examples/","title":"⚖️ Real project examples","parent":"Examples","content":"These are some projects and configurations using Eask:\n🧾 Configuration 📦 Packages 📂 ELPA 🧾 Configuration jcs-emacs 📦 Packages auto-highlight-symbol dashboard flycheck-languagetool grammarly popup-el line-reminder lsp-mode 📂 ELPA jcs-elpa ","description":"These are some projects and configurations using Eask:\n🧾 Configuration 📦 Packages 📂 ELPA 🧾 Configuration jcs-emacs 📦 Packages auto-highlight-symbol dashboard flycheck-languagetool grammarly popup-el line-reminder lsp-mode 📂 ELPA jcs-elpa "},{"id":19,"href":"/Continuous-Integration/CircleCI/","title":"💠 CircleCI","parent":"Continuous Integration","content":" Example to use Circle CI.\nversion: 2.1 orbs: win: circleci/windows@2.2.0 # Default actions to perform on each Emacs version commands: setup-linux: steps: - checkout - run: name: Install unzip command: apt-get update \u0026amp;\u0026amp; apt-get install unzip - run: name: Install Eask command: curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh setup-macos: steps: - checkout - run: name: Install Emacs latest command: | echo \u0026#34;HOMEBREW_NO_AUTO_UPDATE=1\u0026#34; \u0026gt;\u0026gt; $BASH_ENV brew install homebrew/cask/emacs - run: name: Install unzip command: apt-get update \u0026amp;\u0026amp; apt-get install unzip - run: name: Install Eask command: curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh setup-windows: steps: - checkout - run: name: Install Eask command: url.exe -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.bat | cmd /Q test: steps: - run: name: Run regression tests command: eldev -dtT -p test lint: steps: - run: name: Run Elisp-lint command: eldev lint - run: name: Byte-compile `.el\u0026#39; files command: eldev -dtT compile --warnings-as-errors jobs: test-ubuntu-emacs-26: docker: - image: silex/emacs:26-ci entrypoint: bash steps: - setup-linux - test test-ubuntu-emacs-27: docker: - image: silex/emacs:27-ci entrypoint: bash steps: - setup-linux - test test-ubuntu-emacs-28: docker: - image: silex/emacs:28-ci entrypoint: bash steps: - setup-linux - test test-ubuntu-emacs-29: docker: - image: silex/emacs:29-ci entrypoint: bash steps: - setup-linux - test test-ubuntu-emacs-30: docker: - image: silex/emacs:30-ci entrypoint: bash steps: - setup-linux - test test-ubuntu-emacs-master: docker: - image: silex/emacs:master-ci entrypoint: bash steps: - setup-linux - test test-macos-emacs-latest: macos: xcode: \u0026#34;14.0.0\u0026#34; steps: - setup-macos - test test-windows-emacs-latest: executor: win/default steps: - run: name: Install Emacs latest command: | choco install emacs - setup-windows - test workflows: version: 2 ci-test-matrix: jobs: - test-ubuntu-emacs-26 - test-ubuntu-emacs-27 - test-ubuntu-emacs-28 - test-ubuntu-emacs-29 - test-ubuntu-emacs-30 - test-ubuntu-emacs-master - test-macos-emacs-latest - test-windows-emacs-latest This example is testing your Emacs Lisp package in the below environment;\nOS Emacs Eask Linux (Ubuntu) 26.x, 27.x, 28.x, 29.x, 30.x, snapshot latest macOS snapshot latest Windows snapshot latest Note 💡 You can generate workflow file via eask generate workflow circle-ci, see Commands and options for more information! ","description":" Example to use Circle CI.\nversion: 2.1 orbs: win: circleci/windows@2.2.0 # Default actions to perform on each Emacs version commands: setup-linux: steps: - checkout - run: name: Install unzip command: apt-get update \u0026amp;\u0026amp; apt-get install unzip - run: name: Install Eask command: curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh setup-macos: steps: - checkout - run: name: Install Emacs latest command: | echo \u0026#34;HOMEBREW_NO_AUTO_UPDATE=1\u0026#34; \u0026gt;\u0026gt; $BASH_ENV brew install homebrew/cask/emacs - run: name: Install unzip command: apt-get update \u0026amp;\u0026amp; apt-get install unzip - run: name: Install Eask command: curl -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.sh | sh setup-windows: steps: - checkout - run: name: Install Eask command: url.exe -fsSL https://raw.githubusercontent.com/emacs-eask/cli/master/webinstall/install.bat | cmd /Q test: steps: - run: name: Run regression tests command: eldev -dtT -p test lint: steps: - run: name: Run Elisp-lint command: eldev lint - run: name: Byte-compile `.el\u0026#39; files command: eldev -dtT compile --warnings-as-errors jobs: test-ubuntu-emacs-26: docker: - image: silex/emacs:26-ci entrypoint: bash steps: - setup-linux - test test-ubuntu-emacs-27: docker: - image: silex/emacs:27-ci entrypoint: bash steps: - setup-linux - test test-ubuntu-emacs-28: docker: - image: silex/emacs:28-ci entrypoint: bash steps: - setup-linux - test test-ubuntu-emacs-29: docker: - image: silex/emacs:29-ci entrypoint: bash steps: - setup-linux - test test-ubuntu-emacs-30: docker: - image: silex/emacs:30-ci entrypoint: bash steps: - setup-linux - test test-ubuntu-emacs-master: docker: - image: silex/emacs:master-ci entrypoint: bash steps: - setup-linux - test test-macos-emacs-latest: macos: xcode: \u0026#34;14.0.0\u0026#34; steps: - setup-macos - test test-windows-emacs-latest: executor: win/default steps: - run: name: Install Emacs latest command: | choco install emacs - setup-windows - test workflows: version: 2 ci-test-matrix: jobs: - test-ubuntu-emacs-26 - test-ubuntu-emacs-27 - test-ubuntu-emacs-28 - test-ubuntu-emacs-29 - test-ubuntu-emacs-30 - test-ubuntu-emacs-master - test-macos-emacs-latest - test-windows-emacs-latest This example is testing your Emacs Lisp package in the below environment;\n"},{"id":20,"href":"/Getting-Started/Advanced-Usage/","title":"🔧 Advanced Usage","parent":"Getting Started","content":" 🪝 Hooks 📇 Adding your own command Eask is just a regular Emacs Lisp file and should be read from Emacs itself! You can do:\n; Regular Eask file content... (setq byte-compile-error-on-warn t) ; Signal error if warning occurred 🪝 Hooks eask provides some hooks which enable you to execute code before and after each command. The hooks look like so:\neask-before-COMMAND-hook eask-after-COMMAND-hook For example, to consider warnings as errors when byte-compiling with the command eask compile:\n(add-hook \u0026#39;eask-before-compile-hook (lambda () (setq byte-compile-error-on-warn t))) This is also equivalent to option --strict:\neask compile [FILES..] --strict Or hooks that run on every command:\neask-before-command-hook eask-after-command-hook (add-hook \u0026#39;eask-before-command-hook (lambda () (message \u0026#34;%s\u0026#34; (eask-command)))) ; print the current command For subcommands that contain spaces, will concatenate with /:\neask lint checkdoc # lint/checkdoc eask generate license # generate/license therefore,\n(add-hook \u0026#39;eask-before-lint/checkdoc-hook (lambda () ;; do stuff before checkdoc linting... )) 📇 Adding your own command You can add your own command through our command interface:\n(eask-defcommand my-test-command \u0026#34;A test command that prints out useless message.\u0026#34; (message \u0026#34;This is a test command!\u0026#34;)) ","description":" 🪝 Hooks 📇 Adding your own command Eask is just a regular Emacs Lisp file and should be read from Emacs itself! You can do:\n; Regular Eask file content... (setq byte-compile-error-on-warn t) ; Signal error if warning occurred 🪝 Hooks eask provides some hooks which enable you to execute code before and after each command. The hooks look like so:\n"},{"id":21,"href":"/Continuous-Integration/","title":"Continuous Integration","parent":"","content":"","description":""},{"id":22,"href":"/Contributing/","title":"Contributing","parent":"","content":"","description":""},{"id":23,"href":"/Development-API/","title":"Development API","parent":"","content":"This document provides a reference to the public Eask API, which you may use in your projects and extensions to Eask.\n🚩 Entry Point 🔍 Snippet: _prepare.el 🔍 Macro: eask-start (\u0026amp;rest body) 🚩 Environment 🔍 Variable: eask-has-colors 🔍 Variable: eask-homedir 🔍 Variable: eask-userdir 🔍 Variable: eask-package-sys-dir 🔍 Variable: eask-invocation 🔍 Variable: eask-is-pkg 🔍 Variable: eask-rest 🔍 Function: eask-rest () 🚩 Core 🔍 Variable: eask-lisp-root 🔍 Function: eask-working-directory () 🔍 Function: eask-command () 🔍 Function: eask-command-check (version) 🔍 Function: eask-command-p (commands) 🔍 Function: eask-special-p () 🔍 Function: eask-execution-p () 🔍 Function: eask-checker-p () 🔍 Function: eask-script (script) 🔍 Function: eask-load (script) 🔍 Function: eask-call (script) 🔍 Function: eask-import (url) 🔍 Macro: eask-defvc\u0026lt; (version \u0026amp;rest body) 🔍 Macro: eask\u0026ndash;silent (\u0026amp;rest body) 🔍 Macro: eask\u0026ndash;unsilent (\u0026amp;rest body) 🔍 Function: eask-dependencies () 🔍 Function: eask-pkg-init (\u0026amp;optional force) 🔍 Macro: eask-with-archives (archives \u0026amp;rest body) 🔍 Function: eask-archive-install-packages (archives \u0026amp;rest names) 🔍 Function: eask-package-desc (name \u0026amp;optional current) 🔍 Function: eask-argv (index) 🔍 Function: eask-args () 🔍 Variable: eask-file 🔍 Variable: eask-file-root 🔍 Function: eask\u0026ndash;match-file (name) 🔍 Function: eask\u0026ndash;all-files (\u0026amp;optional dir) 🔍 Function: eask\u0026ndash;find-files (start-path) 🔍 Function: eask-file-try-load (start-path) 🔍 Function: eask-network-insecure-p () 🚩 Flags 🔍 Function: eask-global-p () 🔍 Function: eask-config-p () 🔍 Function: eask-local-p () 🔍 Function: eask-all-p () 🔍 Function: eask-quick-p () 🔍 Function: eask-force-p () 🔍 Function: eask-dev-p () 🔍 Function: eask-debug-p () 🔍 Function: eask-strict-p () 🔍 Function: eask-timestamps-p () 🔍 Function: eask-log-level-p () 🔍 Function: eask-log-file-p () 🔍 Function: eask-no-color-p () 🔍 Function: eask-allow-error-p () 🔍 Function: eask-insecure-p () 🔍 Function: eask-proxy () 🔍 Function: eask-http-proxy () 🔍 Function: eask-https-proxy () 🔍 Function: eask-no-proxy () 🔍 Function: eask-destination () 🔍 Function: eask-depth () 🔍 Function: eask-verbose () 🚩 Eask-file 🔍 Variable: eask-package 🔍 Variable: eask-package-file 🔍 Variable: eask-package-desc 🔍 Variable: eask-files 🔍 Variable: eask-scripts 🔍 Variable: eask-depends-on-emacs 🔍 Variable: eask-depends-on 🔍 Variable: eask-depends-on-dev 🔍 Function: eask-f-package (name version description) 🔍 Function: eask-f-website-url (url) 🔍 Function: eask-f-keywords (\u0026amp;rest keywords) 🔍 Function: eask-f-author (name \u0026amp;optional email) 🔍 Function: eask-f-license (name) 🔍 Function: eask-f-package-file (file) 🔍 Function: eask-f-files (pkg \u0026amp;rest args) 🔍 Function: eask-f-script (name command \u0026amp;rest args) 🔍 Function: eask-f-source (name \u0026amp;optional location) 🔍 Function: eask-f-source-priority (name \u0026amp;optional priority) 🔍 Function: eask-f-depends-on (pkg \u0026amp;rest args) 🔍 Function: eask-f-development (\u0026amp;rest dependencies) 🔍 Function: eask-f-exec-paths (\u0026amp;rest dirs) 🔍 Function: eask-f-load-paths (\u0026amp;rest dirs) 🚩 Logging 🔍 Variable: eask-verbosity 🔍 Variable: eask-timestamps 🔍 Variable: eask-log-level 🔍 Variable: eask-log-file 🔍 Variable: eask-level-color 🔍 Function: eask-reach-verbosity-p (symbol) 🔍 Macro: eask-with-verbosity (symbol \u0026amp;rest body) 🔍 Macro: eask-with-verbosity-override (symbol \u0026amp;rest body) 🔍 Function: eask-debug (msg \u0026amp;rest args) 🔍 Function: eask-log (msg \u0026amp;rest args) 🔍 Function: eask-info (msg \u0026amp;rest args) 🔍 Function: eask-warn (msg \u0026amp;rest args) 🔍 Function: eask-error (msg \u0026amp;rest args) 🔍 Function: eask-print (msg \u0026amp;rest args) 🔍 Function: eask-println (msg \u0026amp;rest args) 🔍 Function: eask-msg (msg \u0026amp;rest args) 🔍 Function: eask-write (msg \u0026amp;rest args) 🔍 Function: eask-report (\u0026amp;rest args) 🚩 Exit Code 🔍 Variable: eask\u0026ndash;exit-code 🔍 Function: eask-exit-code (\u0026amp;optional key) 🔍 Function: eask\u0026ndash;exit (\u0026amp;optional exit-code \u0026amp;rest _) 🚩 Error Handling 🔍 Variable: eask\u0026ndash;ignore-error-p 🔍 Variable: eask-inhibit-error-message 🔍 Macro: eask-ignore-errors (\u0026amp;rest body) 🔍 Macro: eask\u0026ndash;silent-error (\u0026amp;rest body) 🔍 Macro: eask-ignore-errors-silent (\u0026amp;rest body) 🚩 File 🔍 Function: eask-package-files () 🔍 Function: eask-package-el-files () 🔍 Function: eask-package-elc-files () 🔍 Function: eask-package-multi-p () 🔍 Function: eask-package-single-p () 🔍 Function: eask-unpacked-size () 🚩 Progress 🔍 Macro: eask-with-progress (msg-start body msg-end) 🔍 Function: eask-print-log-buffer (\u0026amp;optional buffer-or-name) 🚩 Help 🔍 Function: eask-help (command \u0026amp;optional print-or-exit-code) 🚩 Utilities 🔍 Function: eask-guess-package-name () 🔍 Function: eask-guess-entry-point () 🚩 Entry Point 🔍 Snippet: _prepare.el Load lisp/_prepare.el to start using other Eask API.\n(let ((dir (file-name-directory (nth 1 (member \u0026#34;-scriptload\u0026#34; command-line-args))))) (load (expand-file-name \u0026#34;_prepare.el\u0026#34; (locate-dominating-file dir \u0026#34;_prepare.el\u0026#34;)) nil t)) Each Elisp scripts should have this snippet at the very top of the file.\n🔍 Macro: eask-start (\u0026amp;rest body) Command entry point. Each command file should contain this macro somewhere in the file.\n(eask-start ;; TODO: design your command here! ) 🚩 Environment 🔍 Variable: eask-has-colors Return non-nil if the terminal supports colors.\n(when eask-has-colors ... 🔍 Variable: eask-homedir Eask\u0026rsquo;s home directory path.\n(message \u0026#34;%s\u0026#34; eask-homedir) ; ~/.eask/ 🔍 Variable: eask-userdir Eask\u0026rsquo;s user directory path.\n(message \u0026#34;%s\u0026#34; eask-userdir) ; ~/ 🔍 Variable: eask-package-sys-dir Eask global elpa directory; it will be treated as the system-wide packages.\n(message \u0026#34;%s\u0026#34; eask-package-sys-dir) ; ~/.eask/30.1/elpa/ 🔍 Variable: eask-invocation Eask\u0026rsquo;s invocation program path.\n(message \u0026#34;%s\u0026#34; eask-invocation) It could be the node executable or the eask executable itself.\n🔍 Variable: eask-is-pkg Return non-nil if Eask is packaged.\n(when eask-is-pkg ... 🔍 Variable: eask-rest Eask\u0026rsquo;s arguments after command separator `\u0026ndash;\u0026rsquo;; return a list.\neask \u0026lt;command\u0026gt; -- args0 args1 Output:\n(message \u0026#34;%s\u0026#34; eask-rest) ; \u0026#39;(args0 args1) 🔍 Function: eask-rest () Eask\u0026rsquo;s arguments after command separator `\u0026ndash;\u0026rsquo;; return a string.\neask \u0026lt;command\u0026gt; -- args0 args1 Output:\n(message \u0026#34;%s\u0026#34; (eask-rest)) ; \u0026#34;args0 args1\u0026#34; 🚩 Core 🔍 Variable: eask-lisp-root Points to lisp directory from the project root.\n(message \u0026#34;%s\u0026#34; eask-lisp-root) ; path/to/eask/cli/lisp/ 🔍 Function: eask-working-directory () Return the working directory of the program going to be executed.\n(message \u0026#34;%s\u0026#34; (eask-working-directory)) ; path/to/current/work/space/ 🔍 Function: eask-command () Return the current command in string. Suppose the command is:\neask init then,\n(message \u0026#34;%s\u0026#34; (eask-command)) ; init 🔍 Function: eask-command-check (version) Report error if the current command requires minimum version.\n(eask-command-check \u0026#34;27.1\u0026#34;) ; The command requires 27.1 and above! 🔍 Function: eask-command-p (commands) Return t if COMMANDS is the current command.\n🔍 Function: eask-special-p () Return t if the command that can be run without Eask-file existence.\nThis allows some commands can still be executed without defining the user directory. This can be handy when you want to do normal operations without touching the user directory.\n🔍 Function: eask-execution-p () Return t if the command is the execution command.\nThis is added because we don\u0026rsquo;t want to pollute error and warn functions.\n🔍 Function: eask-checker-p () Return t if running Eask as the checker.\nWithout this flag, the process will be terminated once the error is occurred. This flag allows you to run through operations without reporting errors.\n🔍 Function: eask-script (script) Return full script filename.\n(eask-script \u0026#34;extern/pacakge\u0026#34;) ; {project-root}/lisp/extern/package.el 🔍 Function: eask-load (script) Load another eask script.\n(eask-load \u0026#34;extern/ansi\u0026#34;) ; load {project-root}/lisp/extern/ansi.el file 🔍 Function: eask-call (script) Call another eask script.\n(eask-call \u0026#34;clean/elc\u0026#34;) ; call command `eask clean-elc` Note 💡 We don\u0026rsquo;t often call this since we don\u0026rsquo;t wish to execute another command directly! 🔍 Function: eask-import (url) Load and evaluate the script from the url.\n(eask-import \u0026#34;https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/yes-no.el\u0026#34;) ;; The script will be available after the call! 🔍 Macro: eask-defvc\u0026lt; (version \u0026amp;rest body) Define the scope if the Emacs version is below a specific version.\nVERSION is an integer and will be compared with emacs-major-version.\n(eask-defvc\u0026lt; 28 ;; This is missing before Emacs 28; define it (defvar package-native-compile nil)) Note 💡 This is used for Emacs compatibility! 🔍 Macro: eask\u0026ndash;silent (\u0026amp;rest body) Mute all messages from standard output inside the scope.\n(eask--unsilent (message \u0026#34;You can\u0026#39;t hear me! :(\u0026#34;)) 🔍 Macro: eask\u0026ndash;unsilent (\u0026amp;rest body) Unmute all messages from standard output inside the scope.\n(eask--unsilent (message \u0026#34;You can hear me! :)\u0026#34;)) 🔍 Function: eask-dependencies () Return a list of dependencies.\nElements should either be (NAME . VERSION) or (NAME . RECIPE-FORMAT).\n🔍 Function: eask-pkg-init (\u0026amp;optional force) Initialize packages for use.\n(eask-start (eask-pkg-init) ;; Now you can use packages installed in `package-user-dir\u0026#39; ) Note 💡 This is usually called after eask-start! 🔍 Macro: eask-with-archives (archives \u0026amp;rest body) Scope that temporary makes archives available.\nThe argument ARCHIVES can either be a string or a list of strings.\n(eask-with-archives \u0026#34;melpa\u0026#34; (eask-package-install \u0026#39;dash)) ; install packages that are only defined in MELPA Note 💡 This is handy when you need certain packages from certain archives. 🔍 Function: eask-archive-install-packages (archives \u0026amp;rest names) Install packages with archives setup.\nThe arugment names can be a symbol or list of symbols.\n(eask-archive-install-packages \u0026#39;(\u0026#34;gnu\u0026#34; \u0026#34;melpa\u0026#34;) \u0026#39;el2org) ; Accept multiple arguments. Note 💡 This only installs packages if they are missing. 🔍 Function: eask-package-desc (name \u0026amp;optional current) Build package descriptor for a package.\nCURRENT means installed packages; otherwise it will return any available packages from selected package archives.\n🔍 Function: eask-argv (index) Return a command-line argument by index.\n🔍 Function: eask-args () Return a list that is extracted from command-line arguments.\neask info --verbose 4 foo bar It will ignore --verbose and 4, and only returns foo, and bar.\n🔍 Variable: eask-file Path to currently loaded Eask-file.\n🔍 Variable: eask-file-root Directory to currently loaded Eask-file.\n🔍 Function: eask\u0026ndash;match-file (name) Check to see if NAME is our target Eask-file, then return it.\nThe following output is with Emacs 28.1:\n(eask--match-file \u0026#34;Eask\u0026#34;) ; t (eask--match-file \u0026#34;Eask.28\u0026#34;) ; t (eask--match-file \u0026#34;Eask.28.1\u0026#34;) ; t (eask--match-file \u0026#34;Eask.29\u0026#34;) ; nil (eask--match-file \u0026#34;Easkfile\u0026#34;) ; t (eask--match-file \u0026#34;Easkfile.28\u0026#34;) ; t (eask--match-file \u0026#34;Easkfile.29\u0026#34;) ; nil 🔍 Function: eask\u0026ndash;all-files (\u0026amp;optional dir) Return a list of Eask files from DIR.\nConsider the following directory tree:\n. root ├── Eask ├── Eask.28 └── Eask.29 The following output is with Emacs 28.1:\n(eask--all-files \u0026#34;/root/\u0026#34;) ; \u0026#39;(Eask Eask.28) 🔍 Function: eask\u0026ndash;find-files (start-path) Find the Eask-file from START-PATH.\nConsider the following directory tree:\n.project ├─ src │ └── config.el ├── Eask ├── Eask.28 └── Eask.29 The following output is with Emacs 28.1:\n(eask--find-files \u0026#34;/project/src/config.el\u0026#34;) ; \u0026#39;(/project/Eask /project/Eask.28) 🔍 Function: eask-file-try-load (start-path) Try load the Eask-file in START-PATH.\n(eask--find-files \u0026#34;/project/src/\u0026#34;) ; t 🔍 Function: eask-network-insecure-p () Return t if the current Emacs session allows insecure network connections.\n🚩 Flags 🔍 Function: eask-global-p () Return t if the global option is enabled.\n(when (eask-global-p) user-emacs-directory) ; ~/.eask/ 🔍 Function: eask-config-p () Return t if the config option is enabled.\n(when (eask-config-p) user-emacs-directory) ; ~/.emacs.d Note 💡 If both options --config and --global are on, the global space is chosen over the config space. 🔍 Function: eask-local-p () This uses the current workspace, and this is the default.\n(when (eask-local-p) user-emacs-directory) ; ./.eask/{emacs-version}/ Note 💡 This function returns t only when (eask-global-p) and (eask-config-p) are false! 🔍 Function: eask-all-p () Return t if the all option is enabled.\n(when (eask-all-p) ;; Run all tests ...) 🔍 Function: eask-quick-p () Return t if the quick option is enabled.\n(unless (eask-quick-p) (load user-init-file) ...) 🔍 Function: eask-force-p () Return t if the force option is enabled.\n(package-delete .. (eask-force-p)) 🔍 Function: eask-dev-p () Return t if the development option is enabled.\n(when (eask-dev-p) (package-install \u0026#39;ert-runner)) ; install development dependency 🔍 Function: eask-debug-p () Return t if the debug option is enabled.\n(when (eask-debug-p) (error \u0026#34;Executing in debug mode...\u0026#34;)) 🔍 Function: eask-strict-p () Return t if the strict option is enabled.\n(setq byte-compile-error-on-warn (eask-strict-p)) 🔍 Function: eask-timestamps-p () Return t/nil if the timestamps option is enabled/disabled.\nThese flags can\u0026rsquo;t co-exist in the same command.\n(when (eask-timestamps-p) (message \u0026#34;Print log with timestamps!\u0026#34;)) 🔍 Function: eask-log-level-p () Return t/nil if the log-level option is enabled/disabled.\nThese flags can\u0026rsquo;t co-exist in the same command.\n(when (eask-log-level-p) (message \u0026#34;Print log with level prefix!\u0026#34;)) 🔍 Function: eask-log-file-p () Return t/nil if the log-file option is enabled/disabled.\nThese flags can\u0026rsquo;t co-exist in the same command.\n(when (eask-log-file-p) (message \u0026#34;Let\u0026#39;s create a log file!\u0026#34;)) 🔍 Function: eask-no-color-p () Return t if the color option is enabled.\n(unless (eask-no-color-p) (message \u0026#34;This string has no ansi code!\u0026#34;)) 🔍 Function: eask-allow-error-p () Return t if the allow-error option is enabled.\n(unless (eask-allow-error-p) (error \u0026#34;Stop here.\u0026#34;)) 🔍 Function: eask-insecure-p () Return t if the insecure option is enabled.\n(when (eask-insecure-p) ;; Do some dangerous tasks? ) 🔍 Function: eask-proxy () 🔍 Function: eask-http-proxy () 🔍 Function: eask-https-proxy () 🔍 Function: eask-no-proxy () Return a string represents hostname + port number.\neask [command] --proxy \u0026#34;localhost:1000\u0026#34; eask [command] --http-proxy \u0026#34;localhost:2000\u0026#34; eask [command] --https-proxy \u0026#34;localhost:3000\u0026#34; eask [command] --no-proxy \u0026#34;localhost:4000\u0026#34; 🔍 Function: eask-destination () Return a string represents the destination (output path).\n(write-file (or (eask-destination) \u0026#34;./dist\u0026#34;)) ; write file to destination 🔍 Function: eask-depth () Return an integer represents the depth of the current print level.\n(setq print-level (eask-depth)) 🔍 Function: eask-verbose () Return an integer represents the verbosity level.\n(when (= (eask-verbose) 4) (setq byte-compile-verbose t)) 🚩 Eask-file These functions are the actual implementation of Eask-file DSL; and have the word eask- as the function prefix.\nSee DSL section for more information.\n🔍 Variable: eask-package It holds package\u0026rsquo;s NAME, VERSION, and DESCRIPTION in a plist.\n(plist-get eask-package :name) ; return package name Three functions that are extended from this variable:\n(eask-package-name) (eask-package-version) (eask-package-description) 🔍 Variable: eask-package-file Points to package main file.\n🔍 Variable: eask-package-desc Package descriptor from the package main file.\n(package-desc-p eask-package-desc) ; return t Note ⚠ This can be nil if the package-descriptor cannot be constructed correctly! 🔍 Variable: eask-files Holds a list of files pattern in wildcard specification.\n🔍 Variable: eask-scripts Holds a list of available scripts that can be executed by user using the eask run-script command.\n🔍 Variable: eask-depends-on-emacs Holds information about Emacs minimum version.\n(depends-on \u0026#34;emacs\u0026#34; \u0026#34;26.1\u0026#34;) Function will return Emacs version in string.\n(eask-depends-emacs-version) - return \u0026quot;26.1\u0026quot; 🔍 Variable: eask-depends-on Holds a list of dependencies.\n🔍 Variable: eask-depends-on-dev Holds a list of dependencies that are development used.\n🔍 Function: eask-f-package (name version description) Alias of package.\n🔍 Function: eask-f-website-url (url) Alias of website-url.\n🔍 Function: eask-f-keywords (\u0026amp;rest keywords) Alias of keywords.\n🔍 Function: eask-f-author (name \u0026amp;optional email) Alias of author.\n🔍 Function: eask-f-license (name) Alias of license.\n🔍 Function: eask-f-package-file (file) Alias of package-file.\n🔍 Function: eask-f-files (pkg \u0026amp;rest args) Alias of files.\n🔍 Function: eask-f-script (name command \u0026amp;rest args) Alias of script.\n🔍 Function: eask-f-source (name \u0026amp;optional location) Alias of source.\n🔍 Function: eask-f-source-priority (name \u0026amp;optional priority) Alias of source-priority.\n🔍 Function: eask-f-depends-on (pkg \u0026amp;rest args) Alias of depends-on.\n🔍 Function: eask-f-development (\u0026amp;rest dependencies) Alias of development.\n🔍 Function: eask-f-exec-paths (\u0026amp;rest dirs) Alias of exec-paths.\n🔍 Function: eask-f-load-paths (\u0026amp;rest dirs) Alias of load-paths.\n🚩 Logging Logger utility with timestamps and log level.\nThe log level value is defined in function eask--verb2lvl.\nLevel Description Value debug Designates fine-grained informational events that are most useful to debug an application. 4 log Designates normal messages. 3 info Designates informational messages that highlight the progress of the application at coarse-grained level. 2 warn Designates potentially harmful situations. 1 error Designates error events that might still allow the application to continue running. 0 The default level is log.\n🔍 Variable: eask-verbosity The verbosity level is represented as an integer.\n(setq eask-verbosity 4) ; you could set from 0 to 4 🔍 Variable: eask-timestamps Log messages with timestamps.\n(setq eask-timestamps t) Output:\n2022-04-14 13:44:46 This is a message with timestamps 🔍 Variable: eask-log-level Log messages with level. (default: nil)\n(setq eask-log-level t) Output:\n[DEBUG] This is a DEBUG message with log level 🔍 Variable: eask-log-file Weather to generate log files. (default: nil)\n(setq eask-log-level t) Use command cat to see the log,\ncat /.log/messages.log 🔍 Variable: eask-level-color Define each log level color.\n(setq eask-level-color \u0026#39;((debug . ansi-blue) (log . ansi-white) (info . ansi-cyan) (warn . ansi-yellow) (error . ansi-red))) 🔍 Function: eask-reach-verbosity-p (symbol) Make execution when it reaches the verbosity level.\n(when (eask-reach-verbosity-p \u0026#39;debug) ;; TODO: execution here.. ) 🔍 Macro: eask-with-verbosity (symbol \u0026amp;rest body) Define verbosity scope.\n(eask-with-verbosity \u0026#39;debug ;; TODO: execution here.. ) Everything in the scope of this macro will be muted unless the verbosity reaches. It will only be printed when you have specified --verbose 4 global option.\n🔍 Macro: eask-with-verbosity-override (symbol \u0026amp;rest body) Define override verbosity scope.\n(eask-with-verbosity \u0026#39;debug (eask-with-verbosity-override \u0026#39;log ;; TODO: execution here.. ) (eask-with-verbosity-override \u0026#39;info ;; TODO: execution here.. )) Like macro eask-with-verbosity; but force display messages if it wasn\u0026rsquo;t able to display.\n🔍 Function: eask-debug (msg \u0026amp;rest args) (eask-debug \u0026#34;This is DEBUG message\u0026#34;) 2022-04-14 17:31:54 [DEBUG] This is DEBUG message 🔍 Function: eask-log (msg \u0026amp;rest args) (eask-log \u0026#34;This is LOG message\u0026#34;) 2022-04-14 17:31:54 [LOG] This is LOG message 🔍 Function: eask-info (msg \u0026amp;rest args) (eask-info \u0026#34;This is INFO message\u0026#34;) 2022-04-14 17:31:54 [INFO] This is INFO message 🔍 Function: eask-warn (msg \u0026amp;rest args) (eask-warn \u0026#34;This is WARNING message\u0026#34;) 2022-04-14 17:31:54 [WARNING] This is WARNING message 🔍 Function: eask-error (msg \u0026amp;rest args) (eask-error \u0026#34;This is ERROR message\u0026#34;) 2022-04-14 17:31:54 [ERROR] This is ERROR message 🔍 Function: eask-print (msg \u0026amp;rest args) Standard output printing without newline.\n(eask-println \u0026#34;Print to stdout!\u0026#34;) 🔍 Function: eask-println (msg \u0026amp;rest args) Like the function eask-print but contains the newline at the end.\n(eask-println \u0026#34;Print to stdout! (with newline)\u0026#34;) 🔍 Function: eask-msg (msg \u0026amp;rest args) Like the message function but will replace unicode with color.\n(eask-msg \u0026#34;Print this message with newline!\u0026#34;) 🔍 Function: eask-write (msg \u0026amp;rest args) Like the eask-msg function but without the newline at the end.\n(eask-write \u0026#34;Print this message without newline...\u0026#34;) 🔍 Function: eask-report (\u0026amp;rest args) Report error/warning depends on strict flag.\n(eask-report \u0026#34;This can be warning or error\u0026#34;) See option \u0026ndash;strict.\n🚩 Exit Code 🔍 Variable: eask\u0026ndash;exit-code Exit code specification.\n🔍 Function: eask-exit-code (\u0026amp;optional key) Return the exit code by the key symbol in the variable eask--exit-code.\n(eask-exit-code \u0026#39;misuse) ; by symbol 🔍 Function: eask\u0026ndash;exit (\u0026amp;optional exit-code \u0026amp;rest _) Send exit code.\nThis will kill Emacs process.\n(eask--exit 2) ; by number (eask--exit \u0026#39;misuse) ; by symbol 🚩 Error Handling 🔍 Variable: eask\u0026ndash;ignore-error-p Non-nil to prevent Emacs from being killed.\n(let ((eask--ignore-error-p t)) (error \u0026#34;Emacs can\u0026#39;t die! :P\u0026#34;)) 🔍 Variable: eask-inhibit-error-message Non-nil to stop error/warning message.\n(let ((eask-inhibit-error-message t)) (error \u0026#34;This won\u0026#39;t display at all!\u0026#34;)) 🔍 Macro: eask-ignore-errors (\u0026amp;rest body) Prevent Emacs from being killed.\n(eask-ignore-errors (error \u0026#34;Emacs can\u0026#39;t die! :P\u0026#34;)) 🔍 Macro: eask\u0026ndash;silent-error (\u0026amp;rest body) Inhibit display error/warning messages.\n(eask--silent-error (error \u0026#34;This won\u0026#39;t display at all!\u0026#34;)) 🔍 Macro: eask-ignore-errors-silent (\u0026amp;rest body) Prevent Emacs from being killed and inhibit display error/warning messages.\n(eask-ignore-errors-silent (error \u0026#34;Nothing happens!\u0026#34;)) 🚩 File 🔍 Function: eask-package-files () Return a list of package files.\n🔍 Function: eask-package-el-files () Return a list of package files with .el extension.\n🔍 Function: eask-package-elc-files () Return a list of package files with .elc extension.\n🔍 Function: eask-package-multi-p () Return nil if single file package.\n🔍 Function: eask-package-single-p () Return t if single file package.\n🔍 Function: eask-unpacked-size () Return size of the current package.\nNote ⚠️ This returns a string not bytes. 🚩 Progress 🔍 Macro: eask-with-progress (msg-start body msg-end) Create execution with the responsive message output.\n(eask-with-progress \u0026#34;Downloading files... \u0026#34; (eask-with-verbosity \u0026#39;debug ; Often used with `eask-with-verbosity\u0026#39; ;; Execute some operations.. ) \u0026#34;done ✓\u0026#34;) Expect output:\nDownloading files... done ✓ 🔍 Function: eask-print-log-buffer (\u0026amp;optional buffer-or-name) Print buffer and highlight the errors and warnings.\n(eask-print-log-buffer \u0026#34;*Package-Lint*\u0026#34;) Note 💡 This is handy for linters that create a buffer to display errors and warnings. 🚩 Help 🔍 Function: eask-help (command \u0026amp;optional print-or-exit-code) Print help manual located under lisp/help/ directory.\n(eask-help \u0026#34;core/search\u0026#34;) ; Exit code 1 Alternatively, you can specify the exit code using the second parameter, print-or-exit-code, which defaults to 1.\n(eask-help \u0026#34;core/search\u0026#34; 4) ; Exit code 4 To prevent the program from exiting with a code, pass any non-nil value.\n(eask-help \u0026#34;core/search\u0026#34; t) ; Skip exiting Note 💡 This is used when a command fails, and would like to give users some tips! 🚩 Utilities 🔍 Function: eask-guess-package-name () Return the possible package name.\n🔍 Function: eask-guess-entry-point () Return the possible package\u0026rsquo;s entry point.\n","description":"This document provides a reference to the public Eask API, which you may use in your projects and extensions to Eask.\n🚩 Entry Point 🔍 Snippet: _prepare.el 🔍 Macro: eask-start (\u0026amp;rest body) 🚩 Environment 🔍 Variable: eask-has-colors 🔍 Variable: eask-homedir 🔍 Variable: eask-userdir 🔍 Variable: eask-package-sys-dir 🔍 Variable: eask-invocation 🔍 Variable: eask-is-pkg 🔍 Variable: eask-rest 🔍 Function: eask-rest () 🚩 Core 🔍 Variable: eask-lisp-root 🔍 Function: eask-working-directory () 🔍 Function: eask-command () 🔍 Function: eask-command-check (version) 🔍 Function: eask-command-p (commands) 🔍 Function: eask-special-p () 🔍 Function: eask-execution-p () 🔍 Function: eask-checker-p () 🔍 Function: eask-script (script) 🔍 Function: eask-load (script) 🔍 Function: eask-call (script) 🔍 Function: eask-import (url) 🔍 Macro: eask-defvc\u0026lt; (version \u0026amp;rest body) 🔍 Macro: eask\u0026ndash;silent (\u0026amp;rest body) 🔍 Macro: eask\u0026ndash;unsilent (\u0026amp;rest body) 🔍 Function: eask-dependencies () 🔍 Function: eask-pkg-init (\u0026amp;optional force) 🔍 Macro: eask-with-archives (archives \u0026amp;rest body) 🔍 Function: eask-archive-install-packages (archives \u0026amp;rest names) 🔍 Function: eask-package-desc (name \u0026amp;optional current) 🔍 Function: eask-argv (index) 🔍 Function: eask-args () 🔍 Variable: eask-file 🔍 Variable: eask-file-root 🔍 Function: eask\u0026ndash;match-file (name) 🔍 Function: eask\u0026ndash;all-files (\u0026amp;optional dir) 🔍 Function: eask\u0026ndash;find-files (start-path) 🔍 Function: eask-file-try-load (start-path) 🔍 Function: eask-network-insecure-p () 🚩 Flags 🔍 Function: eask-global-p () 🔍 Function: eask-config-p () 🔍 Function: eask-local-p () 🔍 Function: eask-all-p () 🔍 Function: eask-quick-p () 🔍 Function: eask-force-p () 🔍 Function: eask-dev-p () 🔍 Function: eask-debug-p () 🔍 Function: eask-strict-p () 🔍 Function: eask-timestamps-p () 🔍 Function: eask-log-level-p () 🔍 Function: eask-log-file-p () 🔍 Function: eask-no-color-p () 🔍 Function: eask-allow-error-p () 🔍 Function: eask-insecure-p () 🔍 Function: eask-proxy () 🔍 Function: eask-http-proxy () 🔍 Function: eask-https-proxy () 🔍 Function: eask-no-proxy () 🔍 Function: eask-destination () 🔍 Function: eask-depth () 🔍 Function: eask-verbose () 🚩 Eask-file 🔍 Variable: eask-package 🔍 Variable: eask-package-file 🔍 Variable: eask-package-desc 🔍 Variable: eask-files 🔍 Variable: eask-scripts 🔍 Variable: eask-depends-on-emacs 🔍 Variable: eask-depends-on 🔍 Variable: eask-depends-on-dev 🔍 Function: eask-f-package (name version description) 🔍 Function: eask-f-website-url (url) 🔍 Function: eask-f-keywords (\u0026amp;rest keywords) 🔍 Function: eask-f-author (name \u0026amp;optional email) 🔍 Function: eask-f-license (name) 🔍 Function: eask-f-package-file (file) 🔍 Function: eask-f-files (pkg \u0026amp;rest args) 🔍 Function: eask-f-script (name command \u0026amp;rest args) 🔍 Function: eask-f-source (name \u0026amp;optional location) 🔍 Function: eask-f-source-priority (name \u0026amp;optional priority) 🔍 Function: eask-f-depends-on (pkg \u0026amp;rest args) 🔍 Function: eask-f-development (\u0026amp;rest dependencies) 🔍 Function: eask-f-exec-paths (\u0026amp;rest dirs) 🔍 Function: eask-f-load-paths (\u0026amp;rest dirs) 🚩 Logging 🔍 Variable: eask-verbosity 🔍 Variable: eask-timestamps 🔍 Variable: eask-log-level 🔍 Variable: eask-log-file 🔍 Variable: eask-level-color 🔍 Function: eask-reach-verbosity-p (symbol) 🔍 Macro: eask-with-verbosity (symbol \u0026amp;rest body) 🔍 Macro: eask-with-verbosity-override (symbol \u0026amp;rest body) 🔍 Function: eask-debug (msg \u0026amp;rest args) 🔍 Function: eask-log (msg \u0026amp;rest args) 🔍 Function: eask-info (msg \u0026amp;rest args) 🔍 Function: eask-warn (msg \u0026amp;rest args) 🔍 Function: eask-error (msg \u0026amp;rest args) 🔍 Function: eask-print (msg \u0026amp;rest args) 🔍 Function: eask-println (msg \u0026amp;rest args) 🔍 Function: eask-msg (msg \u0026amp;rest args) 🔍 Function: eask-write (msg \u0026amp;rest args) 🔍 Function: eask-report (\u0026amp;rest args) 🚩 Exit Code 🔍 Variable: eask\u0026ndash;exit-code 🔍 Function: eask-exit-code (\u0026amp;optional key) 🔍 Function: eask\u0026ndash;exit (\u0026amp;optional exit-code \u0026amp;rest _) 🚩 Error Handling 🔍 Variable: eask\u0026ndash;ignore-error-p 🔍 Variable: eask-inhibit-error-message 🔍 Macro: eask-ignore-errors (\u0026amp;rest body) 🔍 Macro: eask\u0026ndash;silent-error (\u0026amp;rest body) 🔍 Macro: eask-ignore-errors-silent (\u0026amp;rest body) 🚩 File 🔍 Function: eask-package-files () 🔍 Function: eask-package-el-files () 🔍 Function: eask-package-elc-files () 🔍 Function: eask-package-multi-p () 🔍 Function: eask-package-single-p () 🔍 Function: eask-unpacked-size () 🚩 Progress 🔍 Macro: eask-with-progress (msg-start body msg-end) 🔍 Function: eask-print-log-buffer (\u0026amp;optional buffer-or-name) 🚩 Help 🔍 Function: eask-help (command \u0026amp;optional print-or-exit-code) 🚩 Utilities 🔍 Function: eask-guess-package-name () 🔍 Function: eask-guess-entry-point () 🚩 Entry Point 🔍 Snippet: _prepare.el Load lisp/_prepare.el to start using other Eask API.\n"},{"id":24,"href":"/Troubleshooting/","title":"Troubleshooting","parent":"","content":"This document helps you troubleshoot Eask.\n🚩 Possible Error Variables ⛔️ Error when running an Eask command 🚩 Possible Error Variables Some potential variables can cause faulty Eask, please check:\nEmacs is installed and set up with PATH Eask is installed correctly Node version should be 14.x or above ⛔️ Error when running an Eask command If you run an Eask command and get an error, there are a few things you can try:\nMake sure that you have the latest Eask version. You can determine the current Eask version with eask --version. Upgrade Eask with eask upgrade-eask or npm install -g @emacs-eask/cli@latest if you chose to install from npm. Note ⚠ Warning\nIf you installed Eask with npm, then you should probably upgrade it through npm. Otherwise, you would just have to ensure the git is installed.\nIf the error persists, try to reinstall Eask from scratch. If Eask still does not work, please report an issue to the issue tracker. Please include Eask output with the [\u0026ndash;verbose 4] and [\u0026ndash;debug] options enabled, to give us as much information as possible.\n","description":"This document helps you troubleshoot Eask.\n🚩 Possible Error Variables ⛔️ Error when running an Eask command 🚩 Possible Error Variables Some potential variables can cause faulty Eask, please check:\nEmacs is installed and set up with PATH Eask is installed correctly Node version should be 14.x or above ⛔️ Error when running an Eask command If you run an Eask command and get an error, there are a few things you can try:\n"},{"id":25,"href":"/FAQ/","title":"FAQ","parent":"","content":"Here is a list of general frequently asked questions.\n🔍 About Eask ❓ Do you need Node.JS to use Eask? ❓ Who should use this tool? ❓ Where can I download the Eask snapshot? 🔍 Technology Choice ❓ Why Node.JS? ❓ Why JavaScript? ❓ Why yargs? 🔍 Usage ❓ How to configure Eask? ❓ How can I install packages directly from the repository? 🔍 Troubleshooting ❓ Why am I getting the error package target tar/el not found while installing? ❓ Why am I getting the error package is not installable? ❓ Why am I seeing the error: \u0026ldquo;Package `emacs-XX.X\u0026rsquo; is unavailable\u0026rdquo;? ❓ Why am I getting git errors with status 2? ❓ Why am I getting tar exited with status 2? 🔍 About Eask ❓ Do you need Node.JS to use Eask? The answer is NO.\nEask builds native executable on every release, see our release page to download it! However, Node.JS is required if you are going to develop Eask!\n❓ Who should use this tool? Here are our suggestions; if you plan to work on an OS-specific package (never going to other platforms), go for other tools. On the other hand, Eask aims to provide the best consistency between each OS. Alternatively, if you want to learn a tool that works everywhere, Eask is one of the best choices.\n❓ Where can I download the Eask snapshot? You can download the latest executable (snapshot) in our emacs-eask/binaries repository!\n🔍 Technology Choice ❓ Why Node.JS? Node provides better support for various terminal applications compared to shell scripts. It offers features like a rich, colorful interface and access to the vast npm ecosystem, making cross-platform development more convenient. This is especially true since Microsoft acquired npm Inc., likely ensuring strong support for their own systems.\nCask seems to have dropped support for Windows (while still supporting WSL) after version 0.8.6. Earlier versions were built on Python, but Python’s support on Windows has traditionally been less reliable than Node.js.\nSee issue #140 for more information!\n❓ Why JavaScript? There are many languages I could use to build around Eask, so why did I choose JavaScript?\nI have three reasons:\nJavaScript is easy to learn. It offers excellent cross-platform compatibility, thanks to the Node.js runtime. I just happen to know JavaScript, and I’m comfortable with it. I also considered Rust and Common Lisp. However, Rust was still relatively new when I started this project, and Common Lisp, while powerful, has a steeper learning curve and is often seen as somewhat outdated. So, I went with JavaScript.\n❓ Why yargs? yargs has a large and active community and is widely used in various tools. It’s fully cross-platform and, most importantly, works seamlessly on Linux, macOS, and Windows.\nOne key difference between Eask and other alternatives is how they handle scripting. Tools like Cask, makem.sh, and Eldev rely heavily on batch and bash scripts. Instead, we took a different approach by leveraging a high-level programming language-JavaScript. This made development significantly easier, as we no longer need to worry about shell compatibility.\nThe main drawback is the Node.js runtime requirement, but we can mitigate this by packaging the entire CLI program into an executable. This way, users won’t need to install Node or npm beforehand to use Eask!\n🔍 Usage ❓ How to configure Eask? Eask-file is an Elisp file, similar to .emacs or init.el. Just as Emacs allows you to customize aspects you don’t like, Eask follows the same principle, letting you configure anything you dislike about Eask.\nAnother way to configure your workspace is similar to configuring Emacs itself:\nUse .eask/VERSION_NO/early-init.el (only after Emacs 27.1 onward) Use .eask/VERSION_NO/init.el ❓ How can I install packages directly from the repository? There are several ways to do this, but the standard method is to define a recipe format in the Eask file.\n(depends-on \u0026#34;organize-imports-java\u0026#34; :repo \u0026#34;jcs-elpa/organize-imports-java\u0026#34; :fetcher \u0026#39;github :files \u0026#39;(:defaults \u0026#34;sdk\u0026#34; \u0026#34;default\u0026#34;)) Eask builds the package once and hosts a local ELPA, allowing you to use it for later installation. This is the safest way to install packages as it simulates the most practical scenario.\nHowever, any other alternative would work as well since Eask is also an Elisp file.\npackage-vc-install quelpa use-package straight.el 🔍 Troubleshooting ❓ Why am I getting the error package target tar/el not found while installing? The example error message,\nhttp://melpa.org/packages/lsp-mode-20220429.647.tar: Not found The issue is caused by the mismatch from the backup archives. Generally, Eask will pick up the latest archive-contents from sources unless you have been pinging sources too many times. Then the source could block your IP for few minutes.\nYou can either wait for few minutes for the source to remove you from their black list. Or wait for the backup archives to update to the latest version. The backup archives repository is here.\n❓ Why am I getting the error package is not installable? The example error message,\nPackage not installable `helm\u0026#39;; make sure package archives are included First, determine the origin of the package and the specific source that provides its information. In the example above, helm is listed under the melpa source. To properly include it, update your Eask-file as follows:\n... (source \u0026#34;melpa\u0026#34;) ; \u0026lt;- add this line (depends-on \u0026#34;helm\u0026#34;) ❓ Why am I seeing the error: \u0026ldquo;Package `emacs-XX.X\u0026rsquo; is unavailable\u0026rdquo;? The example error message,\nLoading package information... done v Installing 1 specified package... - [1/1] Installing markdown-mode (20250226.231)... Package `emacs-28.1\u0026#39; is unavailable Wrong type argument: package-desc, nil This error occurs when Emacs attempts to install a package that requires a newer version of Emacs. In some cases, the requirement does not come directly from the package itself but from one of its dependencies.\nYou can either refrain from using this package or upgrade Emacs to the required version.\n❓ Why am I getting git errors with status 2? If you get this sample error message:\nLoading package information... done ✓ - Installing s (20210616.619)... Failed (status 2): git --no-pager remote get-url upstream . ... You may have bug-reference-prog-mode enabled. It is not yet compatible with Eask and should be disabled when running any of Eask’s commands.\nSee this issue for more information.\n❓ Why am I getting tar exited with status 2? If you get this sample error message:\nCreated your-package-0.1.0.tar containing: tar exited with status 2 Error: Process completed with exit code 1. You might get this error while using the BSD tar. The workaround is to use GNU tar instead.\n(setq package-build-tar-executable \u0026#34;/path/to/gnu/tar\u0026#34;) In Windows, BSD tar is used by default. If you have Git installed, you can use the tar executable from Git; it uses GNU tar.\nAdd the following code snippet to your Eask-file:\n;; Use GNU tar in Windows (when (memq system-type \u0026#39;(cygwin windows-nt ms-dos)) (setq package-build-tar-executable \u0026#34;C:/Program Files/Git/usr/bin/tar.exe\u0026#34;)) ","description":"Here is a list of general frequently asked questions.\n🔍 About Eask ❓ Do you need Node.JS to use Eask? ❓ Who should use this tool? ❓ Where can I download the Eask snapshot? 🔍 Technology Choice ❓ Why Node.JS? ❓ Why JavaScript? ❓ Why yargs? 🔍 Usage ❓ How to configure Eask? ❓ How can I install packages directly from the repository? 🔍 Troubleshooting ❓ Why am I getting the error package target tar/el not found while installing? ❓ Why am I getting the error package is not installable? ❓ Why am I seeing the error: \u0026ldquo;Package `emacs-XX.X\u0026rsquo; is unavailable\u0026rdquo;? ❓ Why am I getting git errors with status 2? ❓ Why am I getting tar exited with status 2? 🔍 About Eask ❓ Do you need Node.JS to use Eask? The answer is NO.\n"},{"id":26,"href":"/License/","title":"GNU General Public License","parent":"","content":"Licensed under GPLv3. See below for details.\nGNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. \u0026lt;http://fsf.org/\u0026gt; Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers\u0026#39; and authors\u0026#39; protection, the GPL clearly explains that there is no warranty for this free software. For both users\u0026#39; and authors\u0026#39; sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users\u0026#39; freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \u0026#34;This License\u0026#34; refers to version 3 of the GNU General Public License. \u0026#34;Copyright\u0026#34; also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u0026#34;The Program\u0026#34; refers to any copyrightable work licensed under this License. Each licensee is addressed as \u0026#34;you\u0026#34;. \u0026#34;Licensees\u0026#34; and \u0026#34;recipients\u0026#34; may be individuals or organizations. To \u0026#34;modify\u0026#34; a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u0026#34;modified version\u0026#34; of the earlier work or a work \u0026#34;based on\u0026#34; the earlier work. A \u0026#34;covered work\u0026#34; means either the unmodified Program or a work based on the Program. To \u0026#34;propagate\u0026#34; a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u0026#34;convey\u0026#34; a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u0026#34;Appropriate Legal Notices\u0026#34; to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \u0026#34;source code\u0026#34; for a work means the preferred form of the work for making modifications to it. \u0026#34;Object code\u0026#34; means any non-source form of a work. A \u0026#34;Standard Interface\u0026#34; means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u0026#34;System Libraries\u0026#34; of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u0026#34;Major Component\u0026#34;, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u0026#34;Corresponding Source\u0026#34; for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u0026#39;s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users\u0026#39; Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u0026#39;s users, your or third parties\u0026#39; legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program\u0026#39;s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u0026#34;keep intact all notices\u0026#34;. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u0026#34;aggregate\u0026#34; if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u0026#39;s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u0026#34;User Product\u0026#34; is either (1) a \u0026#34;consumer product\u0026#34;, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u0026#34;normally used\u0026#34; refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u0026#34;Installation Information\u0026#34; for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u0026#34;Additional permissions\u0026#34; are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u0026#34;further restrictions\u0026#34; within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u0026#34;entity transaction\u0026#34; is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u0026#39;s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \u0026#34;contributor\u0026#34; is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u0026#39;s \u0026#34;contributor version\u0026#34;. A contributor\u0026#39;s \u0026#34;essential patent claims\u0026#34; are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u0026#34;control\u0026#34; includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u0026#39;s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u0026#34;patent license\u0026#34; is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u0026#34;grant\u0026#34; such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u0026#34;Knowingly relying\u0026#34; means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u0026#39;s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u0026#34;discriminatory\u0026#34; if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others\u0026#39; Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u0026#34;or any later version\u0026#34; applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy\u0026#39;s public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u0026#34;AS IS\u0026#34; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u0026#34;copyright\u0026#34; line and a pointer to where the full notice is found. \u0026lt;one line to give the program\u0026#39;s name and a brief idea of what it does.\u0026gt; Copyright (C) \u0026lt;year\u0026gt; \u0026lt;name of author\u0026gt; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see \u0026lt;http://www.gnu.org/licenses/\u0026gt;. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: \u0026lt;program\u0026gt; Copyright (C) \u0026lt;year\u0026gt; \u0026lt;name of author\u0026gt; This program comes with ABSOLUTELY NO WARRANTY; for details type `show w\u0026#39;. This is free software, and you are welcome to redistribute it under certain conditions; type `show c\u0026#39; for details. The hypothetical commands `show w\u0026#39; and `show c\u0026#39; should show the appropriate parts of the General Public License. Of course, your program\u0026#39;s commands might be different; for a GUI interface, you would use an \u0026#34;about box\u0026#34;. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u0026#34;copyright disclaimer\u0026#34; for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see \u0026lt;http://www.gnu.org/licenses/\u0026gt;. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read \u0026lt;http://www.gnu.org/philosophy/why-not-lgpl.html\u0026gt;. ","description":"Licensed under GPLv3. See below for details.\nGNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. \u0026lt;http://fsf.org/\u0026gt; Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers\u0026#39; and authors\u0026#39; protection, the GPL clearly explains that there is no warranty for this free software. For both users\u0026#39; and authors\u0026#39; sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users\u0026#39; freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS 0. Definitions. \u0026#34;This License\u0026#34; refers to version 3 of the GNU General Public License. \u0026#34;Copyright\u0026#34; also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \u0026#34;The Program\u0026#34; refers to any copyrightable work licensed under this License. Each licensee is addressed as \u0026#34;you\u0026#34;. \u0026#34;Licensees\u0026#34; and \u0026#34;recipients\u0026#34; may be individuals or organizations. To \u0026#34;modify\u0026#34; a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u0026#34;modified version\u0026#34; of the earlier work or a work \u0026#34;based on\u0026#34; the earlier work. A \u0026#34;covered work\u0026#34; means either the unmodified Program or a work based on the Program. To \u0026#34;propagate\u0026#34; a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \u0026#34;convey\u0026#34; a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \u0026#34;Appropriate Legal Notices\u0026#34; to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. The \u0026#34;source code\u0026#34; for a work means the preferred form of the work for making modifications to it. \u0026#34;Object code\u0026#34; means any non-source form of a work. A \u0026#34;Standard Interface\u0026#34; means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \u0026#34;System Libraries\u0026#34; of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u0026#34;Major Component\u0026#34;, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \u0026#34;Corresponding Source\u0026#34; for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u0026#39;s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users\u0026#39; Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u0026#39;s users, your or third parties\u0026#39; legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program\u0026#39;s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \u0026#34;keep intact all notices\u0026#34;. c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u0026#34;aggregate\u0026#34; if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u0026#39;s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \u0026#34;User Product\u0026#34; is either (1) a \u0026#34;consumer product\u0026#34;, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u0026#34;normally used\u0026#34; refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \u0026#34;Installation Information\u0026#34; for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u0026#34;Additional permissions\u0026#34; are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \u0026#34;further restrictions\u0026#34; within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \u0026#34;entity transaction\u0026#34; is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u0026#39;s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. A \u0026#34;contributor\u0026#34; is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u0026#39;s \u0026#34;contributor version\u0026#34;. A contributor\u0026#39;s \u0026#34;essential patent claims\u0026#34; are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u0026#34;control\u0026#34; includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u0026#39;s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \u0026#34;patent license\u0026#34; is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u0026#34;grant\u0026#34; such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u0026#34;Knowingly relying\u0026#34; means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u0026#39;s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \u0026#34;discriminatory\u0026#34; if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others\u0026#39; Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \u0026#34;or any later version\u0026#34; applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy\u0026#39;s public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u0026#34;AS IS\u0026#34; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u0026#34;copyright\u0026#34; line and a pointer to where the full notice is found. \u0026lt;one line to give the program\u0026#39;s name and a brief idea of what it does.\u0026gt; Copyright (C) \u0026lt;year\u0026gt; \u0026lt;name of author\u0026gt; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see \u0026lt;http://www.gnu.org/licenses/\u0026gt;. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: \u0026lt;program\u0026gt; Copyright (C) \u0026lt;year\u0026gt; \u0026lt;name of author\u0026gt; This program comes with ABSOLUTELY NO WARRANTY; for details type `show w\u0026#39;. This is free software, and you are welcome to redistribute it under certain conditions; type `show c\u0026#39; for details. The hypothetical commands `show w\u0026#39; and `show c\u0026#39; should show the appropriate parts of the General Public License. Of course, your program\u0026#39;s commands might be different; for a GUI interface, you would use an \u0026#34;about box\u0026#34;. You should also get your employer (if you work as a programmer) or school, if any, to sign a \u0026#34;copyright disclaimer\u0026#34; for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see \u0026lt;http://www.gnu.org/licenses/\u0026gt;. The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read \u0026lt;http://www.gnu.org/philosophy/why-not-lgpl.html\u0026gt;. "},{"id":27,"href":"/","title":"","parent":"","content":" CLI for building, running, testing, and managing your Emacs Lisp dependencies After installing Eask, you can easily develop any Elisp package.\nOut of the box, Eask supports 80+ commands to help you throughout development. 🔥\nGetting Started 🏆 Feature overview Successor to Cask Eask is very similar to Cask!\nEask has all the commands from Cask, plus even more!\nOut-of-the-box Eask comes with 10+ built-in linters and test runners, so you don\u0026rsquo;t have to worry about how to use it!\nEask-file is an Elisp file Eask is treated as an Elisp file.\nYou can do anything just like you do in Emacs!\n","description":" CLI for building, running, testing, and managing your Emacs Lisp dependencies After installing Eask, you can easily develop any Elisp package.\nOut of the box, Eask supports 80+ commands to help you throughout development. 🔥\nGetting Started 🏆 Feature overview Successor to Cask Eask is very similar to Cask!\n"},{"id":28,"href":"/Contributing/How-to-Contribute/","title":"❓ How to Contribute","parent":"Contributing","content":" ⚜️ Code of Conduct 🪑 Open Development 📌 Semantic Versioning 💡 Branch Organization 📂 State of the project ⚜️ Code of Conduct We have adopted the Contributor Covenant as its Code of Conduct, and we expect project participants to adhere to it. Please read the full text so that you can understand what actions will and will not be tolerated.\n🪑 Open Development All work on Eask happens directly on GitHub. Both core team members and external contributors send pull requests which go through the same review process.\n📌 Semantic Versioning Eask follows semantic versioning. We release patch versions for critical bugfixes, minor versions for new features or non-essential changes, and major versions for any breaking changes. When we make breaking changes, we also introduce deprecation warnings in a minor version so that our users learn about the upcoming changes and migrate their code in advance.\nEvery significant change is documented in the changelog file.\n💡 Branch Organization Submit all changes directly to the master branch. We don’t use separate branches for development or for upcoming releases. We do our best to keep master in good shape, with all tests passing.\nCode that lands in master must be compatible with the latest stable release. It may contain additional features, but no breaking changes. We should be able to release a new minor version from the tip of master at any time.\n📂 State of the project The project\u0026rsquo;s bare-bones are pretty much done, we are currently looking for contributors to give us feedback and improve our TUI/UX for this tool!\nWe are also looking for advice to add more. Emacser often use commands and options, so these features are prepared by default! Like command lint (package-lint) or option --debug refers to debug-on-error to t!\n","description":" ⚜️ Code of Conduct 🪑 Open Development 📌 Semantic Versioning 💡 Branch Organization 📂 State of the project ⚜️ Code of Conduct We have adopted the Contributor Covenant as its Code of Conduct, and we expect project participants to adhere to it. Please read the full text so that you can understand what actions will and will not be tolerated.\n"},{"id":29,"href":"/Getting-Started/Introduction/","title":"🚪 Introduction","parent":"Getting Started","content":"Eask was originally designed as a package development tool for Elisp projects. However, it has since expanded to support a wide range of Emacs Lisp tasks. It can now be used in three major ways:\nAs a development tool for Elisp packages. For managing dependencies in your Emacs configuration. To run Elisp programs for a variety of purposes (essentially functioning as a runtime). With these capabilities in mind, what sets Eask apart from other build tools like Cask, makem.sh, and Eldev?\nGreat question! Eask has evolved beyond just a build tool—it serves multiple purposes! Here’s what Eask aims to be:\nConsistent: Provides a reliable sandboxing environment across all systems. Versatile: Includes commonly used Emacs commands like byte-compilation, checkdoc, and more. Robust: Delivers useful results even when user errors occur. Lightweight: Runs on any platform without dependencies. 📝 P.S. See Why Eask? for more detailed information.\n❓ Why Eask? Eask follows the same philosophy as Cask. To understand why you should use Eask (or Cask), check out the Why Cask? section on their website.\nMany tools, such as Cask, makem.sh, and Eldev, don’t fully support Windows. Cask has dropped support for Legacy Windows, makem.sh relies on Bash, and while Eldev does support Windows, its author doesn’t actively use it on the platform, meaning it lacks full testing (as seen in their CI workflows). In contrast, Eask is designed to work across all major platforms, including Linux, macOS, and Windows It prioritizes cross-platform compatibility and ensures consistency across different operating systems. If Eask runs on your machine, it will work reliably on any platform.\nHere’s our recommendation: if you’re developing an OS-specific package that will never need cross-platform support, other tools may be a better fit. However, if you want a tool that ensures seamless consistency across different operating systems, Eask is an excellent choice.\nAnother major advantage of Eask is its transparency—there are no hidden workflows or obscure processes running in the background. Additionally, Eask strictly avoids hacks or workaround fixes, ensuring that solutions are clean, maintainable, and aligned with best practices.\n⚖️ Comparisons The table was compiled by reading these projects’ documentation and source code, but the author is not an expert on these tools. Corrections are welcome.\n🔍 Project Wise The table shows what technology has been chosen by their author and how the project is being constructed. Furthermore, what technical decisions have they made? Drop support? Project\u0026rsquo;s layout? Etc.\nEask Cask Eldev makem.sh bin folder binary, bash, bat bash, bat bash, bat, ps1 bash Cross-Platform ✅ ❌, no Windows support ✅ ❌, no Windows support Emacs version 26.1+ 24.5+ 24.4+ 26.1+ Size 9,000+ lines 3,000+ lines 8,000+ lines 1,200+ lines Executable ✅ ❌ ❌ ❌ Pure Elisp ❌, JavaScript ✅ ✅ ✅ CLI Parser yargs commander built-in built-in Note 💡 makem.sh has a good comparisons document as well, visit their site 🔍 Feature Wise This is the feature comparison between each tool. Every tool has its advantages; choose the right tool that works for you!\nIf the features are not listed below, either it is forgotten or simply considered too essential, so every tool has it; hence we don\u0026rsquo;t add them to the list.\nEask Cask Eldev makem.sh Elisp configuration ✅, DSL is optional ❌, DSL only ✅, pure elisp ❌ Handle archives failure ✅, see archives ❌ ❌ ❌ create project, etc ✅ ❌ ❌ ❌ link local dependencies ✅ ✅ ✅ ❌ exec program ✅ ✅ ❌ ❌ eval expressions ✅ ✅ ✅ ❌ emacs execution ✅ ✅ ❌ ❌ Support docker ✅ ❌ ✅ ❌ Built-in linters ✅ ❌ ✅ ❌ Built-in tests ✅ ❌ ✅ ❌ Run script ✅ ❌ ❌ ❌ Self-defined commands ✅ ❌ ✅ ❌ Subcommand ✅ ❌ ❌ ❌ 📰 News 0.11.x - Add commands install-file and install-vc. 0.10.x - Add five new commands and improve the default user experience. 0.9.x - Enhance overall user experience. 0.8.x - Add link command. 0.7.x - Fix default-directory isn\u0026rsquo;t honored by -g option. 0.6.x - You can now use eask create to create an Elisp project. 0.5.x - Handle error for failed archive. 0.4.x - Add color logger. 0.3.x - Add verbosity level and timestamps. 0.2.x - Done basic error handling with exit code at the end of executions. 📝 Todo list 🔍 Core commands [FEAT] Add publish command; to publish the package to the eask archive? 🔍 Eask-file commands N/A 📂 Underlying Projects The design of Eask was greatly influenced by the following projects:\nCask - Project management tool for Emacs makem.sh - Makefile-like script for building and testing Emacs Lisp packages epm - Emacs Package Manager Eldev - Elisp Development Tool ","description":"Eask was originally designed as a package development tool for Elisp projects. However, it has since expanded to support a wide range of Emacs Lisp tasks. It can now be used in three major ways:\nAs a development tool for Elisp packages. For managing dependencies in your Emacs configuration. To run Elisp programs for a variety of purposes (essentially functioning as a runtime). With these capabilities in mind, what sets Eask apart from other build tools like Cask, makem.sh, and Eldev?\n"},{"id":30,"href":"/tos/","title":"Legal notice and privacy","parent":"","content":" Contact information Jen-Chieh Shen Email: jcs090219@gmail.com\nPrivacy policy Collection of general data and information The website emacs-eask.github.io collects a series of general data and information when a data subject or automated system calls up the website. This general data and information are stored in the server log files. Collected may be:\nthe browser types and versions used the operating system used by the accessing system the website from which an accessing system reaches our website (so-called referrers) the sub-websites the date and time of access to the Internet site an Internet protocol address (IP address) the Internet service provider of the accessing system any other similar data and information that may be used in the event of attacks on our information technology systems When using these general data and information, we do not draw any conclusions about the data subject. Rather, this information is needed to deliver the content of our website correctly and answer your request (Article 6.1b GDPR).\nYour IP address and the requested URL can be stored up to 7 days due to analyze possible problems with the web page. Given that a problem appears there are cases, where it is possible that this information is stored longer than 7 days to analyze the problem in depth. They will be deleted as soon as it is confirmed that they can no further help with diagnosing the problem or the problem is solved. (Article 6.1f GDPR).\nCookies This web page does not use any cookies.\n","description":" Contact information Jen-Chieh Shen Email: jcs090219@gmail.com\nPrivacy policy Collection of general data and information The website emacs-eask.github.io collects a series of general data and information when a data subject or automated system calls up the website. This general data and information are stored in the server log files. Collected may be:\nthe browser types and versions used the operating system used by the accessing system the website from which an accessing system reaches our website (so-called referrers) the sub-websites the date and time of access to the Internet site an Internet protocol address (IP address) the Internet service provider of the accessing system any other similar data and information that may be used in the event of attacks on our information technology systems When using these general data and information, we do not draw any conclusions about the data subject. Rather, this information is needed to deliver the content of our website correctly and answer your request (Article 6.1b GDPR).\n"},{"id":31,"href":"/tags/","title":"Tags","parent":"","content":"","description":""}]